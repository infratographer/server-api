directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
directive @prefixedID(prefix: String!) on OBJECT
"""Input information to create a server chassis."""
input CreateServerChassisInput {
	"""The ID for the server chassis type of this server chassis."""
	serverChassisTypeID: ID!
	"""The ID for the parent of this chassis."""
	parentChassisID: ID!
	"""The ID for the server of this server chassis."""
	serverID: ID!
	"""The serial number of the server chassis."""
	serial: String!
}
"""Input information to create a server chassis type."""
input CreateServerChassisTypeInput {
	"""The name of the vendor for the server chassis type."""
	vendor: String!
	"""The mode of the server chassis type."""
	model: String!
	"""The height of the server chassis type."""
	height: String!
	"""Whether the server chassis type is full depth."""
	isFullDepth: Boolean!
	"""The ID for the parent of this chassis type."""
	parentChassisTypeID: ID!
}
"""Input information to create a server component."""
input CreateServerComponentInput {
	"""The name of the server component."""
	name: String!
	"""The name of the vendor of the server component."""
	vendor: String!
	"""The model of the server component."""
	model: String!
	"""The serial number of the server component."""
	serial: String!
	componentTypeID: ID!
	serverID: ID!
}
"""Input information to create a server component type."""
input CreateServerComponentTypeInput {
	"""The name of the server component type."""
	name: String!
}
"""Create a new server."""
input CreateServerInput {
	"""The name of the server."""
	name: String!
	"""The description of the server."""
	description: String
	"""The ID for the owner of this server."""
	ownerID: ID!
	"""The ID for the location of this server."""
	locationID: ID!
	providerID: ID!
	serverTypeID: ID!
	componentIDs: [ID!]
}
"""Input information to create a server provider."""
input CreateServerProviderInput {
	"""The name of the server provider."""
	name: String!
	"""The ID for the resource provider of this server."""
	resourceProviderID: ID!
}
"""Input information to create a server type."""
input CreateServerTypeInput {
	"""The name of the server type."""
	name: String!
	"""The ID for the owner of this server type."""
	ownerID: ID!
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
interface IPAddressable {
	id: ID!
}
"""A valid JSON string."""
scalar JSON
type Mutation {
	"""Create a server chassis."""
	serverChassis(input: CreateServerChassisInput!): ServerChassisCreatePayload!
	"""Update a server chassis."""
	serverChassisUpdate(id: ID!, input: UpdateServerChassisInput!): ServerChassisUpdatePayload!
	"""Delete a server chassis."""
	serverChassisDelete(id: ID!): ServerChassisDeletePayload!
	"""Create a server chassis type."""
	serverChassisType(input: CreateServerChassisTypeInput!): ServerChassisTypeCreatePayload!
	"""Update a server chassis type."""
	serverChassisTypeUpdate(id: ID!, input: UpdateServerChassisTypeInput!): ServerChassisTypeUpdatePayload!
	"""Delete a server chassis type."""
	serverChassisTypeDelete(id: ID!): ServerChassisTypeDeletePayload!
	"""Create a server component."""
	serverComponentCreate(input: CreateServerComponentInput!): ServerComponentCreatePayload!
	"""Update a server component."""
	serverComponentUpdate(id: ID!, input: UpdateServerComponentInput!): ServerComponentUpdatePayload!
	"""Delete a server component."""
	serverComponentDelete(id: ID!): ServerComponentDeletePayload!
	"""Create a server component type."""
	serverComponentTypeCreate(input: CreateServerComponentTypeInput!): ServerComponentTypeCreatePayload!
	"""Update a server component type."""
	serverComponentTypeUpdate(id: ID!, input: UpdateServerComponentTypeInput!): ServerComponentTypeUpdatePayload!
	"""Delete a server component type."""
	serverComponentTypeDelete(id: ID!): ServerComponentTypeDeletePayload!
	"""Create a server provider."""
	serverProviderCreate(input: CreateServerProviderInput!): ServerProviderCreatePayload!
	"""Update a server provider."""
	serverProviderUpdate(id: ID!, input: UpdateServerProviderInput!): ServerProviderUpdatePayload!
	"""Delete a server provider."""
	serverProviderDelete(id: ID!): ServerProviderDeletePayload!
	"""Create a server."""
	serverCreate(input: CreateServerInput!): ServerCreatePayload!
	"""Update a server."""
	serverUpdate(id: ID!, input: UpdateServerInput!): ServerUpdatePayload!
	"""Delete a server."""
	serverDelete(id: ID!): ServerDeletePayload!
	"""Create a server type."""
	serverTypeCreate(input: CreateServerTypeInput!): ServerTypeCreatePayload!
	"""Update a server type."""
	serverTypeUpdate(id: ID!, input: UpdateServerTypeInput!): ServerTypeUpdatePayload!
	"""Delete a server type."""
	serverTypeDelete(id: ID!): ServerTypeDeletePayload!
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node {
	"""The id of the object."""
	id: ID!
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
	"""Specifies an ascending order for a given `orderBy` argument."""
	ASC
	"""Specifies a descending order for a given `orderBy` argument."""
	DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo @shareable {
	"""When paginating forwards, are there more items?"""
	hasNextPage: Boolean!
	"""When paginating backwards, are there more items?"""
	hasPreviousPage: Boolean!
	"""When paginating backwards, the cursor to continue."""
	startCursor: Cursor
	"""When paginating forwards, the cursor to continue."""
	endCursor: Cursor
}
type Query {
	"""Lookup a serverChassis by ID."""
	serverChassis(
		"""The server chassis ID."""
		id: ID!
	): ServerChassis!
	"""Lookup a serverChassisType by ID."""
	serverChassisType(
		"""The server chassis type ID."""
		id: ID!
	): ServerChassisType!
	"""Lookup a serverComponent by ID."""
	serverComponent(
		"""The server component ID."""
		id: ID!
	): ServerComponent!
	"""Lookup a serverComponentType by ID."""
	serverComponentType(
		"""The server component type ID."""
		id: ID!
	): ServerComponentType!
	"""Lookup a server provider by ID."""
	serverProvider(
		"""The server provider ID."""
		id: ID!
	): ServerProvider!
	"""Lookup a server by ID."""
	server(
		"""The server ID."""
		id: ID!
	): Server!
	"""Lookup a serverType by ID."""
	serverType(
		"""The server type ID."""
		id: ID!
	): ServerType!
	_entities(representations: [_Any!]!): [_Entity]!
	_service: _Service!
}
type Server implements Node & IPAddressable @key(fields: "id") @prefixedID(prefix: "srvrsrv") {
	"""The ID of the server."""
	id: ID!
	createdAt: Time!
	updatedAt: Time!
	"""The name of the server."""
	name: String!
	"""The description of the server."""
	description: String
	"""The server provider for the server."""
	serverProvider: ServerProvider! @goField(name: "Provider", forceResolver: false)
	serverType: ServerType!
	components(
		"""Returns the elements in the list that come after the specified cursor."""
		after: Cursor

		"""Returns the first _n_ elements from the list."""
		first: Int

		"""Returns the elements in the list that come before the specified cursor."""
		before: Cursor

		"""Returns the last _n_ elements from the list."""
		last: Int

		"""Ordering options for ServerComponents returned from the connection."""
		orderBy: ServerComponentOrder

		"""Filtering options for ServerComponents returned from the connection."""
		where: ServerComponentWhereInput
	): ServerComponentConnection!
}
type ServerChassis implements Node @key(fields: "id") @prefixedID(prefix: "srvrsch") {
	"""The ID of the server chassis."""
	id: ID!
	createdAt: Time!
	updatedAt: Time!
	"""The serial number of the server chassis."""
	serial: String!
}
"""A connection to a list of items."""
type ServerChassisConnection {
	"""A list of edges."""
	edges: [ServerChassisEdge]
	"""Information to aid in pagination."""
	pageInfo: PageInfo!
	"""Identifies the total count of items in the connection."""
	totalCount: Int!
}
"""Return response from serverChassisCreate"""
type ServerChassisCreatePayload {
	"""The created server chassis."""
	serverChassis: ServerChassis!
}
"""Return response from serverChassisDelete"""
type ServerChassisDeletePayload {
	"""The ID of the deleted server chassis."""
	deletedID: ID!
}
"""An edge in a connection."""
type ServerChassisEdge {
	"""The item at the end of the edge."""
	node: ServerChassis
	"""A cursor for use in pagination."""
	cursor: Cursor!
}
"""Ordering options for ServerChassis connections"""
input ServerChassisOrder {
	"""The ordering direction."""
	direction: OrderDirection! = ASC
	"""The field by which to order ServerChasses."""
	field: ServerChassisOrderField!
}
"""Properties by which ServerChassis connections can be ordered."""
enum ServerChassisOrderField {
	ID
	CREATED_AT
	UPDATED_AT
	SERVER_CHASSIS_TYPE
	PARENT_CHASSIS
	SERVER
}
type ServerChassisType implements Node @key(fields: "id") @prefixedID(prefix: "srvrsct") {
	"""The ID of the server chassis type."""
	id: ID!
	createdAt: Time!
	updatedAt: Time!
	"""The name of the vendor for the server chassis type."""
	vendor: String!
	"""The mode of the server chassis type."""
	model: String!
	"""The height of the server chassis type."""
	height: String!
	"""Whether the server chassis type is full depth."""
	isFullDepth: Boolean!
}
"""A connection to a list of items."""
type ServerChassisTypeConnection {
	"""A list of edges."""
	edges: [ServerChassisTypeEdge]
	"""Information to aid in pagination."""
	pageInfo: PageInfo!
	"""Identifies the total count of items in the connection."""
	totalCount: Int!
}
"""Return response from serverChassisTypeCreate"""
type ServerChassisTypeCreatePayload {
	"""The created server chassis type."""
	serverChassisType: ServerChassisType!
}
"""Return response from serverChassisTypeDelete"""
type ServerChassisTypeDeletePayload {
	"""The ID of the deleted server chassis type."""
	deletedID: ID!
}
"""An edge in a connection."""
type ServerChassisTypeEdge {
	"""The item at the end of the edge."""
	node: ServerChassisType
	"""A cursor for use in pagination."""
	cursor: Cursor!
}
"""Ordering options for ServerChassisType connections"""
input ServerChassisTypeOrder {
	"""The ordering direction."""
	direction: OrderDirection! = ASC
	"""The field by which to order ServerChassisTypes."""
	field: ServerChassisTypeOrderField!
}
"""Properties by which ServerChassisType connections can be ordered."""
enum ServerChassisTypeOrderField {
	ID
	CREATED_AT
	UPDATED_AT
	NAME
	PARENT_CHASSIS_TYPE
}
"""Return response from serverChassisTypeUpdate"""
type ServerChassisTypeUpdatePayload {
	"""The updated server chassis type."""
	serverChassisType: ServerChassisType!
}
"""
ServerChassisTypeWhereInput is used for filtering ServerChassisType objects.
Input was generated by ent.
"""
input ServerChassisTypeWhereInput {
	not: ServerChassisTypeWhereInput
	and: [ServerChassisTypeWhereInput!]
	or: [ServerChassisTypeWhereInput!]
	"""id field predicates"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	"""created_at field predicates"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	"""updated_at field predicates"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	"""vendor field predicates"""
	vendor: String
	vendorNEQ: String
	vendorIn: [String!]
	vendorNotIn: [String!]
	vendorGT: String
	vendorGTE: String
	vendorLT: String
	vendorLTE: String
	vendorContains: String
	vendorHasPrefix: String
	vendorHasSuffix: String
	vendorEqualFold: String
	vendorContainsFold: String
	"""model field predicates"""
	model: String
	modelNEQ: String
	modelIn: [String!]
	modelNotIn: [String!]
	modelGT: String
	modelGTE: String
	modelLT: String
	modelLTE: String
	modelContains: String
	modelHasPrefix: String
	modelHasSuffix: String
	modelEqualFold: String
	modelContainsFold: String
	"""height field predicates"""
	height: String
	heightNEQ: String
	heightIn: [String!]
	heightNotIn: [String!]
	heightGT: String
	heightGTE: String
	heightLT: String
	heightLTE: String
	heightContains: String
	heightHasPrefix: String
	heightHasSuffix: String
	heightEqualFold: String
	heightContainsFold: String
	"""is_full_depth field predicates"""
	isFullDepth: Boolean
	isFullDepthNEQ: Boolean
}
"""Return response from serverChassisUpdate"""
type ServerChassisUpdatePayload {
	"""The updated server chassis."""
	serverChassis: ServerChassis!
}
"""
ServerChassisWhereInput is used for filtering ServerChassis objects.
Input was generated by ent.
"""
input ServerChassisWhereInput {
	not: ServerChassisWhereInput
	and: [ServerChassisWhereInput!]
	or: [ServerChassisWhereInput!]
	"""id field predicates"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	"""created_at field predicates"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	"""updated_at field predicates"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	"""serial field predicates"""
	serial: String
	serialNEQ: String
	serialIn: [String!]
	serialNotIn: [String!]
	serialGT: String
	serialGTE: String
	serialLT: String
	serialLTE: String
	serialContains: String
	serialHasPrefix: String
	serialHasSuffix: String
	serialEqualFold: String
	serialContainsFold: String
}
type ServerComponent implements Node @key(fields: "id") @prefixedID(prefix: "srvrcmp") {
	"""The ID of the server component."""
	id: ID!
	createdAt: Time!
	updatedAt: Time!
	"""The name of the server component."""
	name: String!
	"""The name of the vendor of the server component."""
	vendor: String!
	"""The model of the server component."""
	model: String!
	"""The serial number of the server component."""
	serial: String!
	"""The server component type for the server component."""
	serverComponentType: ServerComponentType! @goField(name: "ComponentType", forceResolver: false)
	server: Server!
}
"""A connection to a list of items."""
type ServerComponentConnection {
	"""A list of edges."""
	edges: [ServerComponentEdge]
	"""Information to aid in pagination."""
	pageInfo: PageInfo!
	"""Identifies the total count of items in the connection."""
	totalCount: Int!
}
"""Return response from serverComponentCreate"""
type ServerComponentCreatePayload {
	"""The created server component."""
	serverComponent: ServerComponent!
}
"""Return response from serverComponentDelete"""
type ServerComponentDeletePayload {
	"""The ID of the deleted server component."""
	deletedID: ID!
}
"""An edge in a connection."""
type ServerComponentEdge {
	"""The item at the end of the edge."""
	node: ServerComponent
	"""A cursor for use in pagination."""
	cursor: Cursor!
}
"""Ordering options for ServerComponent connections"""
input ServerComponentOrder {
	"""The ordering direction."""
	direction: OrderDirection! = ASC
	"""The field by which to order ServerComponents."""
	field: ServerComponentOrderField!
}
"""Properties by which ServerComponent connections can be ordered."""
enum ServerComponentOrderField {
	ID
	CREATED_AT
	UPDATED_AT
	NAME
	VENDOR
	MODEL
	SERIAL
}
type ServerComponentType implements Node @key(fields: "id") @prefixedID(prefix: "srvrcpt") {
	"""The ID of the server component type."""
	id: ID!
	createdAt: Time!
	updatedAt: Time!
	"""The name of the server component type."""
	name: String!
}
"""A connection to a list of items."""
type ServerComponentTypeConnection {
	"""A list of edges."""
	edges: [ServerComponentTypeEdge]
	"""Information to aid in pagination."""
	pageInfo: PageInfo!
	"""Identifies the total count of items in the connection."""
	totalCount: Int!
}
"""Return response from serverComponentTypeCreate"""
type ServerComponentTypeCreatePayload {
	"""The created server component type."""
	serverComponentType: ServerComponentType!
}
"""Return response from serverComponentTypeDelete"""
type ServerComponentTypeDeletePayload {
	"""The ID of the deleted server component type."""
	deletedID: ID!
}
"""An edge in a connection."""
type ServerComponentTypeEdge {
	"""The item at the end of the edge."""
	node: ServerComponentType
	"""A cursor for use in pagination."""
	cursor: Cursor!
}
"""Ordering options for ServerComponentType connections"""
input ServerComponentTypeOrder {
	"""The ordering direction."""
	direction: OrderDirection! = ASC
	"""The field by which to order ServerComponentTypes."""
	field: ServerComponentTypeOrderField!
}
"""Properties by which ServerComponentType connections can be ordered."""
enum ServerComponentTypeOrderField {
	ID
	CREATED_AT
	UPDATED_AT
	NAME
}
"""Return response from serverComponentTypeUpdate"""
type ServerComponentTypeUpdatePayload {
	"""The updated server component type."""
	serverComponentType: ServerComponentType!
}
"""
ServerComponentTypeWhereInput is used for filtering ServerComponentType objects.
Input was generated by ent.
"""
input ServerComponentTypeWhereInput {
	not: ServerComponentTypeWhereInput
	and: [ServerComponentTypeWhereInput!]
	or: [ServerComponentTypeWhereInput!]
	"""id field predicates"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	"""created_at field predicates"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	"""updated_at field predicates"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	"""name field predicates"""
	name: String
	nameNEQ: String
	nameIn: [String!]
	nameNotIn: [String!]
	nameGT: String
	nameGTE: String
	nameLT: String
	nameLTE: String
	nameContains: String
	nameHasPrefix: String
	nameHasSuffix: String
	nameEqualFold: String
	nameContainsFold: String
}
"""Return response from serverComponentUpdate"""
type ServerComponentUpdatePayload {
	"""The updated server component."""
	serverComponent: ServerComponent!
}
"""
ServerComponentWhereInput is used for filtering ServerComponent objects.
Input was generated by ent.
"""
input ServerComponentWhereInput {
	not: ServerComponentWhereInput
	and: [ServerComponentWhereInput!]
	or: [ServerComponentWhereInput!]
	"""id field predicates"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	"""created_at field predicates"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	"""updated_at field predicates"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	"""name field predicates"""
	name: String
	nameNEQ: String
	nameIn: [String!]
	nameNotIn: [String!]
	nameGT: String
	nameGTE: String
	nameLT: String
	nameLTE: String
	nameContains: String
	nameHasPrefix: String
	nameHasSuffix: String
	nameEqualFold: String
	nameContainsFold: String
	"""vendor field predicates"""
	vendor: String
	vendorNEQ: String
	vendorIn: [String!]
	vendorNotIn: [String!]
	vendorGT: String
	vendorGTE: String
	vendorLT: String
	vendorLTE: String
	vendorContains: String
	vendorHasPrefix: String
	vendorHasSuffix: String
	vendorEqualFold: String
	vendorContainsFold: String
	"""model field predicates"""
	model: String
	modelNEQ: String
	modelIn: [String!]
	modelNotIn: [String!]
	modelGT: String
	modelGTE: String
	modelLT: String
	modelLTE: String
	modelContains: String
	modelHasPrefix: String
	modelHasSuffix: String
	modelEqualFold: String
	modelContainsFold: String
	"""serial field predicates"""
	serial: String
	serialNEQ: String
	serialIn: [String!]
	serialNotIn: [String!]
	serialGT: String
	serialGTE: String
	serialLT: String
	serialLTE: String
	serialContains: String
	serialHasPrefix: String
	serialHasSuffix: String
	serialEqualFold: String
	serialContainsFold: String
	"""component_type edge predicates"""
	hasComponentType: Boolean
	hasComponentTypeWith: [ServerComponentTypeWhereInput!]
	"""server edge predicates"""
	hasServer: Boolean
	hasServerWith: [ServerWhereInput!]
}
"""A connection to a list of items."""
type ServerConnection {
	"""A list of edges."""
	edges: [ServerEdge]
	"""Information to aid in pagination."""
	pageInfo: PageInfo!
	"""Identifies the total count of items in the connection."""
	totalCount: Int!
}
"""Return response from serverCreate"""
type ServerCreatePayload {
	"""The created server."""
	server: Server!
}
"""Return response from serverDelete"""
type ServerDeletePayload {
	"""The ID of the deleted server."""
	deletedID: ID!
}
"""An edge in a connection."""
type ServerEdge {
	"""The item at the end of the edge."""
	node: Server
	"""A cursor for use in pagination."""
	cursor: Cursor!
}
"""Ordering options for Server connections"""
input ServerOrder {
	"""The ordering direction."""
	direction: OrderDirection! = ASC
	"""The field by which to order Servers."""
	field: ServerOrderField!
}
"""Properties by which Server connections can be ordered."""
enum ServerOrderField {
	ID
	CREATED_AT
	UPDATED_AT
	NAME
	DESCRIPTION
	OWNER
	SERVER_TYPE
}
type ServerProvider implements Node @key(fields: "id") @prefixedID(prefix: "srvrprv") @goModel(model: "go.infratographer.com/server-api/internal/ent/generated.Provider") {
	"""The ID of the server provider."""
	id: ID!
	createdAt: Time!
	updatedAt: Time!
	"""The name of the server provider."""
	name: String!
	servers(
		"""Returns the elements in the list that come after the specified cursor."""
		after: Cursor

		"""Returns the first _n_ elements from the list."""
		first: Int

		"""Returns the elements in the list that come before the specified cursor."""
		before: Cursor

		"""Returns the last _n_ elements from the list."""
		last: Int

		"""Ordering options for Servers returned from the connection."""
		orderBy: ServerOrder

		"""Filtering options for Servers returned from the connection."""
		where: ServerWhereInput
	): ServerConnection!
}
"""A connection to a list of items."""
type ServerProviderConnection {
	"""A list of edges."""
	edges: [ServerProviderEdge]
	"""Information to aid in pagination."""
	pageInfo: PageInfo!
	"""Identifies the total count of items in the connection."""
	totalCount: Int!
}
"""Return response from serverProviderCreate"""
type ServerProviderCreatePayload {
	"""The created server provider."""
	serverProvider: ServerProvider!
}
"""Return response from serverProviderDelete"""
type ServerProviderDeletePayload {
	"""The ID of the deleted server provider."""
	deletedID: ID!
}
"""An edge in a connection."""
type ServerProviderEdge {
	"""The item at the end of the edge."""
	node: ServerProvider
	"""A cursor for use in pagination."""
	cursor: Cursor!
}
"""Ordering options for ServerProvider connections"""
input ServerProviderOrder {
	"""The ordering direction."""
	direction: OrderDirection! = ASC
	"""The field by which to order ServerProviders."""
	field: ServerProviderOrderField!
}
"""Properties by which ServerProvider connections can be ordered."""
enum ServerProviderOrderField {
	ID
	CREATED_AT
	UPDATED_AT
	NAME
	RESOURCE_PROVIDER
}
"""Return response from serverProviderUpdate"""
type ServerProviderUpdatePayload {
	"""The updated server provider."""
	serverProvider: ServerProvider!
}
"""
ServerProviderWhereInput is used for filtering Provider objects.
Input was generated by ent.
"""
input ServerProviderWhereInput {
	not: ServerProviderWhereInput
	and: [ServerProviderWhereInput!]
	or: [ServerProviderWhereInput!]
	"""id field predicates"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	"""created_at field predicates"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	"""updated_at field predicates"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	"""name field predicates"""
	name: String
	nameNEQ: String
	nameIn: [String!]
	nameNotIn: [String!]
	nameGT: String
	nameGTE: String
	nameLT: String
	nameLTE: String
	nameContains: String
	nameHasPrefix: String
	nameHasSuffix: String
	nameEqualFold: String
	nameContainsFold: String
	"""servers edge predicates"""
	hasServers: Boolean
	hasServersWith: [ServerWhereInput!]
}
type ServerType implements Node @key(fields: "id") @prefixedID(prefix: "srvrtyp") {
	"""The ID of the server type."""
	id: ID!
	createdAt: Time!
	updatedAt: Time!
	"""The name of the server type."""
	name: String!
	servers(
		"""Returns the elements in the list that come after the specified cursor."""
		after: Cursor

		"""Returns the first _n_ elements from the list."""
		first: Int

		"""Returns the elements in the list that come before the specified cursor."""
		before: Cursor

		"""Returns the last _n_ elements from the list."""
		last: Int

		"""Ordering options for Servers returned from the connection."""
		orderBy: ServerOrder

		"""Filtering options for Servers returned from the connection."""
		where: ServerWhereInput
	): ServerConnection!
}
"""A connection to a list of items."""
type ServerTypeConnection {
	"""A list of edges."""
	edges: [ServerTypeEdge]
	"""Information to aid in pagination."""
	pageInfo: PageInfo!
	"""Identifies the total count of items in the connection."""
	totalCount: Int!
}
"""Return response from serverTypeCreate"""
type ServerTypeCreatePayload {
	"""The created server type."""
	serverType: ServerType!
}
"""Return response from serverTypeDelete"""
type ServerTypeDeletePayload {
	"""The ID of the deleted server type."""
	deletedID: ID!
}
"""An edge in a connection."""
type ServerTypeEdge {
	"""The item at the end of the edge."""
	node: ServerType
	"""A cursor for use in pagination."""
	cursor: Cursor!
}
"""Ordering options for ServerType connections"""
input ServerTypeOrder {
	"""The ordering direction."""
	direction: OrderDirection! = ASC
	"""The field by which to order ServerTypes."""
	field: ServerTypeOrderField!
}
"""Properties by which ServerType connections can be ordered."""
enum ServerTypeOrderField {
	ID
	CREATED_AT
	UPDATED_AT
	NAME
	OWNER
}
"""Return response from serverTypeUpdate"""
type ServerTypeUpdatePayload {
	"""The updated server type."""
	serverType: ServerType!
}
"""
ServerTypeWhereInput is used for filtering ServerType objects.
Input was generated by ent.
"""
input ServerTypeWhereInput {
	not: ServerTypeWhereInput
	and: [ServerTypeWhereInput!]
	or: [ServerTypeWhereInput!]
	"""id field predicates"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	"""created_at field predicates"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	"""updated_at field predicates"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	"""name field predicates"""
	name: String
	nameNEQ: String
	nameIn: [String!]
	nameNotIn: [String!]
	nameGT: String
	nameGTE: String
	nameLT: String
	nameLTE: String
	nameContains: String
	nameHasPrefix: String
	nameHasSuffix: String
	nameEqualFold: String
	nameContainsFold: String
	"""servers edge predicates"""
	hasServers: Boolean
	hasServersWith: [ServerWhereInput!]
}
"""Return response from serverUpdate"""
type ServerUpdatePayload {
	"""The updated server."""
	server: Server!
}
"""
ServerWhereInput is used for filtering Server objects.
Input was generated by ent.
"""
input ServerWhereInput {
	not: ServerWhereInput
	and: [ServerWhereInput!]
	or: [ServerWhereInput!]
	"""id field predicates"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	"""created_at field predicates"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	"""updated_at field predicates"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	"""name field predicates"""
	name: String
	nameNEQ: String
	nameIn: [String!]
	nameNotIn: [String!]
	nameGT: String
	nameGTE: String
	nameLT: String
	nameLTE: String
	nameContains: String
	nameHasPrefix: String
	nameHasSuffix: String
	nameEqualFold: String
	nameContainsFold: String
	"""description field predicates"""
	description: String
	descriptionNEQ: String
	descriptionIn: [String!]
	descriptionNotIn: [String!]
	descriptionGT: String
	descriptionGTE: String
	descriptionLT: String
	descriptionLTE: String
	descriptionContains: String
	descriptionHasPrefix: String
	descriptionHasSuffix: String
	descriptionIsNil: Boolean
	descriptionNotNil: Boolean
	descriptionEqualFold: String
	descriptionContainsFold: String
	"""provider edge predicates"""
	hasProvider: Boolean
	hasProviderWith: [ServerProviderWhereInput!]
	"""server_type edge predicates"""
	hasServerType: Boolean
	hasServerTypeWith: [ServerTypeWhereInput!]
	"""components edge predicates"""
	hasComponents: Boolean
	hasComponentsWith: [ServerComponentWhereInput!]
}
"""The builtin Time type"""
scalar Time
"""Input information to update a server chassis."""
input UpdateServerChassisInput {
	"""The serial number of the server chassis."""
	serial: String
}
"""Input information to update a server chassis type."""
input UpdateServerChassisTypeInput {
	"""The name of the vendor for the server chassis type."""
	vendor: String
	"""The mode of the server chassis type."""
	model: String
	"""The height of the server chassis type."""
	height: String
	"""Whether the server chassis type is full depth."""
	isFullDepth: Boolean
}
"""Input information to update a server component."""
input UpdateServerComponentInput {
	"""The name of the server component."""
	name: String
	"""The name of the vendor of the server component."""
	vendor: String
	"""The model of the server component."""
	model: String
	"""The serial number of the server component."""
	serial: String
}
"""Input information to update a server component type."""
input UpdateServerComponentTypeInput {
	"""The name of the server component type."""
	name: String
}
"""Update an existing server."""
input UpdateServerInput {
	"""The name of the server."""
	name: String
	"""The description of the server."""
	description: String
	clearDescription: Boolean
	addComponentIDs: [ID!]
	removeComponentIDs: [ID!]
	clearComponents: Boolean
}
"""Input information to update a server provider."""
input UpdateServerProviderInput {
	"""The name of the server provider."""
	name: String
}
"""Input information to update a server type."""
input UpdateServerTypeInput {
	"""The name of the server type."""
	name: String
}
# a union of all types that use the @key directive
union _Entity = Server | ServerChassis | ServerChassisType | ServerComponent | ServerComponentType | ServerProvider | ServerType
type _Service {
	sdl: String
}
scalar _Any
scalar FieldSet
directive @requires(fields: FieldSet!) on FIELD_DEFINITION
directive @provides(fields: FieldSet!) on FIELD_DEFINITION
directive @extends on OBJECT | INTERFACE
directive @key(fields: FieldSet!, resolvable: Boolean = true) repeatable on OBJECT | INTERFACE
directive @link(import: [String!], url: String!) repeatable on SCHEMA
directive @external on FIELD_DEFINITION | OBJECT
directive @shareable on OBJECT | FIELD_DEFINITION
directive @tag(name: String!) repeatable on FIELD_DEFINITION | INTERFACE | OBJECT | UNION | ARGUMENT_DEFINITION | SCALAR | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION
directive @override(from: String!) on FIELD_DEFINITION
directive @inaccessible on SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | INTERFACE | UNION | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION
#directive @interfaceObject on OBJECT
extend schema
  @link(
	url: "https://specs.apollo.dev/federation/v2.3"
	import: [
	  "@key",
	  "@external",
	  "@shareable",
	  "@tag",
	  "@override",
	  "@inaccessible",
	  "@interfaceObject"
	  ]
  )
