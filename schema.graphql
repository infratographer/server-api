directive @prefixedID(prefix: String!) on OBJECT
"""Input information to create a server cpu."""
input CreateServerCPUInput {
	"""The serial number of the server cpu."""
	serial: String!
	serverID: ID!
	serverCPUTypeID: ID!
}
"""Input information to create a server cpu type."""
input CreateServerCPUTypeInput {
	"""The name of the vendor for the server cpu type."""
	vendor: String!
	"""The mode of the server cpu type."""
	model: String!
	"""The clock speed of the server cpu type."""
	clockSpeed: String!
	"""The number of cores for the server cpu type."""
	coreCount: Int!
	cpuIDs: [ID!]
}
"""Input information to create a server chassis."""
input CreateServerChassisInput {
	"""The ID for the parent of this chassis."""
	parentChassisID: ID!
	"""The serial number of the server chassis."""
	serial: String!
	serverID: ID!
	serverChassisTypeID: ID!
}
"""Input information to create a server chassis type."""
input CreateServerChassisTypeInput {
	"""The name of the vendor for the server chassis type."""
	vendor: String!
	"""The mode of the server chassis type."""
	model: String!
	"""The height of the server chassis type."""
	height: String!
	"""Whether the server chassis type is full depth."""
	isFullDepth: Boolean
	"""The ID for the parent of this chassis type."""
	parentChassisTypeID: ID!
	chassiIDs: [ID!]
}
"""Input information to create a server component."""
input CreateServerComponentInput {
	"""The name of the server component."""
	name: String!
	"""The name of the vendor of the server component."""
	vendor: String!
	"""The model of the server component."""
	model: String!
	"""The serial number of the server component."""
	serial: String!
	componentTypeID: ID!
	serverID: ID!
}
"""Input information to create a server component type."""
input CreateServerComponentTypeInput {
	"""The name of the server component type."""
	name: String!
}
"""Input information to create a server hard drive."""
input CreateServerHardDriveInput {
	"""The serial for the server hard drive."""
	serial: String!
	serverID: ID!
	serverHardDriveTypeID: ID!
}
"""Input information to create a server hard drive type."""
input CreateServerHardDriveTypeInput {
	"""The name of the vendor for the server hard drive type."""
	vendor: String!
	"""The mode of the server chassis type."""
	model: String!
	"""The speed of the server hard drive type."""
	speed: String!
	"""The type of the server hard drive type."""
	type: ServerHardDriveTypeType!
	"""The capacity of the server hard drive type."""
	capacity: String!
	hardDriveIDs: [ID!]
}
"""Input information to create a server."""
input CreateServerInput {
	"""The name of the server."""
	name: String!
	"""The description of the server."""
	description: String
	"""The ID for the owner for this server."""
	ownerID: ID!
	"""The ID for the location of this server."""
	locationID: ID!
	providerID: ID!
	serverTypeID: ID!
	componentIDs: [ID!]
}
"""Input information to create a server memory."""
input CreateServerMemoryInput {
	"""The serial of the server memory."""
	serial: String!
	serverID: ID!
	serverMemoryTypeID: ID!
}
"""Input information to create a server memory type."""
input CreateServerMemoryTypeInput {
	"""The name of the vendor for the server chassis type."""
	vendor: String!
	"""The mode of the server chassis type."""
	model: String!
	"""The speed of the server memory type."""
	speed: String!
	"""The size of the server memory type."""
	size: String!
	memoryIDs: [ID!]
}
"""Input information to create a server motherboard."""
input CreateServerMotherboardInput {
	"""The serial of the server motherboard"""
	serial: String!
	serverID: ID!
	serverMotherboardTypeID: ID!
}
"""Input information to create a server motherboard type."""
input CreateServerMotherboardTypeInput {
	"""The name of the vendor for the server motherboard type."""
	vendor: String!
	"""The mode of the server chassis type."""
	model: String!
	motherboardIDs: [ID!]
}
"""Input information to create a server network card type."""
input CreateServerNetworkCardInput {
	"""The serial number for the server network card."""
	serial: String!
	networkCardTypeID: ID!
	serverID: ID!
	networkPortIDs: [ID!]
}
"""Input information to create a server network card type."""
input CreateServerNetworkCardTypeInput {
	"""The name of the vendor for the server network card type."""
	vendor: String!
	"""The model of the server network card type."""
	model: String!
	"""The number of ports on the server network card type."""
	portCount: Int!
	networkCardIDs: [ID!]
}
"""Input information to create a server network card type."""
input CreateServerNetworkPortInput {
	"""The mac address for the server network port."""
	macAddress: String!
	networkCardID: ID!
}
"""Input information to create a server power supply."""
input CreateServerPowerSupplyInput {
	"""The serial of the server power supply."""
	serial: String!
	serverID: ID!
	serverPowerSupplyTypeID: ID!
}
"""Input information to create a server power supply type."""
input CreateServerPowerSupplyTypeInput {
	"""The name of the vendor for the server power supply type."""
	vendor: String!
	"""The mode of the server power supply type."""
	model: String!
	"""The watts of the server power supply type."""
	watts: String!
}
"""Input information to create a server provider."""
input CreateServerProviderInput {
	"""The name of the server provider."""
	name: String!
	"""The ID for the resource provider of this server."""
	resourceProviderID: ID!
}
"""Input information to create a server type."""
input CreateServerTypeInput {
	"""The name of the server type."""
	name: String!
	"""The ID for the owner for this server."""
	ownerID: ID!
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
interface IPAddressable {
	id: ID!
}
"""A valid JSON string."""
scalar JSON
type Location @key(fields: "id") {
	id: ID!
	scopedToOwnerID: ID!
	servers(
		"""Returns the elements in the list that come after the specified cursor."""
		after: Cursor

		"""Returns the first _n_ elements from the list."""
		first: Int

		"""Returns the elements in the list that come before the specified cursor."""
		before: Cursor

		"""Returns the last _n_ elements from the list."""
		last: Int

		"""Ordering options for Servers returned from the connection."""
		orderBy: ServerOrder

		"""Filtering options for Servers returned from the connection."""
		where: ServerWhereInput
	): ServerConnection!
}
type Mutation {
	"""Create a server chassis."""
	serverChassisCreate(input: CreateServerChassisInput!): ServerChassisCreatePayload!
	"""Update a server chassis."""
	serverChassisUpdate(id: ID!, input: UpdateServerChassisInput!): ServerChassisUpdatePayload!
	"""Delete a server chassis."""
	serverChassisDelete(id: ID!): ServerChassisDeletePayload!
	"""Create a server chassis type."""
	serverChassisTypeCreate(input: CreateServerChassisTypeInput!): ServerChassisTypeCreatePayload!
	"""Update a server chassis type."""
	serverChassisTypeUpdate(id: ID!, input: UpdateServerChassisTypeInput!): ServerChassisTypeUpdatePayload!
	"""Delete a server chassis type."""
	serverChassisTypeDelete(id: ID!): ServerChassisTypeDeletePayload!
	"""Create a server component."""
	serverComponentCreate(input: CreateServerComponentInput!): ServerComponentCreatePayload!
	"""Update a server component."""
	serverComponentUpdate(id: ID!, input: UpdateServerComponentInput!): ServerComponentUpdatePayload!
	"""Delete a server component."""
	serverComponentDelete(id: ID!): ServerComponentDeletePayload!
	"""Create a server component type."""
	serverComponentTypeCreate(input: CreateServerComponentTypeInput!): ServerComponentTypeCreatePayload!
	"""Update a server component type."""
	serverComponentTypeUpdate(id: ID!, input: UpdateServerComponentTypeInput!): ServerComponentTypeUpdatePayload!
	"""Delete a server component type."""
	serverComponentTypeDelete(id: ID!): ServerComponentTypeDeletePayload!
	"""Create a server cpu."""
	serverCPUCreate(input: CreateServerCPUInput!): ServerCPUCreatePayload!
	"""Update a server cpu."""
	serverCPUUpdate(id: ID!, input: UpdateServerCPUInput!): ServerCPUUpdatePayload!
	"""Delete a server cpu."""
	serverCPUDelete(id: ID!): ServerCPUDeletePayload!
	"""Create a server cpu type."""
	serverCPUTypeCreate(input: CreateServerCPUTypeInput!): ServerCPUTypeCreatePayload!
	"""Update a server cpu type."""
	serverCPUTypeUpdate(id: ID!, input: UpdateServerCPUTypeInput!): ServerCPUTypeUpdatePayload!
	"""Delete a server cpu type."""
	serverCPUTypeDelete(id: ID!): ServerCPUTypeDeletePayload!
	"""Create a server hard drive."""
	serverHardDriveCreate(input: CreateServerHardDriveInput!): ServerHardDriveCreatePayload!
	"""Update a server hard drive."""
	serverHardDriveUpdate(id: ID!, input: UpdateServerHardDriveInput!): ServerHardDriveUpdatePayload!
	"""Delete a server hard drive."""
	serverHardDriveDelete(id: ID!): ServerHardDriveDeletePayload!
	"""Create a server hard drive type."""
	serverHardDriveTypeCreate(input: CreateServerHardDriveTypeInput!): ServerHardDriveTypeCreatePayload!
	"""Update a server hard drive type."""
	serverHardDriveTypeUpdate(id: ID!, input: UpdateServerHardDriveTypeInput!): ServerHardDriveTypeUpdatePayload!
	"""Delete a server hard drive type."""
	serverHardDriveTypeDelete(id: ID!): ServerHardDriveTypeDeletePayload!
	"""Create a server memory."""
	serverMemoryCreate(input: CreateServerMemoryInput!): ServerMemoryCreatePayload!
	"""Update a server memory."""
	serverMemoryUpdate(id: ID!, input: UpdateServerMemoryInput!): ServerMemoryUpdatePayload!
	"""Delete a server memory."""
	serverMemoryDelete(id: ID!): ServerMemoryDeletePayload!
	"""Create a server memory type."""
	serverMemoryTypeCreate(input: CreateServerMemoryTypeInput!): ServerMemoryTypeCreatePayload!
	"""Update a server memory type."""
	serverMemoryTypeUpdate(id: ID!, input: UpdateServerMemoryTypeInput!): ServerMemoryTypeUpdatePayload!
	"""Delete a server memory type."""
	serverMemoryTypeDelete(id: ID!): ServerMemoryTypeDeletePayload!
	"""Create a server motherboard."""
	serverMotherboardCreate(input: CreateServerMotherboardInput!): ServerMotherboardCreatePayload!
	"""Update a server motherboard."""
	serverMotherboardUpdate(id: ID!, input: UpdateServerMotherboardInput!): ServerMotherboardUpdatePayload!
	"""Delete a server motherboard."""
	serverMotherboardDelete(id: ID!): ServerMotherboardDeletePayload!
	"""Create a server motherboard type."""
	serverMotherboardTypeCreate(input: CreateServerMotherboardTypeInput!): ServerMotherboardTypeCreatePayload!
	"""Update a server motherboard type."""
	serverMotherboardTypeUpdate(id: ID!, input: UpdateServerMotherboardTypeInput!): ServerMotherboardTypeUpdatePayload!
	"""Delete a server motherboard type."""
	serverMotherboardTypeDelete(id: ID!): ServerMotherboardTypeDeletePayload!
	"""Create a server network card."""
	serverNetworkCard(input: CreateServerNetworkCardInput!): ServerNetworkCardCreatePayload!
	"""Update a server network card."""
	serverNetworkCardUpdate(id: ID!, input: UpdateServerNetworkCardInput!): ServerNetworkCardUpdatePayload!
	"""Delete a server network card."""
	serverNetworkCardDelete(id: ID!): ServerNetworkCardDeletePayload!
	"""Create a server network card type."""
	serverNetworkCardTypeCreate(input: CreateServerNetworkCardTypeInput!): ServerNetworkCardTypeCreatePayload!
	"""Update a server network card type."""
	serverNetworkCardTypeUpdate(id: ID!, input: UpdateServerNetworkCardTypeInput!): ServerNetworkCardTypeUpdatePayload!
	"""Delete a server network card type."""
	serverNetworkCardTypeDelete(id: ID!): ServerNetworkCardTypeDeletePayload!
	"""Create a server network port."""
	serverNetworkPort(input: CreateServerNetworkPortInput!): ServerNetworkPortCreatePayload!
	"""Update a server network port."""
	serverNetworkPortUpdate(id: ID!, input: UpdateServerNetworkPortInput!): ServerNetworkPortUpdatePayload!
	"""Delete a server network port."""
	serverNetworkPortDelete(id: ID!): ServerNetworkPortDeletePayload!
	"""Create a server power supply."""
	serverPowerSupply(input: CreateServerPowerSupplyInput!): ServerPowerSupplyCreatePayload!
	"""Update a server power supply."""
	serverPowerSupplyUpdate(id: ID!, input: UpdateServerPowerSupplyInput!): ServerPowerSupplyUpdatePayload!
	"""Delete a server power supply."""
	serverPowerSupplyDelete(id: ID!): ServerPowerSupplyDeletePayload!
	"""Create a server power supply type."""
	serverPowerSupplyType(input: CreateServerPowerSupplyTypeInput!): ServerPowerSupplyTypeCreatePayload!
	"""Update a server power supply type."""
	serverPowerSupplyTypeUpdate(id: ID!, input: UpdateServerPowerSupplyTypeInput!): ServerPowerSupplyTypeUpdatePayload!
	"""Delete a server power supply type."""
	serverPowerSupplyTypeDelete(id: ID!): ServerPowerSupplyTypeDeletePayload!
	"""Create a server provider."""
	serverProviderCreate(input: CreateServerProviderInput!): ServerProviderCreatePayload!
	"""Update a server provider."""
	serverProviderUpdate(id: ID!, input: UpdateServerProviderInput!): ServerProviderUpdatePayload!
	"""Delete a server provider."""
	serverProviderDelete(id: ID!): ServerProviderDeletePayload!
	"""Create a server."""
	serverCreate(input: CreateServerInput!): ServerCreatePayload!
	"""Update a server."""
	serverUpdate(id: ID!, input: UpdateServerInput!): ServerUpdatePayload!
	"""Delete a server."""
	serverDelete(id: ID!): ServerDeletePayload!
	"""Create a server type."""
	serverTypeCreate(input: CreateServerTypeInput!): ServerTypeCreatePayload!
	"""Update a server type."""
	serverTypeUpdate(id: ID!, input: UpdateServerTypeInput!): ServerTypeUpdatePayload!
	"""Delete a server type."""
	serverTypeDelete(id: ID!): ServerTypeDeletePayload!
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node {
	"""The id of the object."""
	id: ID!
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
	"""Specifies an ascending order for a given `orderBy` argument."""
	ASC
	"""Specifies a descending order for a given `orderBy` argument."""
	DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo @shareable {
	"""When paginating forwards, are there more items?"""
	hasNextPage: Boolean!
	"""When paginating backwards, are there more items?"""
	hasPreviousPage: Boolean!
	"""When paginating backwards, the cursor to continue."""
	startCursor: Cursor
	"""When paginating forwards, the cursor to continue."""
	endCursor: Cursor
}
type Query {
	"""Lookup a serverChassis by ID."""
	serverChassis(
		"""The server chassis ID."""
		id: ID!
	): ServerChassis!
	"""Lookup a serverChassisType by ID."""
	serverChassisType(
		"""The server chassis type ID."""
		id: ID!
	): ServerChassisType!
	"""Lookup a serverComponent by ID."""
	serverComponent(
		"""The server component ID."""
		id: ID!
	): ServerComponent!
	"""Lookup a serverComponentType by ID."""
	serverComponentType(
		"""The server component type ID."""
		id: ID!
	): ServerComponentType!
	"""Lookup a serverCPU by ID."""
	serverCPU(
		"""The server cpu ID."""
		id: ID!
	): ServerCPU!
	"""Lookup a serverCPUType by ID."""
	serverCPUType(
		"""The server cpu type ID."""
		id: ID!
	): ServerCPUType!
	"""Lookup a serverHardDrive by ID."""
	serverHardDrive(
		"""The server hard drive ID."""
		id: ID!
	): ServerHardDrive!
	"""Lookup a serverHardDriveType by ID."""
	serverHardDriveType(
		"""The server hard drive type ID."""
		id: ID!
	): ServerHardDriveType!
	"""Lookup a serverMemory by ID."""
	serverMemory(
		"""The server memory ID."""
		id: ID!
	): ServerMemory!
	"""Lookup a serverMemoryType by ID."""
	serverMemoryType(
		"""The server memory type ID."""
		id: ID!
	): ServerMemoryType!
	"""Lookup a serverMotherboard by ID."""
	serverMotherboard(
		"""The server motherboard ID."""
		id: ID!
	): ServerMotherboard!
	"""Lookup a serverMotherboardType by ID."""
	serverMotherboardType(
		"""The server motherboard type ID."""
		id: ID!
	): ServerMotherboardType!
	"""Lookup a serverNetworkCard by ID."""
	serverNetworkCard(
		"""The server network card ID."""
		id: ID!
	): ServerNetworkCard!
	"""Lookup a serverNetworkCardType by ID."""
	serverNetworkCardType(
		"""The server network card type ID."""
		id: ID!
	): ServerNetworkCardType!
	"""Lookup a serverNetworkPort by ID."""
	serverNetworkPort(
		"""The server network port ID."""
		id: ID!
	): ServerNetworkPort!
	"""Lookup a serverPowerSupply by ID."""
	serverPowerSupply(
		"""The server power supply ID."""
		id: ID!
	): ServerPowerSupply!
	"""Lookup a serverPowerSupplyType by ID."""
	serverPowerSupplyType(
		"""The server power supply type ID."""
		id: ID!
	): ServerPowerSupplyType!
	"""Lookup a server provider by ID."""
	serverProvider(
		"""The server provider ID."""
		id: ID!
	): ServerProvider!
	"""Lookup a server by ID."""
	server(
		"""The server ID."""
		id: ID!
	): Server!
	"""Lookup a serverType by ID."""
	serverType(
		"""The server type ID."""
		id: ID!
	): ServerType!
	_entities(representations: [_Any!]!): [_Entity]!
	_service: _Service!
}
type ResourceOwner @interfaceObject @key(fields: "id") {
	id: ID!
	servers(
		"""Returns the elements in the list that come after the specified cursor."""
		after: Cursor

		"""Returns the first _n_ elements from the list."""
		first: Int

		"""Returns the elements in the list that come before the specified cursor."""
		before: Cursor

		"""Returns the last _n_ elements from the list."""
		last: Int

		"""Ordering options for Servers returned from the connection."""
		orderBy: ServerOrder

		"""Filtering options for Servers returned from the connection."""
		where: ServerWhereInput
	): ServerConnection!
}
type Server implements Node & IPAddressable @key(fields: "id") @prefixedID(prefix: "srvrsrv") {
	"""The ID for the server."""
	id: ID!
	createdAt: Time!
	updatedAt: Time!
	"""The name of the server."""
	name: String!
	"""The description of the server."""
	description: String
	"""The server provider for the server."""
	serverProvider: ServerProvider!
	"""The server type for the server."""
	serverType: ServerType!
	components(
		"""Returns the elements in the list that come after the specified cursor."""
		after: Cursor

		"""Returns the first _n_ elements from the list."""
		first: Int

		"""Returns the elements in the list that come before the specified cursor."""
		before: Cursor

		"""Returns the last _n_ elements from the list."""
		last: Int

		"""Ordering options for ServerComponents returned from the connection."""
		orderBy: ServerComponentOrder

		"""Filtering options for ServerComponents returned from the connection."""
		where: ServerComponentWhereInput
	): ServerComponentConnection!
	"""The location of the server."""
	location: Location!
	"""The owner of the server."""
	owner: ResourceOwner!
}
type ServerCPU implements Node @key(fields: "id") @prefixedID(prefix: "srvrcpu") {
	"""The ID of the server cpu."""
	id: ID!
	createdAt: Time!
	updatedAt: Time!
	"""The serial number of the server cpu."""
	serial: String!
	server: Server!
	serverCPUType: ServerCPUType!
}
"""A connection to a list of items."""
type ServerCPUConnection {
	"""A list of edges."""
	edges: [ServerCPUEdge]
	"""Information to aid in pagination."""
	pageInfo: PageInfo!
	"""Identifies the total count of items in the connection."""
	totalCount: Int!
}
"""Return response from serverCPUCreate"""
type ServerCPUCreatePayload {
	"""The created server cpu."""
	serverCPU: ServerCPU!
}
"""Return response from serverCPUDelete"""
type ServerCPUDeletePayload {
	"""The ID of the deleted server cpu."""
	deletedID: ID!
}
"""An edge in a connection."""
type ServerCPUEdge {
	"""The item at the end of the edge."""
	node: ServerCPU
	"""A cursor for use in pagination."""
	cursor: Cursor!
}
"""Ordering options for ServerCPU connections"""
input ServerCPUOrder {
	"""The ordering direction."""
	direction: OrderDirection! = ASC
	"""The field by which to order ServerCPUs."""
	field: ServerCPUOrderField!
}
"""Properties by which ServerCPU connections can be ordered."""
enum ServerCPUOrderField {
	ID
	CREATED_AT
	UPDATED_AT
	SERVER_CPU_TYPE
	SERVER
}
type ServerCPUType implements Node @key(fields: "id") @prefixedID(prefix: "srvrcpt") {
	"""The ID of the server cpu type."""
	id: ID!
	createdAt: Time!
	updatedAt: Time!
	"""The name of the vendor for the server cpu type."""
	vendor: String!
	"""The mode of the server cpu type."""
	model: String!
	"""The clock speed of the server cpu type."""
	clockSpeed: String!
	"""The number of cores for the server cpu type."""
	coreCount: Int!
	cpu(
		"""Returns the elements in the list that come after the specified cursor."""
		after: Cursor

		"""Returns the first _n_ elements from the list."""
		first: Int

		"""Returns the elements in the list that come before the specified cursor."""
		before: Cursor

		"""Returns the last _n_ elements from the list."""
		last: Int

		"""Ordering options for ServerCPUs returned from the connection."""
		orderBy: ServerCPUOrder

		"""Filtering options for ServerCPUs returned from the connection."""
		where: ServerCPUWhereInput
	): ServerCPUConnection!
}
"""A connection to a list of items."""
type ServerCPUTypeConnection {
	"""A list of edges."""
	edges: [ServerCPUTypeEdge]
	"""Information to aid in pagination."""
	pageInfo: PageInfo!
	"""Identifies the total count of items in the connection."""
	totalCount: Int!
}
"""Return response from serverCPUTypeCreate"""
type ServerCPUTypeCreatePayload {
	"""The created server cpu type."""
	serverCPUType: ServerCPUType!
}
"""Return response from serverCPUTypeDelete"""
type ServerCPUTypeDeletePayload {
	"""The ID of the deleted server cpu type."""
	deletedID: ID!
}
"""An edge in a connection."""
type ServerCPUTypeEdge {
	"""The item at the end of the edge."""
	node: ServerCPUType
	"""A cursor for use in pagination."""
	cursor: Cursor!
}
"""Ordering options for ServerCPUType connections"""
input ServerCPUTypeOrder {
	"""The ordering direction."""
	direction: OrderDirection! = ASC
	"""The field by which to order ServerCPUTypes."""
	field: ServerCPUTypeOrderField!
}
"""Properties by which ServerCPUType connections can be ordered."""
enum ServerCPUTypeOrderField {
	ID
	CREATED_AT
	UPDATED_AT
	NAME
}
"""Return response from serverCPUTypeUpdate"""
type ServerCPUTypeUpdatePayload {
	"""The updated server cpu type."""
	serverCPUType: ServerCPUType!
}
"""
ServerCPUTypeWhereInput is used for filtering ServerCPUType objects.
Input was generated by ent.
"""
input ServerCPUTypeWhereInput {
	not: ServerCPUTypeWhereInput
	and: [ServerCPUTypeWhereInput!]
	or: [ServerCPUTypeWhereInput!]
	"""id field predicates"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	"""created_at field predicates"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	"""updated_at field predicates"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	"""vendor field predicates"""
	vendor: String
	vendorNEQ: String
	vendorIn: [String!]
	vendorNotIn: [String!]
	vendorGT: String
	vendorGTE: String
	vendorLT: String
	vendorLTE: String
	vendorContains: String
	vendorHasPrefix: String
	vendorHasSuffix: String
	vendorEqualFold: String
	vendorContainsFold: String
	"""model field predicates"""
	model: String
	modelNEQ: String
	modelIn: [String!]
	modelNotIn: [String!]
	modelGT: String
	modelGTE: String
	modelLT: String
	modelLTE: String
	modelContains: String
	modelHasPrefix: String
	modelHasSuffix: String
	modelEqualFold: String
	modelContainsFold: String
	"""clock_speed field predicates"""
	clockSpeed: String
	clockSpeedNEQ: String
	clockSpeedIn: [String!]
	clockSpeedNotIn: [String!]
	clockSpeedGT: String
	clockSpeedGTE: String
	clockSpeedLT: String
	clockSpeedLTE: String
	clockSpeedContains: String
	clockSpeedHasPrefix: String
	clockSpeedHasSuffix: String
	clockSpeedEqualFold: String
	clockSpeedContainsFold: String
	"""core_count field predicates"""
	coreCount: Int
	coreCountNEQ: Int
	coreCountIn: [Int!]
	coreCountNotIn: [Int!]
	coreCountGT: Int
	coreCountGTE: Int
	coreCountLT: Int
	coreCountLTE: Int
	"""cpu edge predicates"""
	hasCPU: Boolean
	hasCPUWith: [ServerCPUWhereInput!]
}
"""Return response from serverCPUUpdate"""
type ServerCPUUpdatePayload {
	"""The updated server cpu."""
	serverCPU: ServerCPU!
}
"""
ServerCPUWhereInput is used for filtering ServerCPU objects.
Input was generated by ent.
"""
input ServerCPUWhereInput {
	not: ServerCPUWhereInput
	and: [ServerCPUWhereInput!]
	or: [ServerCPUWhereInput!]
	"""id field predicates"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	"""created_at field predicates"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	"""updated_at field predicates"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	"""serial field predicates"""
	serial: String
	serialNEQ: String
	serialIn: [String!]
	serialNotIn: [String!]
	serialGT: String
	serialGTE: String
	serialLT: String
	serialLTE: String
	serialContains: String
	serialHasPrefix: String
	serialHasSuffix: String
	serialEqualFold: String
	serialContainsFold: String
	"""server edge predicates"""
	hasServer: Boolean
	hasServerWith: [ServerWhereInput!]
	"""server_cpu_type edge predicates"""
	hasServerCPUType: Boolean
	hasServerCPUTypeWith: [ServerCPUTypeWhereInput!]
}
type ServerChassis implements Node @key(fields: "id") @prefixedID(prefix: "srvrsch") {
	"""The ID of the server chassis."""
	id: ID!
	createdAt: Time!
	updatedAt: Time!
	"""The serial number of the server chassis."""
	serial: String!
	server: Server!
	serverChassisType: ServerChassisType!
}
"""A connection to a list of items."""
type ServerChassisConnection {
	"""A list of edges."""
	edges: [ServerChassisEdge]
	"""Information to aid in pagination."""
	pageInfo: PageInfo!
	"""Identifies the total count of items in the connection."""
	totalCount: Int!
}
"""Return response from serverChassisCreate"""
type ServerChassisCreatePayload {
	"""The created server chassis."""
	serverChassis: ServerChassis!
}
"""Return response from serverChassisDelete"""
type ServerChassisDeletePayload {
	"""The ID of the deleted server chassis."""
	deletedID: ID!
}
"""An edge in a connection."""
type ServerChassisEdge {
	"""The item at the end of the edge."""
	node: ServerChassis
	"""A cursor for use in pagination."""
	cursor: Cursor!
}
"""Ordering options for ServerChassis connections"""
input ServerChassisOrder {
	"""The ordering direction."""
	direction: OrderDirection! = ASC
	"""The field by which to order ServerChasses."""
	field: ServerChassisOrderField!
}
"""Properties by which ServerChassis connections can be ordered."""
enum ServerChassisOrderField {
	ID
	CREATED_AT
	UPDATED_AT
	SERVER_CHASSIS_TYPE
	PARENT_CHASSIS
	SERVER
}
type ServerChassisType implements Node @key(fields: "id") @prefixedID(prefix: "srvrsct") {
	"""The ID of the server chassis type."""
	id: ID!
	createdAt: Time!
	updatedAt: Time!
	"""The name of the vendor for the server chassis type."""
	vendor: String!
	"""The mode of the server chassis type."""
	model: String!
	"""The height of the server chassis type."""
	height: String!
	"""Whether the server chassis type is full depth."""
	isFullDepth: Boolean!
	chassis(
		"""Returns the elements in the list that come after the specified cursor."""
		after: Cursor

		"""Returns the first _n_ elements from the list."""
		first: Int

		"""Returns the elements in the list that come before the specified cursor."""
		before: Cursor

		"""Returns the last _n_ elements from the list."""
		last: Int

		"""Ordering options for ServerChasses returned from the connection."""
		orderBy: ServerChassisOrder

		"""Filtering options for ServerChasses returned from the connection."""
		where: ServerChassisWhereInput
	): ServerChassisConnection!
}
"""A connection to a list of items."""
type ServerChassisTypeConnection {
	"""A list of edges."""
	edges: [ServerChassisTypeEdge]
	"""Information to aid in pagination."""
	pageInfo: PageInfo!
	"""Identifies the total count of items in the connection."""
	totalCount: Int!
}
"""Return response from serverChassisTypeCreate"""
type ServerChassisTypeCreatePayload {
	"""The created server chassis type."""
	serverChassisType: ServerChassisType!
}
"""Return response from serverChassisTypeDelete"""
type ServerChassisTypeDeletePayload {
	"""The ID of the deleted server chassis type."""
	deletedID: ID!
}
"""An edge in a connection."""
type ServerChassisTypeEdge {
	"""The item at the end of the edge."""
	node: ServerChassisType
	"""A cursor for use in pagination."""
	cursor: Cursor!
}
"""Ordering options for ServerChassisType connections"""
input ServerChassisTypeOrder {
	"""The ordering direction."""
	direction: OrderDirection! = ASC
	"""The field by which to order ServerChassisTypes."""
	field: ServerChassisTypeOrderField!
}
"""Properties by which ServerChassisType connections can be ordered."""
enum ServerChassisTypeOrderField {
	ID
	CREATED_AT
	UPDATED_AT
	NAME
	PARENT_CHASSIS_TYPE
}
"""Return response from serverChassisTypeUpdate"""
type ServerChassisTypeUpdatePayload {
	"""The updated server chassis type."""
	serverChassisType: ServerChassisType!
}
"""
ServerChassisTypeWhereInput is used for filtering ServerChassisType objects.
Input was generated by ent.
"""
input ServerChassisTypeWhereInput {
	not: ServerChassisTypeWhereInput
	and: [ServerChassisTypeWhereInput!]
	or: [ServerChassisTypeWhereInput!]
	"""id field predicates"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	"""created_at field predicates"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	"""updated_at field predicates"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	"""vendor field predicates"""
	vendor: String
	vendorNEQ: String
	vendorIn: [String!]
	vendorNotIn: [String!]
	vendorGT: String
	vendorGTE: String
	vendorLT: String
	vendorLTE: String
	vendorContains: String
	vendorHasPrefix: String
	vendorHasSuffix: String
	vendorEqualFold: String
	vendorContainsFold: String
	"""model field predicates"""
	model: String
	modelNEQ: String
	modelIn: [String!]
	modelNotIn: [String!]
	modelGT: String
	modelGTE: String
	modelLT: String
	modelLTE: String
	modelContains: String
	modelHasPrefix: String
	modelHasSuffix: String
	modelEqualFold: String
	modelContainsFold: String
	"""height field predicates"""
	height: String
	heightNEQ: String
	heightIn: [String!]
	heightNotIn: [String!]
	heightGT: String
	heightGTE: String
	heightLT: String
	heightLTE: String
	heightContains: String
	heightHasPrefix: String
	heightHasSuffix: String
	heightEqualFold: String
	heightContainsFold: String
	"""is_full_depth field predicates"""
	isFullDepth: Boolean
	isFullDepthNEQ: Boolean
	"""chassis edge predicates"""
	hasChassis: Boolean
	hasChassisWith: [ServerChassisWhereInput!]
}
"""Return response from serverChassisUpdate"""
type ServerChassisUpdatePayload {
	"""The updated server chassis."""
	serverChassis: ServerChassis!
}
"""
ServerChassisWhereInput is used for filtering ServerChassis objects.
Input was generated by ent.
"""
input ServerChassisWhereInput {
	not: ServerChassisWhereInput
	and: [ServerChassisWhereInput!]
	or: [ServerChassisWhereInput!]
	"""id field predicates"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	"""created_at field predicates"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	"""updated_at field predicates"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	"""serial field predicates"""
	serial: String
	serialNEQ: String
	serialIn: [String!]
	serialNotIn: [String!]
	serialGT: String
	serialGTE: String
	serialLT: String
	serialLTE: String
	serialContains: String
	serialHasPrefix: String
	serialHasSuffix: String
	serialEqualFold: String
	serialContainsFold: String
	"""server edge predicates"""
	hasServer: Boolean
	hasServerWith: [ServerWhereInput!]
	"""server_chassis_type edge predicates"""
	hasServerChassisType: Boolean
	hasServerChassisTypeWith: [ServerChassisTypeWhereInput!]
}
type ServerComponent implements Node @key(fields: "id") @prefixedID(prefix: "srvrcmp") {
	"""The ID of the server component."""
	id: ID!
	createdAt: Time!
	updatedAt: Time!
	"""The name of the server component."""
	name: String!
	"""The name of the vendor of the server component."""
	vendor: String!
	"""The model of the server component."""
	model: String!
	"""The serial number of the server component."""
	serial: String!
	"""The server component type for the server component."""
	serverComponentType: ServerComponentType!
	server: Server!
}
"""A connection to a list of items."""
type ServerComponentConnection {
	"""A list of edges."""
	edges: [ServerComponentEdge]
	"""Information to aid in pagination."""
	pageInfo: PageInfo!
	"""Identifies the total count of items in the connection."""
	totalCount: Int!
}
"""Return response from serverComponentCreate"""
type ServerComponentCreatePayload {
	"""The created server component."""
	serverComponent: ServerComponent!
}
"""Return response from serverComponentDelete"""
type ServerComponentDeletePayload {
	"""The ID of the deleted server component."""
	deletedID: ID!
}
"""An edge in a connection."""
type ServerComponentEdge {
	"""The item at the end of the edge."""
	node: ServerComponent
	"""A cursor for use in pagination."""
	cursor: Cursor!
}
"""Ordering options for ServerComponent connections"""
input ServerComponentOrder {
	"""The ordering direction."""
	direction: OrderDirection! = ASC
	"""The field by which to order ServerComponents."""
	field: ServerComponentOrderField!
}
"""Properties by which ServerComponent connections can be ordered."""
enum ServerComponentOrderField {
	ID
	CREATED_AT
	UPDATED_AT
	NAME
	VENDOR
	MODEL
	SERIAL
}
type ServerComponentType implements Node @key(fields: "id") @prefixedID(prefix: "srvrcpt") {
	"""The ID of the server component type."""
	id: ID!
	createdAt: Time!
	updatedAt: Time!
	"""The name of the server component type."""
	name: String!
}
"""A connection to a list of items."""
type ServerComponentTypeConnection {
	"""A list of edges."""
	edges: [ServerComponentTypeEdge]
	"""Information to aid in pagination."""
	pageInfo: PageInfo!
	"""Identifies the total count of items in the connection."""
	totalCount: Int!
}
"""Return response from serverComponentTypeCreate"""
type ServerComponentTypeCreatePayload {
	"""The created server component type."""
	serverComponentType: ServerComponentType!
}
"""Return response from serverComponentTypeDelete"""
type ServerComponentTypeDeletePayload {
	"""The ID of the deleted server component type."""
	deletedID: ID!
}
"""An edge in a connection."""
type ServerComponentTypeEdge {
	"""The item at the end of the edge."""
	node: ServerComponentType
	"""A cursor for use in pagination."""
	cursor: Cursor!
}
"""Ordering options for ServerComponentType connections"""
input ServerComponentTypeOrder {
	"""The ordering direction."""
	direction: OrderDirection! = ASC
	"""The field by which to order ServerComponentTypes."""
	field: ServerComponentTypeOrderField!
}
"""Properties by which ServerComponentType connections can be ordered."""
enum ServerComponentTypeOrderField {
	ID
	CREATED_AT
	UPDATED_AT
	NAME
}
"""Return response from serverComponentTypeUpdate"""
type ServerComponentTypeUpdatePayload {
	"""The updated server component type."""
	serverComponentType: ServerComponentType!
}
"""
ServerComponentTypeWhereInput is used for filtering ServerComponentType objects.
Input was generated by ent.
"""
input ServerComponentTypeWhereInput {
	not: ServerComponentTypeWhereInput
	and: [ServerComponentTypeWhereInput!]
	or: [ServerComponentTypeWhereInput!]
	"""id field predicates"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	"""created_at field predicates"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	"""updated_at field predicates"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	"""name field predicates"""
	name: String
	nameNEQ: String
	nameIn: [String!]
	nameNotIn: [String!]
	nameGT: String
	nameGTE: String
	nameLT: String
	nameLTE: String
	nameContains: String
	nameHasPrefix: String
	nameHasSuffix: String
	nameEqualFold: String
	nameContainsFold: String
}
"""Return response from serverComponentUpdate"""
type ServerComponentUpdatePayload {
	"""The updated server component."""
	serverComponent: ServerComponent!
}
"""
ServerComponentWhereInput is used for filtering ServerComponent objects.
Input was generated by ent.
"""
input ServerComponentWhereInput {
	not: ServerComponentWhereInput
	and: [ServerComponentWhereInput!]
	or: [ServerComponentWhereInput!]
	"""id field predicates"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	"""created_at field predicates"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	"""updated_at field predicates"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	"""name field predicates"""
	name: String
	nameNEQ: String
	nameIn: [String!]
	nameNotIn: [String!]
	nameGT: String
	nameGTE: String
	nameLT: String
	nameLTE: String
	nameContains: String
	nameHasPrefix: String
	nameHasSuffix: String
	nameEqualFold: String
	nameContainsFold: String
	"""vendor field predicates"""
	vendor: String
	vendorNEQ: String
	vendorIn: [String!]
	vendorNotIn: [String!]
	vendorGT: String
	vendorGTE: String
	vendorLT: String
	vendorLTE: String
	vendorContains: String
	vendorHasPrefix: String
	vendorHasSuffix: String
	vendorEqualFold: String
	vendorContainsFold: String
	"""model field predicates"""
	model: String
	modelNEQ: String
	modelIn: [String!]
	modelNotIn: [String!]
	modelGT: String
	modelGTE: String
	modelLT: String
	modelLTE: String
	modelContains: String
	modelHasPrefix: String
	modelHasSuffix: String
	modelEqualFold: String
	modelContainsFold: String
	"""serial field predicates"""
	serial: String
	serialNEQ: String
	serialIn: [String!]
	serialNotIn: [String!]
	serialGT: String
	serialGTE: String
	serialLT: String
	serialLTE: String
	serialContains: String
	serialHasPrefix: String
	serialHasSuffix: String
	serialEqualFold: String
	serialContainsFold: String
	"""component_type edge predicates"""
	hasComponentType: Boolean
	hasComponentTypeWith: [ServerComponentTypeWhereInput!]
	"""server edge predicates"""
	hasServer: Boolean
	hasServerWith: [ServerWhereInput!]
}
"""A connection to a list of items."""
type ServerConnection {
	"""A list of edges."""
	edges: [ServerEdge]
	"""Information to aid in pagination."""
	pageInfo: PageInfo!
	"""Identifies the total count of items in the connection."""
	totalCount: Int!
}
"""Return response from serverCreate"""
type ServerCreatePayload {
	"""The created server."""
	server: Server!
}
"""Return response from serverDelete"""
type ServerDeletePayload {
	"""The ID of the deleted server."""
	deletedID: ID!
}
"""An edge in a connection."""
type ServerEdge {
	"""The item at the end of the edge."""
	node: Server
	"""A cursor for use in pagination."""
	cursor: Cursor!
}
type ServerHardDrive implements Node @key(fields: "id") @prefixedID(prefix: "srvrshd") {
	"""The ID of the server hard drive type."""
	id: ID!
	createdAt: Time!
	updatedAt: Time!
	"""The serial for the server hard drive."""
	serial: String!
	server: Server!
	serverHardDriveType: ServerHardDriveType!
}
"""A connection to a list of items."""
type ServerHardDriveConnection {
	"""A list of edges."""
	edges: [ServerHardDriveEdge]
	"""Information to aid in pagination."""
	pageInfo: PageInfo!
	"""Identifies the total count of items in the connection."""
	totalCount: Int!
}
"""Return response from serverHardDriveCreate"""
type ServerHardDriveCreatePayload {
	"""The created server hard drive."""
	serverHardDrive: ServerHardDrive!
}
"""Return response from serverHardDriveDelete"""
type ServerHardDriveDeletePayload {
	"""The ID of the deleted server hard drive."""
	deletedID: ID!
}
"""An edge in a connection."""
type ServerHardDriveEdge {
	"""The item at the end of the edge."""
	node: ServerHardDrive
	"""A cursor for use in pagination."""
	cursor: Cursor!
}
"""Ordering options for ServerHardDrive connections"""
input ServerHardDriveOrder {
	"""The ordering direction."""
	direction: OrderDirection! = ASC
	"""The field by which to order ServerHardDrives."""
	field: ServerHardDriveOrderField!
}
"""Properties by which ServerHardDrive connections can be ordered."""
enum ServerHardDriveOrderField {
	ID
	CREATED_AT
	UPDATED_AT
	NAME
	SERVER
	SERVER_HARD_DRIVE_TYPE
}
type ServerHardDriveType implements Node @key(fields: "id") @prefixedID(prefix: "srvrhdt") {
	"""The ID of the server hard drive type."""
	id: ID!
	createdAt: Time!
	updatedAt: Time!
	"""The name of the vendor for the server hard drive type."""
	vendor: String!
	"""The mode of the server chassis type."""
	model: String!
	"""The speed of the server hard drive type."""
	speed: String!
	"""The type of the server hard drive type."""
	type: ServerHardDriveTypeType!
	"""The capacity of the server hard drive type."""
	capacity: String!
	hardDrive(
		"""Returns the elements in the list that come after the specified cursor."""
		after: Cursor

		"""Returns the first _n_ elements from the list."""
		first: Int

		"""Returns the elements in the list that come before the specified cursor."""
		before: Cursor

		"""Returns the last _n_ elements from the list."""
		last: Int

		"""Ordering options for ServerHardDrives returned from the connection."""
		orderBy: ServerHardDriveOrder

		"""Filtering options for ServerHardDrives returned from the connection."""
		where: ServerHardDriveWhereInput
	): ServerHardDriveConnection!
}
"""A connection to a list of items."""
type ServerHardDriveTypeConnection {
	"""A list of edges."""
	edges: [ServerHardDriveTypeEdge]
	"""Information to aid in pagination."""
	pageInfo: PageInfo!
	"""Identifies the total count of items in the connection."""
	totalCount: Int!
}
"""Return response from serverHardDriveTypeCreate"""
type ServerHardDriveTypeCreatePayload {
	"""The created server hard drive type."""
	serverHardDriveType: ServerHardDriveType!
}
"""Return response from serverHardDriveTypeDelete"""
type ServerHardDriveTypeDeletePayload {
	"""The ID of the deleted server hard drive type."""
	deletedID: ID!
}
"""An edge in a connection."""
type ServerHardDriveTypeEdge {
	"""The item at the end of the edge."""
	node: ServerHardDriveType
	"""A cursor for use in pagination."""
	cursor: Cursor!
}
"""Ordering options for ServerHardDriveType connections"""
input ServerHardDriveTypeOrder {
	"""The ordering direction."""
	direction: OrderDirection! = ASC
	"""The field by which to order ServerHardDriveTypes."""
	field: ServerHardDriveTypeOrderField!
}
"""Properties by which ServerHardDriveType connections can be ordered."""
enum ServerHardDriveTypeOrderField {
	ID
	CREATED_AT
	UPDATED_AT
	NAME
}
"""ServerHardDriveTypeType is enum for the field type"""
enum ServerHardDriveTypeType {
	ssd
	hdd
}
"""Return response from serverHardDriveTypeUpdate"""
type ServerHardDriveTypeUpdatePayload {
	"""The updated server hard drive type."""
	serverHardDriveType: ServerHardDriveType!
}
"""
ServerHardDriveTypeWhereInput is used for filtering ServerHardDriveType objects.
Input was generated by ent.
"""
input ServerHardDriveTypeWhereInput {
	not: ServerHardDriveTypeWhereInput
	and: [ServerHardDriveTypeWhereInput!]
	or: [ServerHardDriveTypeWhereInput!]
	"""id field predicates"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	"""created_at field predicates"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	"""updated_at field predicates"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	"""vendor field predicates"""
	vendor: String
	vendorNEQ: String
	vendorIn: [String!]
	vendorNotIn: [String!]
	vendorGT: String
	vendorGTE: String
	vendorLT: String
	vendorLTE: String
	vendorContains: String
	vendorHasPrefix: String
	vendorHasSuffix: String
	vendorEqualFold: String
	vendorContainsFold: String
	"""model field predicates"""
	model: String
	modelNEQ: String
	modelIn: [String!]
	modelNotIn: [String!]
	modelGT: String
	modelGTE: String
	modelLT: String
	modelLTE: String
	modelContains: String
	modelHasPrefix: String
	modelHasSuffix: String
	modelEqualFold: String
	modelContainsFold: String
	"""speed field predicates"""
	speed: String
	speedNEQ: String
	speedIn: [String!]
	speedNotIn: [String!]
	speedGT: String
	speedGTE: String
	speedLT: String
	speedLTE: String
	speedContains: String
	speedHasPrefix: String
	speedHasSuffix: String
	speedEqualFold: String
	speedContainsFold: String
	"""type field predicates"""
	type: ServerHardDriveTypeType
	typeNEQ: ServerHardDriveTypeType
	typeIn: [ServerHardDriveTypeType!]
	typeNotIn: [ServerHardDriveTypeType!]
	"""capacity field predicates"""
	capacity: String
	capacityNEQ: String
	capacityIn: [String!]
	capacityNotIn: [String!]
	capacityGT: String
	capacityGTE: String
	capacityLT: String
	capacityLTE: String
	capacityContains: String
	capacityHasPrefix: String
	capacityHasSuffix: String
	capacityEqualFold: String
	capacityContainsFold: String
	"""hard_drive edge predicates"""
	hasHardDrive: Boolean
	hasHardDriveWith: [ServerHardDriveWhereInput!]
}
"""Return response from serverHardDriveUpdate"""
type ServerHardDriveUpdatePayload {
	"""The updated server hard drive."""
	serverHardDrive: ServerHardDrive!
}
"""
ServerHardDriveWhereInput is used for filtering ServerHardDrive objects.
Input was generated by ent.
"""
input ServerHardDriveWhereInput {
	not: ServerHardDriveWhereInput
	and: [ServerHardDriveWhereInput!]
	or: [ServerHardDriveWhereInput!]
	"""id field predicates"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	"""created_at field predicates"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	"""updated_at field predicates"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	"""serial field predicates"""
	serial: String
	serialNEQ: String
	serialIn: [String!]
	serialNotIn: [String!]
	serialGT: String
	serialGTE: String
	serialLT: String
	serialLTE: String
	serialContains: String
	serialHasPrefix: String
	serialHasSuffix: String
	serialEqualFold: String
	serialContainsFold: String
	"""server edge predicates"""
	hasServer: Boolean
	hasServerWith: [ServerWhereInput!]
	"""server_hard_drive_type edge predicates"""
	hasServerHardDriveType: Boolean
	hasServerHardDriveTypeWith: [ServerHardDriveTypeWhereInput!]
}
type ServerMemory implements Node @key(fields: "id") @prefixedID(prefix: "srvrmem") {
	"""The ID of the server memory."""
	id: ID!
	createdAt: Time!
	updatedAt: Time!
	"""The serial of the server memory."""
	serial: String!
	server: Server!
	serverMemoryType: ServerMemoryType!
}
"""A connection to a list of items."""
type ServerMemoryConnection {
	"""A list of edges."""
	edges: [ServerMemoryEdge]
	"""Information to aid in pagination."""
	pageInfo: PageInfo!
	"""Identifies the total count of items in the connection."""
	totalCount: Int!
}
"""Return response from serverMemoryCreate"""
type ServerMemoryCreatePayload {
	"""The created server memory."""
	serverMemory: ServerMemory!
}
"""Return response from serverMemoryDelete"""
type ServerMemoryDeletePayload {
	"""The ID of the deleted server memory."""
	deletedID: ID!
}
"""An edge in a connection."""
type ServerMemoryEdge {
	"""The item at the end of the edge."""
	node: ServerMemory
	"""A cursor for use in pagination."""
	cursor: Cursor!
}
"""Ordering options for ServerMemory connections"""
input ServerMemoryOrder {
	"""The ordering direction."""
	direction: OrderDirection! = ASC
	"""The field by which to order ServerMemories."""
	field: ServerMemoryOrderField!
}
"""Properties by which ServerMemory connections can be ordered."""
enum ServerMemoryOrderField {
	ID
	CREATED_AT
	UPDATED_AT
	SERVER
	SERVER_MEMORY_TYPE
}
type ServerMemoryType implements Node @key(fields: "id") @prefixedID(prefix: "srvrmmt") {
	"""The ID of the server memory type."""
	id: ID!
	createdAt: Time!
	updatedAt: Time!
	"""The name of the vendor for the server chassis type."""
	vendor: String!
	"""The mode of the server chassis type."""
	model: String!
	"""The speed of the server memory type."""
	speed: String!
	"""The size of the server memory type."""
	size: String!
	memory(
		"""Returns the elements in the list that come after the specified cursor."""
		after: Cursor

		"""Returns the first _n_ elements from the list."""
		first: Int

		"""Returns the elements in the list that come before the specified cursor."""
		before: Cursor

		"""Returns the last _n_ elements from the list."""
		last: Int

		"""Ordering options for ServerMemories returned from the connection."""
		orderBy: ServerMemoryOrder

		"""Filtering options for ServerMemories returned from the connection."""
		where: ServerMemoryWhereInput
	): ServerMemoryConnection!
}
"""A connection to a list of items."""
type ServerMemoryTypeConnection {
	"""A list of edges."""
	edges: [ServerMemoryTypeEdge]
	"""Information to aid in pagination."""
	pageInfo: PageInfo!
	"""Identifies the total count of items in the connection."""
	totalCount: Int!
}
"""Return response from serverMemoryTypeCreate"""
type ServerMemoryTypeCreatePayload {
	"""The created server memory type."""
	serverMemoryType: ServerMemoryType!
}
"""Return response from serverMemoryTypeDelete"""
type ServerMemoryTypeDeletePayload {
	"""The ID of the deleted server memory type."""
	deletedID: ID!
}
"""An edge in a connection."""
type ServerMemoryTypeEdge {
	"""The item at the end of the edge."""
	node: ServerMemoryType
	"""A cursor for use in pagination."""
	cursor: Cursor!
}
"""Ordering options for ServerMemoryType connections"""
input ServerMemoryTypeOrder {
	"""The ordering direction."""
	direction: OrderDirection! = ASC
	"""The field by which to order ServerMemoryTypes."""
	field: ServerMemoryTypeOrderField!
}
"""Properties by which ServerMemoryType connections can be ordered."""
enum ServerMemoryTypeOrderField {
	ID
	CREATED_AT
	UPDATED_AT
	NAME
}
"""Return response from serverMemoryTypeUpdate"""
type ServerMemoryTypeUpdatePayload {
	"""The updated server memory type."""
	serverMemoryType: ServerMemoryType!
}
"""
ServerMemoryTypeWhereInput is used for filtering ServerMemoryType objects.
Input was generated by ent.
"""
input ServerMemoryTypeWhereInput {
	not: ServerMemoryTypeWhereInput
	and: [ServerMemoryTypeWhereInput!]
	or: [ServerMemoryTypeWhereInput!]
	"""id field predicates"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	"""created_at field predicates"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	"""updated_at field predicates"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	"""vendor field predicates"""
	vendor: String
	vendorNEQ: String
	vendorIn: [String!]
	vendorNotIn: [String!]
	vendorGT: String
	vendorGTE: String
	vendorLT: String
	vendorLTE: String
	vendorContains: String
	vendorHasPrefix: String
	vendorHasSuffix: String
	vendorEqualFold: String
	vendorContainsFold: String
	"""model field predicates"""
	model: String
	modelNEQ: String
	modelIn: [String!]
	modelNotIn: [String!]
	modelGT: String
	modelGTE: String
	modelLT: String
	modelLTE: String
	modelContains: String
	modelHasPrefix: String
	modelHasSuffix: String
	modelEqualFold: String
	modelContainsFold: String
	"""speed field predicates"""
	speed: String
	speedNEQ: String
	speedIn: [String!]
	speedNotIn: [String!]
	speedGT: String
	speedGTE: String
	speedLT: String
	speedLTE: String
	speedContains: String
	speedHasPrefix: String
	speedHasSuffix: String
	speedEqualFold: String
	speedContainsFold: String
	"""size field predicates"""
	size: String
	sizeNEQ: String
	sizeIn: [String!]
	sizeNotIn: [String!]
	sizeGT: String
	sizeGTE: String
	sizeLT: String
	sizeLTE: String
	sizeContains: String
	sizeHasPrefix: String
	sizeHasSuffix: String
	sizeEqualFold: String
	sizeContainsFold: String
	"""memory edge predicates"""
	hasMemory: Boolean
	hasMemoryWith: [ServerMemoryWhereInput!]
}
"""Return response from serverMemoryUpdate"""
type ServerMemoryUpdatePayload {
	"""The updated server memory."""
	serverMemory: ServerMemory!
}
"""
ServerMemoryWhereInput is used for filtering ServerMemory objects.
Input was generated by ent.
"""
input ServerMemoryWhereInput {
	not: ServerMemoryWhereInput
	and: [ServerMemoryWhereInput!]
	or: [ServerMemoryWhereInput!]
	"""id field predicates"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	"""created_at field predicates"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	"""updated_at field predicates"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	"""serial field predicates"""
	serial: String
	serialNEQ: String
	serialIn: [String!]
	serialNotIn: [String!]
	serialGT: String
	serialGTE: String
	serialLT: String
	serialLTE: String
	serialContains: String
	serialHasPrefix: String
	serialHasSuffix: String
	serialEqualFold: String
	serialContainsFold: String
	"""server edge predicates"""
	hasServer: Boolean
	hasServerWith: [ServerWhereInput!]
	"""server_memory_type edge predicates"""
	hasServerMemoryType: Boolean
	hasServerMemoryTypeWith: [ServerMemoryTypeWhereInput!]
}
type ServerMotherboard implements Node @key(fields: "id") @prefixedID(prefix: "srvrmbd") {
	"""The ID of the server motherboard."""
	id: ID!
	createdAt: Time!
	updatedAt: Time!
	"""The serial of the server motherboard"""
	serial: String!
	server: Server!
	serverMotherboardType: ServerMotherboardType!
}
"""A connection to a list of items."""
type ServerMotherboardConnection {
	"""A list of edges."""
	edges: [ServerMotherboardEdge]
	"""Information to aid in pagination."""
	pageInfo: PageInfo!
	"""Identifies the total count of items in the connection."""
	totalCount: Int!
}
"""Return response from serverMotherboardCreate"""
type ServerMotherboardCreatePayload {
	"""The created server motherboard."""
	serverMotherboard: ServerMotherboard!
}
"""Return response from serverMotherboardDelete"""
type ServerMotherboardDeletePayload {
	"""The ID of the deleted server motherboard."""
	deletedID: ID!
}
"""An edge in a connection."""
type ServerMotherboardEdge {
	"""The item at the end of the edge."""
	node: ServerMotherboard
	"""A cursor for use in pagination."""
	cursor: Cursor!
}
"""Ordering options for ServerMotherboard connections"""
input ServerMotherboardOrder {
	"""The ordering direction."""
	direction: OrderDirection! = ASC
	"""The field by which to order ServerMotherboards."""
	field: ServerMotherboardOrderField!
}
"""Properties by which ServerMotherboard connections can be ordered."""
enum ServerMotherboardOrderField {
	ID
	CREATED_AT
	UPDATED_AT
	SERVER_MOTHERBOARD_TYPE
	SERVER
}
type ServerMotherboardType implements Node @key(fields: "id") @prefixedID(prefix: "srvrmbt") {
	"""The ID of the server motherboard type."""
	id: ID!
	createdAt: Time!
	updatedAt: Time!
	"""The name of the vendor for the server motherboard type."""
	vendor: String!
	"""The mode of the server chassis type."""
	model: String!
	motherboard(
		"""Returns the elements in the list that come after the specified cursor."""
		after: Cursor

		"""Returns the first _n_ elements from the list."""
		first: Int

		"""Returns the elements in the list that come before the specified cursor."""
		before: Cursor

		"""Returns the last _n_ elements from the list."""
		last: Int

		"""Ordering options for ServerMotherboards returned from the connection."""
		orderBy: ServerMotherboardOrder

		"""Filtering options for ServerMotherboards returned from the connection."""
		where: ServerMotherboardWhereInput
	): ServerMotherboardConnection!
}
"""A connection to a list of items."""
type ServerMotherboardTypeConnection {
	"""A list of edges."""
	edges: [ServerMotherboardTypeEdge]
	"""Information to aid in pagination."""
	pageInfo: PageInfo!
	"""Identifies the total count of items in the connection."""
	totalCount: Int!
}
"""Return response from serverMotherboardTypeCreate"""
type ServerMotherboardTypeCreatePayload {
	"""The created server motherboard type."""
	serverMotherboardType: ServerMotherboardType!
}
"""Return response from serverMotherboardTypeDelete"""
type ServerMotherboardTypeDeletePayload {
	"""The ID of the deleted server motherboard type."""
	deletedID: ID!
}
"""An edge in a connection."""
type ServerMotherboardTypeEdge {
	"""The item at the end of the edge."""
	node: ServerMotherboardType
	"""A cursor for use in pagination."""
	cursor: Cursor!
}
"""Ordering options for ServerMotherboardType connections"""
input ServerMotherboardTypeOrder {
	"""The ordering direction."""
	direction: OrderDirection! = ASC
	"""The field by which to order ServerMotherboardTypes."""
	field: ServerMotherboardTypeOrderField!
}
"""Properties by which ServerMotherboardType connections can be ordered."""
enum ServerMotherboardTypeOrderField {
	ID
	CREATED_AT
	UPDATED_AT
	NAME
}
"""Return response from serverMotherboardTypeUpdate"""
type ServerMotherboardTypeUpdatePayload {
	"""The updated server motherboard type."""
	serverMotherboardType: ServerMotherboardType!
}
"""
ServerMotherboardTypeWhereInput is used for filtering ServerMotherboardType objects.
Input was generated by ent.
"""
input ServerMotherboardTypeWhereInput {
	not: ServerMotherboardTypeWhereInput
	and: [ServerMotherboardTypeWhereInput!]
	or: [ServerMotherboardTypeWhereInput!]
	"""id field predicates"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	"""created_at field predicates"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	"""updated_at field predicates"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	"""vendor field predicates"""
	vendor: String
	vendorNEQ: String
	vendorIn: [String!]
	vendorNotIn: [String!]
	vendorGT: String
	vendorGTE: String
	vendorLT: String
	vendorLTE: String
	vendorContains: String
	vendorHasPrefix: String
	vendorHasSuffix: String
	vendorEqualFold: String
	vendorContainsFold: String
	"""model field predicates"""
	model: String
	modelNEQ: String
	modelIn: [String!]
	modelNotIn: [String!]
	modelGT: String
	modelGTE: String
	modelLT: String
	modelLTE: String
	modelContains: String
	modelHasPrefix: String
	modelHasSuffix: String
	modelEqualFold: String
	modelContainsFold: String
	"""motherboard edge predicates"""
	hasMotherboard: Boolean
	hasMotherboardWith: [ServerMotherboardWhereInput!]
}
"""Return response from serverMotherboardUpdate"""
type ServerMotherboardUpdatePayload {
	"""The updated server motherboard."""
	serverMotherboard: ServerMotherboard!
}
"""
ServerMotherboardWhereInput is used for filtering ServerMotherboard objects.
Input was generated by ent.
"""
input ServerMotherboardWhereInput {
	not: ServerMotherboardWhereInput
	and: [ServerMotherboardWhereInput!]
	or: [ServerMotherboardWhereInput!]
	"""id field predicates"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	"""created_at field predicates"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	"""updated_at field predicates"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	"""serial field predicates"""
	serial: String
	serialNEQ: String
	serialIn: [String!]
	serialNotIn: [String!]
	serialGT: String
	serialGTE: String
	serialLT: String
	serialLTE: String
	serialContains: String
	serialHasPrefix: String
	serialHasSuffix: String
	serialEqualFold: String
	serialContainsFold: String
	"""server edge predicates"""
	hasServer: Boolean
	hasServerWith: [ServerWhereInput!]
	"""server_motherboard_type edge predicates"""
	hasServerMotherboardType: Boolean
	hasServerMotherboardTypeWith: [ServerMotherboardTypeWhereInput!]
}
type ServerNetworkCard implements Node @key(fields: "id") @prefixedID(prefix: "srvrnwc") {
	"""The ID of the server network card type."""
	id: ID!
	createdAt: Time!
	updatedAt: Time!
	"""The serial number for the server network card."""
	serial: String!
	networkCardType: ServerNetworkCardType!
	server: Server!
	networkPort(
		"""Returns the elements in the list that come after the specified cursor."""
		after: Cursor

		"""Returns the first _n_ elements from the list."""
		first: Int

		"""Returns the elements in the list that come before the specified cursor."""
		before: Cursor

		"""Returns the last _n_ elements from the list."""
		last: Int

		"""Ordering options for ServerNetworkPorts returned from the connection."""
		orderBy: ServerNetworkPortOrder

		"""Filtering options for ServerNetworkPorts returned from the connection."""
		where: ServerNetworkPortWhereInput
	): ServerNetworkPortConnection!
}
"""A connection to a list of items."""
type ServerNetworkCardConnection {
	"""A list of edges."""
	edges: [ServerNetworkCardEdge]
	"""Information to aid in pagination."""
	pageInfo: PageInfo!
	"""Identifies the total count of items in the connection."""
	totalCount: Int!
}
"""Return response from serverNetworkCardCreate"""
type ServerNetworkCardCreatePayload {
	"""The created server network card."""
	serverNetworkCard: ServerNetworkCard!
}
"""Return response from serverNetworkCardDelete"""
type ServerNetworkCardDeletePayload {
	"""The ID of the deleted server network card."""
	deletedID: ID!
}
"""An edge in a connection."""
type ServerNetworkCardEdge {
	"""The item at the end of the edge."""
	node: ServerNetworkCard
	"""A cursor for use in pagination."""
	cursor: Cursor!
}
"""Ordering options for ServerNetworkCard connections"""
input ServerNetworkCardOrder {
	"""The ordering direction."""
	direction: OrderDirection! = ASC
	"""The field by which to order ServerNetworkCards."""
	field: ServerNetworkCardOrderField!
}
"""Properties by which ServerNetworkCard connections can be ordered."""
enum ServerNetworkCardOrderField {
	ID
	CREATED_AT
	UPDATED_AT
	SERIAL
	SERVER
	SERVER_NETWORK_CARD_TYPE
}
type ServerNetworkCardType implements Node @key(fields: "id") @prefixedID(prefix: "srvrnct") {
	"""The ID of the server network card type."""
	id: ID!
	createdAt: Time!
	updatedAt: Time!
	"""The name of the vendor for the server network card type."""
	vendor: String!
	"""The model of the server network card type."""
	model: String!
	"""The number of ports on the server network card type."""
	portCount: Int!
	networkCard(
		"""Returns the elements in the list that come after the specified cursor."""
		after: Cursor

		"""Returns the first _n_ elements from the list."""
		first: Int

		"""Returns the elements in the list that come before the specified cursor."""
		before: Cursor

		"""Returns the last _n_ elements from the list."""
		last: Int

		"""Ordering options for ServerNetworkCards returned from the connection."""
		orderBy: ServerNetworkCardOrder

		"""Filtering options for ServerNetworkCards returned from the connection."""
		where: ServerNetworkCardWhereInput
	): ServerNetworkCardConnection!
}
"""A connection to a list of items."""
type ServerNetworkCardTypeConnection {
	"""A list of edges."""
	edges: [ServerNetworkCardTypeEdge]
	"""Information to aid in pagination."""
	pageInfo: PageInfo!
	"""Identifies the total count of items in the connection."""
	totalCount: Int!
}
"""Return response from serverNetworkCardTypeCreate"""
type ServerNetworkCardTypeCreatePayload {
	"""The created server network card type."""
	serverNetworkCardType: ServerNetworkCardType!
}
"""Return response from serverNetworkCardTypeDelete"""
type ServerNetworkCardTypeDeletePayload {
	"""The ID of the deleted server network card type."""
	deletedID: ID!
}
"""An edge in a connection."""
type ServerNetworkCardTypeEdge {
	"""The item at the end of the edge."""
	node: ServerNetworkCardType
	"""A cursor for use in pagination."""
	cursor: Cursor!
}
"""Ordering options for ServerNetworkCardType connections"""
input ServerNetworkCardTypeOrder {
	"""The ordering direction."""
	direction: OrderDirection! = ASC
	"""The field by which to order ServerNetworkCardTypes."""
	field: ServerNetworkCardTypeOrderField!
}
"""Properties by which ServerNetworkCardType connections can be ordered."""
enum ServerNetworkCardTypeOrderField {
	ID
	CREATED_AT
	UPDATED_AT
	NAME
}
"""Return response from serverNetworkCardTypeUpdate"""
type ServerNetworkCardTypeUpdatePayload {
	"""The updated server network card type."""
	serverNetworkCardType: ServerNetworkCardType!
}
"""
ServerNetworkCardTypeWhereInput is used for filtering ServerNetworkCardType objects.
Input was generated by ent.
"""
input ServerNetworkCardTypeWhereInput {
	not: ServerNetworkCardTypeWhereInput
	and: [ServerNetworkCardTypeWhereInput!]
	or: [ServerNetworkCardTypeWhereInput!]
	"""id field predicates"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	"""created_at field predicates"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	"""updated_at field predicates"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	"""vendor field predicates"""
	vendor: String
	vendorNEQ: String
	vendorIn: [String!]
	vendorNotIn: [String!]
	vendorGT: String
	vendorGTE: String
	vendorLT: String
	vendorLTE: String
	vendorContains: String
	vendorHasPrefix: String
	vendorHasSuffix: String
	vendorEqualFold: String
	vendorContainsFold: String
	"""model field predicates"""
	model: String
	modelNEQ: String
	modelIn: [String!]
	modelNotIn: [String!]
	modelGT: String
	modelGTE: String
	modelLT: String
	modelLTE: String
	modelContains: String
	modelHasPrefix: String
	modelHasSuffix: String
	modelEqualFold: String
	modelContainsFold: String
	"""port_count field predicates"""
	portCount: Int
	portCountNEQ: Int
	portCountIn: [Int!]
	portCountNotIn: [Int!]
	portCountGT: Int
	portCountGTE: Int
	portCountLT: Int
	portCountLTE: Int
	"""network_card edge predicates"""
	hasNetworkCard: Boolean
	hasNetworkCardWith: [ServerNetworkCardWhereInput!]
}
"""Return response from serverNetworkCardUpdate"""
type ServerNetworkCardUpdatePayload {
	"""The updated server network card."""
	serverNetworkCard: ServerNetworkCard!
}
"""
ServerNetworkCardWhereInput is used for filtering ServerNetworkCard objects.
Input was generated by ent.
"""
input ServerNetworkCardWhereInput {
	not: ServerNetworkCardWhereInput
	and: [ServerNetworkCardWhereInput!]
	or: [ServerNetworkCardWhereInput!]
	"""id field predicates"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	"""created_at field predicates"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	"""updated_at field predicates"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	"""serial field predicates"""
	serial: String
	serialNEQ: String
	serialIn: [String!]
	serialNotIn: [String!]
	serialGT: String
	serialGTE: String
	serialLT: String
	serialLTE: String
	serialContains: String
	serialHasPrefix: String
	serialHasSuffix: String
	serialEqualFold: String
	serialContainsFold: String
	"""network_card_type edge predicates"""
	hasNetworkCardType: Boolean
	hasNetworkCardTypeWith: [ServerNetworkCardTypeWhereInput!]
	"""server edge predicates"""
	hasServer: Boolean
	hasServerWith: [ServerWhereInput!]
	"""network_port edge predicates"""
	hasNetworkPort: Boolean
	hasNetworkPortWith: [ServerNetworkPortWhereInput!]
}
type ServerNetworkPort implements Node @key(fields: "id") @prefixedID(prefix: "srvrnwp") {
	"""The ID of the server network card type."""
	id: ID!
	createdAt: Time!
	updatedAt: Time!
	"""The mac address for the server network port."""
	macAddress: String!
	networkCard: ServerNetworkCard!
}
"""A connection to a list of items."""
type ServerNetworkPortConnection {
	"""A list of edges."""
	edges: [ServerNetworkPortEdge]
	"""Information to aid in pagination."""
	pageInfo: PageInfo!
	"""Identifies the total count of items in the connection."""
	totalCount: Int!
}
"""Return response from serverNetworkPortCreate"""
type ServerNetworkPortCreatePayload {
	"""The created server network port."""
	serverNetworkPort: ServerNetworkPort!
}
"""Return response from serverNetworkPortDelete"""
type ServerNetworkPortDeletePayload {
	"""The ID of the deleted server network port."""
	deletedID: ID!
}
"""An edge in a connection."""
type ServerNetworkPortEdge {
	"""The item at the end of the edge."""
	node: ServerNetworkPort
	"""A cursor for use in pagination."""
	cursor: Cursor!
}
"""Ordering options for ServerNetworkPort connections"""
input ServerNetworkPortOrder {
	"""The ordering direction."""
	direction: OrderDirection! = ASC
	"""The field by which to order ServerNetworkPorts."""
	field: ServerNetworkPortOrderField!
}
"""Properties by which ServerNetworkPort connections can be ordered."""
enum ServerNetworkPortOrderField {
	ID
	CREATED_AT
	UPDATED_AT
	MAC_ADDRESS
	NETWORK_CARD
}
"""Return response from serverNetworkPortUpdate"""
type ServerNetworkPortUpdatePayload {
	"""The updated server network port."""
	serverNetworkPort: ServerNetworkPort!
}
"""
ServerNetworkPortWhereInput is used for filtering ServerNetworkPort objects.
Input was generated by ent.
"""
input ServerNetworkPortWhereInput {
	not: ServerNetworkPortWhereInput
	and: [ServerNetworkPortWhereInput!]
	or: [ServerNetworkPortWhereInput!]
	"""id field predicates"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	"""created_at field predicates"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	"""updated_at field predicates"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	"""mac_address field predicates"""
	macAddress: String
	macAddressNEQ: String
	macAddressIn: [String!]
	macAddressNotIn: [String!]
	macAddressGT: String
	macAddressGTE: String
	macAddressLT: String
	macAddressLTE: String
	macAddressContains: String
	macAddressHasPrefix: String
	macAddressHasSuffix: String
	macAddressEqualFold: String
	macAddressContainsFold: String
	"""network_card edge predicates"""
	hasNetworkCard: Boolean
	hasNetworkCardWith: [ServerNetworkCardWhereInput!]
}
"""Ordering options for Server connections"""
input ServerOrder {
	"""The ordering direction."""
	direction: OrderDirection! = ASC
	"""The field by which to order Servers."""
	field: ServerOrderField!
}
"""Properties by which Server connections can be ordered."""
enum ServerOrderField {
	ID
	CREATED_AT
	UPDATED_AT
	NAME
	DESCRIPTION
	OWNER
}
type ServerPowerSupply implements Node @key(fields: "id") @prefixedID(prefix: "srvrpsu") {
	"""The ID of the server power supply type."""
	id: ID!
	createdAt: Time!
	updatedAt: Time!
	"""The serial of the server power supply."""
	serial: String!
	server: Server!
	serverPowerSupplyType: ServerPowerSupplyType!
}
"""A connection to a list of items."""
type ServerPowerSupplyConnection {
	"""A list of edges."""
	edges: [ServerPowerSupplyEdge]
	"""Information to aid in pagination."""
	pageInfo: PageInfo!
	"""Identifies the total count of items in the connection."""
	totalCount: Int!
}
"""Return response from serverPowerSupplyCreate"""
type ServerPowerSupplyCreatePayload {
	"""The created server power supply."""
	serverPowerSupply: ServerPowerSupply!
}
"""Return response from serverPowerSupplyDelete"""
type ServerPowerSupplyDeletePayload {
	"""The ID of the deleted server power supply."""
	deletedID: ID!
}
"""An edge in a connection."""
type ServerPowerSupplyEdge {
	"""The item at the end of the edge."""
	node: ServerPowerSupply
	"""A cursor for use in pagination."""
	cursor: Cursor!
}
"""Ordering options for ServerPowerSupply connections"""
input ServerPowerSupplyOrder {
	"""The ordering direction."""
	direction: OrderDirection! = ASC
	"""The field by which to order ServerPowerSupplies."""
	field: ServerPowerSupplyOrderField!
}
"""Properties by which ServerPowerSupply connections can be ordered."""
enum ServerPowerSupplyOrderField {
	ID
	CREATED_AT
	UPDATED_AT
	PARENT_CHASSIS
	SERVER
}
type ServerPowerSupplyType implements Node @key(fields: "id") @prefixedID(prefix: "srvrpst") {
	"""The ID of the server power supply type."""
	id: ID!
	createdAt: Time!
	updatedAt: Time!
	"""The name of the vendor for the server power supply type."""
	vendor: String!
	"""The mode of the server power supply type."""
	model: String!
	"""The watts of the server power supply type."""
	watts: String!
}
"""A connection to a list of items."""
type ServerPowerSupplyTypeConnection {
	"""A list of edges."""
	edges: [ServerPowerSupplyTypeEdge]
	"""Information to aid in pagination."""
	pageInfo: PageInfo!
	"""Identifies the total count of items in the connection."""
	totalCount: Int!
}
"""Return response from serverPowerSupplyTypeCreate"""
type ServerPowerSupplyTypeCreatePayload {
	"""The created server power supply type."""
	serverPowerSupplyType: ServerPowerSupplyType!
}
"""Return response from serverPowerSupplyTypeDelete"""
type ServerPowerSupplyTypeDeletePayload {
	"""The ID of the deleted server power supply type."""
	deletedID: ID!
}
"""An edge in a connection."""
type ServerPowerSupplyTypeEdge {
	"""The item at the end of the edge."""
	node: ServerPowerSupplyType
	"""A cursor for use in pagination."""
	cursor: Cursor!
}
"""Ordering options for ServerPowerSupplyType connections"""
input ServerPowerSupplyTypeOrder {
	"""The ordering direction."""
	direction: OrderDirection! = ASC
	"""The field by which to order ServerPowerSupplyTypes."""
	field: ServerPowerSupplyTypeOrderField!
}
"""Properties by which ServerPowerSupplyType connections can be ordered."""
enum ServerPowerSupplyTypeOrderField {
	ID
	CREATED_AT
	UPDATED_AT
	NAME
}
"""Return response from serverPowerSupplyTypeUpdate"""
type ServerPowerSupplyTypeUpdatePayload {
	"""The updated server power supply type."""
	serverPowerSupplyType: ServerPowerSupplyType!
}
"""
ServerPowerSupplyTypeWhereInput is used for filtering ServerPowerSupplyType objects.
Input was generated by ent.
"""
input ServerPowerSupplyTypeWhereInput {
	not: ServerPowerSupplyTypeWhereInput
	and: [ServerPowerSupplyTypeWhereInput!]
	or: [ServerPowerSupplyTypeWhereInput!]
	"""id field predicates"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	"""created_at field predicates"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	"""updated_at field predicates"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	"""vendor field predicates"""
	vendor: String
	vendorNEQ: String
	vendorIn: [String!]
	vendorNotIn: [String!]
	vendorGT: String
	vendorGTE: String
	vendorLT: String
	vendorLTE: String
	vendorContains: String
	vendorHasPrefix: String
	vendorHasSuffix: String
	vendorEqualFold: String
	vendorContainsFold: String
	"""model field predicates"""
	model: String
	modelNEQ: String
	modelIn: [String!]
	modelNotIn: [String!]
	modelGT: String
	modelGTE: String
	modelLT: String
	modelLTE: String
	modelContains: String
	modelHasPrefix: String
	modelHasSuffix: String
	modelEqualFold: String
	modelContainsFold: String
	"""watts field predicates"""
	watts: String
	wattsNEQ: String
	wattsIn: [String!]
	wattsNotIn: [String!]
	wattsGT: String
	wattsGTE: String
	wattsLT: String
	wattsLTE: String
	wattsContains: String
	wattsHasPrefix: String
	wattsHasSuffix: String
	wattsEqualFold: String
	wattsContainsFold: String
}
"""Return response from serverPowerSupplyUpdate"""
type ServerPowerSupplyUpdatePayload {
	"""The updated server power supply."""
	serverPowerSupply: ServerPowerSupply!
}
"""
ServerPowerSupplyWhereInput is used for filtering ServerPowerSupply objects.
Input was generated by ent.
"""
input ServerPowerSupplyWhereInput {
	not: ServerPowerSupplyWhereInput
	and: [ServerPowerSupplyWhereInput!]
	or: [ServerPowerSupplyWhereInput!]
	"""id field predicates"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	"""created_at field predicates"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	"""updated_at field predicates"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	"""serial field predicates"""
	serial: String
	serialNEQ: String
	serialIn: [String!]
	serialNotIn: [String!]
	serialGT: String
	serialGTE: String
	serialLT: String
	serialLTE: String
	serialContains: String
	serialHasPrefix: String
	serialHasSuffix: String
	serialEqualFold: String
	serialContainsFold: String
	"""server edge predicates"""
	hasServer: Boolean
	hasServerWith: [ServerWhereInput!]
	"""server_power_supply_type edge predicates"""
	hasServerPowerSupplyType: Boolean
	hasServerPowerSupplyTypeWith: [ServerPowerSupplyTypeWhereInput!]
}
type ServerProvider implements Node @key(fields: "id") @prefixedID(prefix: "srvrprv") {
	"""The ID of the server provider."""
	id: ID!
	createdAt: Time!
	updatedAt: Time!
	"""The name of the server provider."""
	name: String!
	servers(
		"""Returns the elements in the list that come after the specified cursor."""
		after: Cursor

		"""Returns the first _n_ elements from the list."""
		first: Int

		"""Returns the elements in the list that come before the specified cursor."""
		before: Cursor

		"""Returns the last _n_ elements from the list."""
		last: Int

		"""Ordering options for Servers returned from the connection."""
		orderBy: ServerOrder

		"""Filtering options for Servers returned from the connection."""
		where: ServerWhereInput
	): ServerConnection!
}
"""A connection to a list of items."""
type ServerProviderConnection {
	"""A list of edges."""
	edges: [ServerProviderEdge]
	"""Information to aid in pagination."""
	pageInfo: PageInfo!
	"""Identifies the total count of items in the connection."""
	totalCount: Int!
}
"""Return response from serverProviderCreate"""
type ServerProviderCreatePayload {
	"""The created server provider."""
	serverProvider: ServerProvider!
}
"""Return response from serverProviderDelete"""
type ServerProviderDeletePayload {
	"""The ID of the deleted server provider."""
	deletedID: ID!
}
"""An edge in a connection."""
type ServerProviderEdge {
	"""The item at the end of the edge."""
	node: ServerProvider
	"""A cursor for use in pagination."""
	cursor: Cursor!
}
"""Ordering options for ServerProvider connections"""
input ServerProviderOrder {
	"""The ordering direction."""
	direction: OrderDirection! = ASC
	"""The field by which to order ServerProviders."""
	field: ServerProviderOrderField!
}
"""Properties by which ServerProvider connections can be ordered."""
enum ServerProviderOrderField {
	ID
	CREATED_AT
	UPDATED_AT
	NAME
	RESOURCE_PROVIDER
}
"""Return response from serverProviderUpdate"""
type ServerProviderUpdatePayload {
	"""The updated server provider."""
	serverProvider: ServerProvider!
}
"""
ServerProviderWhereInput is used for filtering Provider objects.
Input was generated by ent.
"""
input ServerProviderWhereInput {
	not: ServerProviderWhereInput
	and: [ServerProviderWhereInput!]
	or: [ServerProviderWhereInput!]
	"""id field predicates"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	"""created_at field predicates"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	"""updated_at field predicates"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	"""name field predicates"""
	name: String
	nameNEQ: String
	nameIn: [String!]
	nameNotIn: [String!]
	nameGT: String
	nameGTE: String
	nameLT: String
	nameLTE: String
	nameContains: String
	nameHasPrefix: String
	nameHasSuffix: String
	nameEqualFold: String
	nameContainsFold: String
	"""servers edge predicates"""
	hasServers: Boolean
	hasServersWith: [ServerWhereInput!]
}
type ServerType implements Node @key(fields: "id") @prefixedID(prefix: "srvrtyp") {
	"""The ID of the server type."""
	id: ID!
	createdAt: Time!
	updatedAt: Time!
	"""The name of the server type."""
	name: String!
	servers(
		"""Returns the elements in the list that come after the specified cursor."""
		after: Cursor

		"""Returns the first _n_ elements from the list."""
		first: Int

		"""Returns the elements in the list that come before the specified cursor."""
		before: Cursor

		"""Returns the last _n_ elements from the list."""
		last: Int

		"""Ordering options for Servers returned from the connection."""
		orderBy: ServerOrder

		"""Filtering options for Servers returned from the connection."""
		where: ServerWhereInput
	): ServerConnection!
	"""The owner of the server type"""
	owner: ResourceOwner!
}
"""A connection to a list of items."""
type ServerTypeConnection {
	"""A list of edges."""
	edges: [ServerTypeEdge]
	"""Information to aid in pagination."""
	pageInfo: PageInfo!
	"""Identifies the total count of items in the connection."""
	totalCount: Int!
}
"""Return response from serverTypeCreate"""
type ServerTypeCreatePayload {
	"""The created server type."""
	serverType: ServerType!
}
"""Return response from serverTypeDelete"""
type ServerTypeDeletePayload {
	"""The ID of the deleted server type."""
	deletedID: ID!
}
"""An edge in a connection."""
type ServerTypeEdge {
	"""The item at the end of the edge."""
	node: ServerType
	"""A cursor for use in pagination."""
	cursor: Cursor!
}
"""Ordering options for ServerType connections"""
input ServerTypeOrder {
	"""The ordering direction."""
	direction: OrderDirection! = ASC
	"""The field by which to order ServerTypes."""
	field: ServerTypeOrderField!
}
"""Properties by which ServerType connections can be ordered."""
enum ServerTypeOrderField {
	ID
	CREATED_AT
	UPDATED_AT
	NAME
	OWNER
}
"""Return response from serverTypeUpdate"""
type ServerTypeUpdatePayload {
	"""The updated server type."""
	serverType: ServerType!
}
"""
ServerTypeWhereInput is used for filtering ServerType objects.
Input was generated by ent.
"""
input ServerTypeWhereInput {
	not: ServerTypeWhereInput
	and: [ServerTypeWhereInput!]
	or: [ServerTypeWhereInput!]
	"""id field predicates"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	"""created_at field predicates"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	"""updated_at field predicates"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	"""name field predicates"""
	name: String
	nameNEQ: String
	nameIn: [String!]
	nameNotIn: [String!]
	nameGT: String
	nameGTE: String
	nameLT: String
	nameLTE: String
	nameContains: String
	nameHasPrefix: String
	nameHasSuffix: String
	nameEqualFold: String
	nameContainsFold: String
	"""servers edge predicates"""
	hasServers: Boolean
	hasServersWith: [ServerWhereInput!]
}
"""Return response from serverUpdate"""
type ServerUpdatePayload {
	"""The updated server."""
	server: Server!
}
"""
ServerWhereInput is used for filtering Server objects.
Input was generated by ent.
"""
input ServerWhereInput {
	not: ServerWhereInput
	and: [ServerWhereInput!]
	or: [ServerWhereInput!]
	"""id field predicates"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	"""created_at field predicates"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	"""updated_at field predicates"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	"""name field predicates"""
	name: String
	nameNEQ: String
	nameIn: [String!]
	nameNotIn: [String!]
	nameGT: String
	nameGTE: String
	nameLT: String
	nameLTE: String
	nameContains: String
	nameHasPrefix: String
	nameHasSuffix: String
	nameEqualFold: String
	nameContainsFold: String
	"""description field predicates"""
	description: String
	descriptionNEQ: String
	descriptionIn: [String!]
	descriptionNotIn: [String!]
	descriptionGT: String
	descriptionGTE: String
	descriptionLT: String
	descriptionLTE: String
	descriptionContains: String
	descriptionHasPrefix: String
	descriptionHasSuffix: String
	descriptionIsNil: Boolean
	descriptionNotNil: Boolean
	descriptionEqualFold: String
	descriptionContainsFold: String
	"""provider edge predicates"""
	hasProvider: Boolean
	hasProviderWith: [ServerProviderWhereInput!]
	"""server_type edge predicates"""
	hasServerType: Boolean
	hasServerTypeWith: [ServerTypeWhereInput!]
	"""components edge predicates"""
	hasComponents: Boolean
	hasComponentsWith: [ServerComponentWhereInput!]
}
"""The builtin Time type"""
scalar Time
"""Input information to update a server cpu."""
input UpdateServerCPUInput {
	"""The serial number of the server cpu."""
	serial: String
}
"""Input information to update a server cpu type."""
input UpdateServerCPUTypeInput {
	"""The name of the vendor for the server cpu type."""
	vendor: String
	"""The mode of the server cpu type."""
	model: String
	"""The clock speed of the server cpu type."""
	clockSpeed: String
	"""The number of cores for the server cpu type."""
	coreCount: Int
	addCPUIDs: [ID!]
	removeCPUIDs: [ID!]
	clearCPU: Boolean
}
"""Input information to update a server chassis."""
input UpdateServerChassisInput {
	"""The serial number of the server chassis."""
	serial: String
}
"""Input information to update a server chassis type."""
input UpdateServerChassisTypeInput {
	"""The name of the vendor for the server chassis type."""
	vendor: String
	"""The mode of the server chassis type."""
	model: String
	"""The height of the server chassis type."""
	height: String
	"""Whether the server chassis type is full depth."""
	isFullDepth: Boolean
	addChassiIDs: [ID!]
	removeChassiIDs: [ID!]
	clearChassis: Boolean
}
"""Input information to update a server component."""
input UpdateServerComponentInput {
	"""The name of the server component."""
	name: String
	"""The name of the vendor of the server component."""
	vendor: String
	"""The model of the server component."""
	model: String
	"""The serial number of the server component."""
	serial: String
}
"""Input information to update a server component type."""
input UpdateServerComponentTypeInput {
	"""The name of the server component type."""
	name: String
}
"""Input information to update a server hard drive."""
input UpdateServerHardDriveInput {
	"""The serial for the server hard drive."""
	serial: String
}
"""Input information to update a server hard drive type."""
input UpdateServerHardDriveTypeInput {
	"""The name of the vendor for the server hard drive type."""
	vendor: String
	"""The mode of the server chassis type."""
	model: String
	"""The speed of the server hard drive type."""
	speed: String
	"""The type of the server hard drive type."""
	type: ServerHardDriveTypeType
	"""The capacity of the server hard drive type."""
	capacity: String
	addHardDriveIDs: [ID!]
	removeHardDriveIDs: [ID!]
	clearHardDrive: Boolean
}
"""Input information to update a server."""
input UpdateServerInput {
	"""The name of the server."""
	name: String
	"""The description of the server."""
	description: String
	clearDescription: Boolean
	addComponentIDs: [ID!]
	removeComponentIDs: [ID!]
	clearComponents: Boolean
}
"""Input information to update a server memory."""
input UpdateServerMemoryInput {
	"""The serial of the server memory."""
	serial: String
}
"""Input information to update a server memory type."""
input UpdateServerMemoryTypeInput {
	"""The name of the vendor for the server chassis type."""
	vendor: String
	"""The mode of the server chassis type."""
	model: String
	"""The speed of the server memory type."""
	speed: String
	"""The size of the server memory type."""
	size: String
	addMemoryIDs: [ID!]
	removeMemoryIDs: [ID!]
	clearMemory: Boolean
}
"""Input information to update a server motherboard."""
input UpdateServerMotherboardInput {
	"""The serial of the server motherboard"""
	serial: String
}
"""Input information to update a server motherboard type."""
input UpdateServerMotherboardTypeInput {
	"""The name of the vendor for the server motherboard type."""
	vendor: String
	"""The mode of the server chassis type."""
	model: String
	addMotherboardIDs: [ID!]
	removeMotherboardIDs: [ID!]
	clearMotherboard: Boolean
}
"""Input information to update a server network card type."""
input UpdateServerNetworkCardInput {
	"""The serial number for the server network card."""
	serial: String
	addNetworkPortIDs: [ID!]
	removeNetworkPortIDs: [ID!]
	clearNetworkPort: Boolean
}
"""Input information to update a server network card type."""
input UpdateServerNetworkCardTypeInput {
	"""The name of the vendor for the server network card type."""
	vendor: String
	"""The model of the server network card type."""
	model: String
	"""The number of ports on the server network card type."""
	portCount: Int
	addNetworkCardIDs: [ID!]
	removeNetworkCardIDs: [ID!]
	clearNetworkCard: Boolean
}
"""Input information to update a server network card type."""
input UpdateServerNetworkPortInput {
	"""The mac address for the server network port."""
	macAddress: String
}
"""Input information to update a server power supply."""
input UpdateServerPowerSupplyInput {
	"""The serial of the server power supply."""
	serial: String
}
"""Input information to update a server power supply type."""
input UpdateServerPowerSupplyTypeInput {
	"""The name of the vendor for the server power supply type."""
	vendor: String
	"""The mode of the server power supply type."""
	model: String
	"""The watts of the server power supply type."""
	watts: String
}
"""Input information to update a server provider."""
input UpdateServerProviderInput {
	"""The name of the server provider."""
	name: String
}
"""Input information to update a server type."""
input UpdateServerTypeInput {
	"""The name of the server type."""
	name: String
}
scalar _Any
union _Entity = Location | ResourceOwner | Server | ServerCPU | ServerCPUType | ServerChassis | ServerChassisType | ServerComponent | ServerComponentType | ServerHardDrive | ServerHardDriveType | ServerMemory | ServerMemoryType | ServerMotherboard | ServerMotherboardType | ServerNetworkCard | ServerNetworkCardType | ServerNetworkPort | ServerPowerSupply | ServerPowerSupplyType | ServerProvider | ServerType
type _Service {
	sdl: String
}

extend schema
  @link(
    url: "https://specs.apollo.dev/federation/v2.3"
    import: [
      "@key",
      "@interfaceObject",
      "@shareable",
      "@inaccessible",
      "@override",
      "@provides",
      "@requires",
      "@tag"
    ]
  )
