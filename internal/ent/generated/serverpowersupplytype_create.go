// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"go.infratographer.com/server-api/internal/ent/generated/serverpowersupplytype"
	"go.infratographer.com/x/gidx"
)

// ServerPowerSupplyTypeCreate is the builder for creating a ServerPowerSupplyType entity.
type ServerPowerSupplyTypeCreate struct {
	config
	mutation *ServerPowerSupplyTypeMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (spstc *ServerPowerSupplyTypeCreate) SetCreatedAt(t time.Time) *ServerPowerSupplyTypeCreate {
	spstc.mutation.SetCreatedAt(t)
	return spstc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (spstc *ServerPowerSupplyTypeCreate) SetNillableCreatedAt(t *time.Time) *ServerPowerSupplyTypeCreate {
	if t != nil {
		spstc.SetCreatedAt(*t)
	}
	return spstc
}

// SetUpdatedAt sets the "updated_at" field.
func (spstc *ServerPowerSupplyTypeCreate) SetUpdatedAt(t time.Time) *ServerPowerSupplyTypeCreate {
	spstc.mutation.SetUpdatedAt(t)
	return spstc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (spstc *ServerPowerSupplyTypeCreate) SetNillableUpdatedAt(t *time.Time) *ServerPowerSupplyTypeCreate {
	if t != nil {
		spstc.SetUpdatedAt(*t)
	}
	return spstc
}

// SetVendor sets the "vendor" field.
func (spstc *ServerPowerSupplyTypeCreate) SetVendor(s string) *ServerPowerSupplyTypeCreate {
	spstc.mutation.SetVendor(s)
	return spstc
}

// SetModel sets the "model" field.
func (spstc *ServerPowerSupplyTypeCreate) SetModel(s string) *ServerPowerSupplyTypeCreate {
	spstc.mutation.SetModel(s)
	return spstc
}

// SetWatts sets the "watts" field.
func (spstc *ServerPowerSupplyTypeCreate) SetWatts(s string) *ServerPowerSupplyTypeCreate {
	spstc.mutation.SetWatts(s)
	return spstc
}

// SetID sets the "id" field.
func (spstc *ServerPowerSupplyTypeCreate) SetID(gi gidx.PrefixedID) *ServerPowerSupplyTypeCreate {
	spstc.mutation.SetID(gi)
	return spstc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (spstc *ServerPowerSupplyTypeCreate) SetNillableID(gi *gidx.PrefixedID) *ServerPowerSupplyTypeCreate {
	if gi != nil {
		spstc.SetID(*gi)
	}
	return spstc
}

// Mutation returns the ServerPowerSupplyTypeMutation object of the builder.
func (spstc *ServerPowerSupplyTypeCreate) Mutation() *ServerPowerSupplyTypeMutation {
	return spstc.mutation
}

// Save creates the ServerPowerSupplyType in the database.
func (spstc *ServerPowerSupplyTypeCreate) Save(ctx context.Context) (*ServerPowerSupplyType, error) {
	spstc.defaults()
	return withHooks(ctx, spstc.sqlSave, spstc.mutation, spstc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (spstc *ServerPowerSupplyTypeCreate) SaveX(ctx context.Context) *ServerPowerSupplyType {
	v, err := spstc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (spstc *ServerPowerSupplyTypeCreate) Exec(ctx context.Context) error {
	_, err := spstc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spstc *ServerPowerSupplyTypeCreate) ExecX(ctx context.Context) {
	if err := spstc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (spstc *ServerPowerSupplyTypeCreate) defaults() {
	if _, ok := spstc.mutation.CreatedAt(); !ok {
		v := serverpowersupplytype.DefaultCreatedAt()
		spstc.mutation.SetCreatedAt(v)
	}
	if _, ok := spstc.mutation.UpdatedAt(); !ok {
		v := serverpowersupplytype.DefaultUpdatedAt()
		spstc.mutation.SetUpdatedAt(v)
	}
	if _, ok := spstc.mutation.ID(); !ok {
		v := serverpowersupplytype.DefaultID()
		spstc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (spstc *ServerPowerSupplyTypeCreate) check() error {
	if _, ok := spstc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "ServerPowerSupplyType.created_at"`)}
	}
	if _, ok := spstc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "ServerPowerSupplyType.updated_at"`)}
	}
	if _, ok := spstc.mutation.Vendor(); !ok {
		return &ValidationError{Name: "vendor", err: errors.New(`generated: missing required field "ServerPowerSupplyType.vendor"`)}
	}
	if v, ok := spstc.mutation.Vendor(); ok {
		if err := serverpowersupplytype.VendorValidator(v); err != nil {
			return &ValidationError{Name: "vendor", err: fmt.Errorf(`generated: validator failed for field "ServerPowerSupplyType.vendor": %w`, err)}
		}
	}
	if _, ok := spstc.mutation.Model(); !ok {
		return &ValidationError{Name: "model", err: errors.New(`generated: missing required field "ServerPowerSupplyType.model"`)}
	}
	if v, ok := spstc.mutation.Model(); ok {
		if err := serverpowersupplytype.ModelValidator(v); err != nil {
			return &ValidationError{Name: "model", err: fmt.Errorf(`generated: validator failed for field "ServerPowerSupplyType.model": %w`, err)}
		}
	}
	if _, ok := spstc.mutation.Watts(); !ok {
		return &ValidationError{Name: "watts", err: errors.New(`generated: missing required field "ServerPowerSupplyType.watts"`)}
	}
	if v, ok := spstc.mutation.Watts(); ok {
		if err := serverpowersupplytype.WattsValidator(v); err != nil {
			return &ValidationError{Name: "watts", err: fmt.Errorf(`generated: validator failed for field "ServerPowerSupplyType.watts": %w`, err)}
		}
	}
	return nil
}

func (spstc *ServerPowerSupplyTypeCreate) sqlSave(ctx context.Context) (*ServerPowerSupplyType, error) {
	if err := spstc.check(); err != nil {
		return nil, err
	}
	_node, _spec := spstc.createSpec()
	if err := sqlgraph.CreateNode(ctx, spstc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*gidx.PrefixedID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	spstc.mutation.id = &_node.ID
	spstc.mutation.done = true
	return _node, nil
}

func (spstc *ServerPowerSupplyTypeCreate) createSpec() (*ServerPowerSupplyType, *sqlgraph.CreateSpec) {
	var (
		_node = &ServerPowerSupplyType{config: spstc.config}
		_spec = sqlgraph.NewCreateSpec(serverpowersupplytype.Table, sqlgraph.NewFieldSpec(serverpowersupplytype.FieldID, field.TypeString))
	)
	if id, ok := spstc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := spstc.mutation.CreatedAt(); ok {
		_spec.SetField(serverpowersupplytype.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := spstc.mutation.UpdatedAt(); ok {
		_spec.SetField(serverpowersupplytype.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := spstc.mutation.Vendor(); ok {
		_spec.SetField(serverpowersupplytype.FieldVendor, field.TypeString, value)
		_node.Vendor = value
	}
	if value, ok := spstc.mutation.Model(); ok {
		_spec.SetField(serverpowersupplytype.FieldModel, field.TypeString, value)
		_node.Model = value
	}
	if value, ok := spstc.mutation.Watts(); ok {
		_spec.SetField(serverpowersupplytype.FieldWatts, field.TypeString, value)
		_node.Watts = value
	}
	return _node, _spec
}

// ServerPowerSupplyTypeCreateBulk is the builder for creating many ServerPowerSupplyType entities in bulk.
type ServerPowerSupplyTypeCreateBulk struct {
	config
	builders []*ServerPowerSupplyTypeCreate
}

// Save creates the ServerPowerSupplyType entities in the database.
func (spstcb *ServerPowerSupplyTypeCreateBulk) Save(ctx context.Context) ([]*ServerPowerSupplyType, error) {
	specs := make([]*sqlgraph.CreateSpec, len(spstcb.builders))
	nodes := make([]*ServerPowerSupplyType, len(spstcb.builders))
	mutators := make([]Mutator, len(spstcb.builders))
	for i := range spstcb.builders {
		func(i int, root context.Context) {
			builder := spstcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ServerPowerSupplyTypeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, spstcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, spstcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, spstcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (spstcb *ServerPowerSupplyTypeCreateBulk) SaveX(ctx context.Context) []*ServerPowerSupplyType {
	v, err := spstcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (spstcb *ServerPowerSupplyTypeCreateBulk) Exec(ctx context.Context) error {
	_, err := spstcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spstcb *ServerPowerSupplyTypeCreateBulk) ExecX(ctx context.Context) {
	if err := spstcb.Exec(ctx); err != nil {
		panic(err)
	}
}
