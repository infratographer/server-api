// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"go.infratographer.com/server-api/internal/ent/generated/predicate"
	"go.infratographer.com/server-api/internal/ent/generated/servernetworkcard"
	"go.infratographer.com/server-api/internal/ent/generated/servernetworkport"
	"go.infratographer.com/x/gidx"
)

// ServerNetworkCardUpdate is the builder for updating ServerNetworkCard entities.
type ServerNetworkCardUpdate struct {
	config
	hooks    []Hook
	mutation *ServerNetworkCardMutation
}

// Where appends a list predicates to the ServerNetworkCardUpdate builder.
func (sncu *ServerNetworkCardUpdate) Where(ps ...predicate.ServerNetworkCard) *ServerNetworkCardUpdate {
	sncu.mutation.Where(ps...)
	return sncu
}

// SetSerial sets the "serial" field.
func (sncu *ServerNetworkCardUpdate) SetSerial(s string) *ServerNetworkCardUpdate {
	sncu.mutation.SetSerial(s)
	return sncu
}

// AddNetworkPortIDs adds the "network_port" edge to the ServerNetworkPort entity by IDs.
func (sncu *ServerNetworkCardUpdate) AddNetworkPortIDs(ids ...gidx.PrefixedID) *ServerNetworkCardUpdate {
	sncu.mutation.AddNetworkPortIDs(ids...)
	return sncu
}

// AddNetworkPort adds the "network_port" edges to the ServerNetworkPort entity.
func (sncu *ServerNetworkCardUpdate) AddNetworkPort(s ...*ServerNetworkPort) *ServerNetworkCardUpdate {
	ids := make([]gidx.PrefixedID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sncu.AddNetworkPortIDs(ids...)
}

// Mutation returns the ServerNetworkCardMutation object of the builder.
func (sncu *ServerNetworkCardUpdate) Mutation() *ServerNetworkCardMutation {
	return sncu.mutation
}

// ClearNetworkPort clears all "network_port" edges to the ServerNetworkPort entity.
func (sncu *ServerNetworkCardUpdate) ClearNetworkPort() *ServerNetworkCardUpdate {
	sncu.mutation.ClearNetworkPort()
	return sncu
}

// RemoveNetworkPortIDs removes the "network_port" edge to ServerNetworkPort entities by IDs.
func (sncu *ServerNetworkCardUpdate) RemoveNetworkPortIDs(ids ...gidx.PrefixedID) *ServerNetworkCardUpdate {
	sncu.mutation.RemoveNetworkPortIDs(ids...)
	return sncu
}

// RemoveNetworkPort removes "network_port" edges to ServerNetworkPort entities.
func (sncu *ServerNetworkCardUpdate) RemoveNetworkPort(s ...*ServerNetworkPort) *ServerNetworkCardUpdate {
	ids := make([]gidx.PrefixedID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sncu.RemoveNetworkPortIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sncu *ServerNetworkCardUpdate) Save(ctx context.Context) (int, error) {
	sncu.defaults()
	return withHooks(ctx, sncu.sqlSave, sncu.mutation, sncu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sncu *ServerNetworkCardUpdate) SaveX(ctx context.Context) int {
	affected, err := sncu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sncu *ServerNetworkCardUpdate) Exec(ctx context.Context) error {
	_, err := sncu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sncu *ServerNetworkCardUpdate) ExecX(ctx context.Context) {
	if err := sncu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sncu *ServerNetworkCardUpdate) defaults() {
	if _, ok := sncu.mutation.UpdatedAt(); !ok {
		v := servernetworkcard.UpdateDefaultUpdatedAt()
		sncu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sncu *ServerNetworkCardUpdate) check() error {
	if v, ok := sncu.mutation.Serial(); ok {
		if err := servernetworkcard.SerialValidator(v); err != nil {
			return &ValidationError{Name: "serial", err: fmt.Errorf(`generated: validator failed for field "ServerNetworkCard.serial": %w`, err)}
		}
	}
	if _, ok := sncu.mutation.NetworkCardTypeID(); sncu.mutation.NetworkCardTypeCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "ServerNetworkCard.network_card_type"`)
	}
	if _, ok := sncu.mutation.ServerID(); sncu.mutation.ServerCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "ServerNetworkCard.server"`)
	}
	return nil
}

func (sncu *ServerNetworkCardUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := sncu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(servernetworkcard.Table, servernetworkcard.Columns, sqlgraph.NewFieldSpec(servernetworkcard.FieldID, field.TypeString))
	if ps := sncu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sncu.mutation.UpdatedAt(); ok {
		_spec.SetField(servernetworkcard.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := sncu.mutation.Serial(); ok {
		_spec.SetField(servernetworkcard.FieldSerial, field.TypeString, value)
	}
	if sncu.mutation.NetworkPortCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   servernetworkcard.NetworkPortTable,
			Columns: []string{servernetworkcard.NetworkPortColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servernetworkport.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sncu.mutation.RemovedNetworkPortIDs(); len(nodes) > 0 && !sncu.mutation.NetworkPortCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   servernetworkcard.NetworkPortTable,
			Columns: []string{servernetworkcard.NetworkPortColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servernetworkport.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sncu.mutation.NetworkPortIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   servernetworkcard.NetworkPortTable,
			Columns: []string{servernetworkcard.NetworkPortColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servernetworkport.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sncu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{servernetworkcard.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sncu.mutation.done = true
	return n, nil
}

// ServerNetworkCardUpdateOne is the builder for updating a single ServerNetworkCard entity.
type ServerNetworkCardUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ServerNetworkCardMutation
}

// SetSerial sets the "serial" field.
func (sncuo *ServerNetworkCardUpdateOne) SetSerial(s string) *ServerNetworkCardUpdateOne {
	sncuo.mutation.SetSerial(s)
	return sncuo
}

// AddNetworkPortIDs adds the "network_port" edge to the ServerNetworkPort entity by IDs.
func (sncuo *ServerNetworkCardUpdateOne) AddNetworkPortIDs(ids ...gidx.PrefixedID) *ServerNetworkCardUpdateOne {
	sncuo.mutation.AddNetworkPortIDs(ids...)
	return sncuo
}

// AddNetworkPort adds the "network_port" edges to the ServerNetworkPort entity.
func (sncuo *ServerNetworkCardUpdateOne) AddNetworkPort(s ...*ServerNetworkPort) *ServerNetworkCardUpdateOne {
	ids := make([]gidx.PrefixedID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sncuo.AddNetworkPortIDs(ids...)
}

// Mutation returns the ServerNetworkCardMutation object of the builder.
func (sncuo *ServerNetworkCardUpdateOne) Mutation() *ServerNetworkCardMutation {
	return sncuo.mutation
}

// ClearNetworkPort clears all "network_port" edges to the ServerNetworkPort entity.
func (sncuo *ServerNetworkCardUpdateOne) ClearNetworkPort() *ServerNetworkCardUpdateOne {
	sncuo.mutation.ClearNetworkPort()
	return sncuo
}

// RemoveNetworkPortIDs removes the "network_port" edge to ServerNetworkPort entities by IDs.
func (sncuo *ServerNetworkCardUpdateOne) RemoveNetworkPortIDs(ids ...gidx.PrefixedID) *ServerNetworkCardUpdateOne {
	sncuo.mutation.RemoveNetworkPortIDs(ids...)
	return sncuo
}

// RemoveNetworkPort removes "network_port" edges to ServerNetworkPort entities.
func (sncuo *ServerNetworkCardUpdateOne) RemoveNetworkPort(s ...*ServerNetworkPort) *ServerNetworkCardUpdateOne {
	ids := make([]gidx.PrefixedID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sncuo.RemoveNetworkPortIDs(ids...)
}

// Where appends a list predicates to the ServerNetworkCardUpdate builder.
func (sncuo *ServerNetworkCardUpdateOne) Where(ps ...predicate.ServerNetworkCard) *ServerNetworkCardUpdateOne {
	sncuo.mutation.Where(ps...)
	return sncuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sncuo *ServerNetworkCardUpdateOne) Select(field string, fields ...string) *ServerNetworkCardUpdateOne {
	sncuo.fields = append([]string{field}, fields...)
	return sncuo
}

// Save executes the query and returns the updated ServerNetworkCard entity.
func (sncuo *ServerNetworkCardUpdateOne) Save(ctx context.Context) (*ServerNetworkCard, error) {
	sncuo.defaults()
	return withHooks(ctx, sncuo.sqlSave, sncuo.mutation, sncuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sncuo *ServerNetworkCardUpdateOne) SaveX(ctx context.Context) *ServerNetworkCard {
	node, err := sncuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sncuo *ServerNetworkCardUpdateOne) Exec(ctx context.Context) error {
	_, err := sncuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sncuo *ServerNetworkCardUpdateOne) ExecX(ctx context.Context) {
	if err := sncuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sncuo *ServerNetworkCardUpdateOne) defaults() {
	if _, ok := sncuo.mutation.UpdatedAt(); !ok {
		v := servernetworkcard.UpdateDefaultUpdatedAt()
		sncuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sncuo *ServerNetworkCardUpdateOne) check() error {
	if v, ok := sncuo.mutation.Serial(); ok {
		if err := servernetworkcard.SerialValidator(v); err != nil {
			return &ValidationError{Name: "serial", err: fmt.Errorf(`generated: validator failed for field "ServerNetworkCard.serial": %w`, err)}
		}
	}
	if _, ok := sncuo.mutation.NetworkCardTypeID(); sncuo.mutation.NetworkCardTypeCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "ServerNetworkCard.network_card_type"`)
	}
	if _, ok := sncuo.mutation.ServerID(); sncuo.mutation.ServerCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "ServerNetworkCard.server"`)
	}
	return nil
}

func (sncuo *ServerNetworkCardUpdateOne) sqlSave(ctx context.Context) (_node *ServerNetworkCard, err error) {
	if err := sncuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(servernetworkcard.Table, servernetworkcard.Columns, sqlgraph.NewFieldSpec(servernetworkcard.FieldID, field.TypeString))
	id, ok := sncuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "ServerNetworkCard.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sncuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, servernetworkcard.FieldID)
		for _, f := range fields {
			if !servernetworkcard.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != servernetworkcard.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sncuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sncuo.mutation.UpdatedAt(); ok {
		_spec.SetField(servernetworkcard.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := sncuo.mutation.Serial(); ok {
		_spec.SetField(servernetworkcard.FieldSerial, field.TypeString, value)
	}
	if sncuo.mutation.NetworkPortCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   servernetworkcard.NetworkPortTable,
			Columns: []string{servernetworkcard.NetworkPortColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servernetworkport.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sncuo.mutation.RemovedNetworkPortIDs(); len(nodes) > 0 && !sncuo.mutation.NetworkPortCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   servernetworkcard.NetworkPortTable,
			Columns: []string{servernetworkcard.NetworkPortColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servernetworkport.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sncuo.mutation.NetworkPortIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   servernetworkcard.NetworkPortTable,
			Columns: []string{servernetworkcard.NetworkPortColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servernetworkport.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ServerNetworkCard{config: sncuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sncuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{servernetworkcard.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sncuo.mutation.done = true
	return _node, nil
}
