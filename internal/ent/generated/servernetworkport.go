// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"go.infratographer.com/server-api/internal/ent/generated/servernetworkcard"
	"go.infratographer.com/server-api/internal/ent/generated/servernetworkport"
	"go.infratographer.com/x/gidx"
)

// Representation of a server network card type. ServerNetworkPort describes the available network card types for a server.
type ServerNetworkPort struct {
	config `json:"-"`
	// ID of the ent.
	// The ID of the server network card type.
	ID gidx.PrefixedID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// The mac address for the server network port.
	MACAddress string `json:"mac_address,omitempty"`
	// The ID for the server network card of this server network port.
	NetworkCardID gidx.PrefixedID `json:"network_card_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ServerNetworkPortQuery when eager-loading is set.
	Edges        ServerNetworkPortEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ServerNetworkPortEdges holds the relations/edges for other nodes in the graph.
type ServerNetworkPortEdges struct {
	// NetworkCard holds the value of the network_card edge.
	NetworkCard *ServerNetworkCard `json:"network_card,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// NetworkCardOrErr returns the NetworkCard value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ServerNetworkPortEdges) NetworkCardOrErr() (*ServerNetworkCard, error) {
	if e.loadedTypes[0] {
		if e.NetworkCard == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: servernetworkcard.Label}
		}
		return e.NetworkCard, nil
	}
	return nil, &NotLoadedError{edge: "network_card"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ServerNetworkPort) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case servernetworkport.FieldID, servernetworkport.FieldNetworkCardID:
			values[i] = new(gidx.PrefixedID)
		case servernetworkport.FieldMACAddress:
			values[i] = new(sql.NullString)
		case servernetworkport.FieldCreatedAt, servernetworkport.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ServerNetworkPort fields.
func (snp *ServerNetworkPort) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case servernetworkport.FieldID:
			if value, ok := values[i].(*gidx.PrefixedID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				snp.ID = *value
			}
		case servernetworkport.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				snp.CreatedAt = value.Time
			}
		case servernetworkport.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				snp.UpdatedAt = value.Time
			}
		case servernetworkport.FieldMACAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mac_address", values[i])
			} else if value.Valid {
				snp.MACAddress = value.String
			}
		case servernetworkport.FieldNetworkCardID:
			if value, ok := values[i].(*gidx.PrefixedID); !ok {
				return fmt.Errorf("unexpected type %T for field network_card_id", values[i])
			} else if value != nil {
				snp.NetworkCardID = *value
			}
		default:
			snp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ServerNetworkPort.
// This includes values selected through modifiers, order, etc.
func (snp *ServerNetworkPort) Value(name string) (ent.Value, error) {
	return snp.selectValues.Get(name)
}

// QueryNetworkCard queries the "network_card" edge of the ServerNetworkPort entity.
func (snp *ServerNetworkPort) QueryNetworkCard() *ServerNetworkCardQuery {
	return NewServerNetworkPortClient(snp.config).QueryNetworkCard(snp)
}

// Update returns a builder for updating this ServerNetworkPort.
// Note that you need to call ServerNetworkPort.Unwrap() before calling this method if this ServerNetworkPort
// was returned from a transaction, and the transaction was committed or rolled back.
func (snp *ServerNetworkPort) Update() *ServerNetworkPortUpdateOne {
	return NewServerNetworkPortClient(snp.config).UpdateOne(snp)
}

// Unwrap unwraps the ServerNetworkPort entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (snp *ServerNetworkPort) Unwrap() *ServerNetworkPort {
	_tx, ok := snp.config.driver.(*txDriver)
	if !ok {
		panic("generated: ServerNetworkPort is not a transactional entity")
	}
	snp.config.driver = _tx.drv
	return snp
}

// String implements the fmt.Stringer.
func (snp *ServerNetworkPort) String() string {
	var builder strings.Builder
	builder.WriteString("ServerNetworkPort(")
	builder.WriteString(fmt.Sprintf("id=%v, ", snp.ID))
	builder.WriteString("created_at=")
	builder.WriteString(snp.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(snp.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("mac_address=")
	builder.WriteString(snp.MACAddress)
	builder.WriteString(", ")
	builder.WriteString("network_card_id=")
	builder.WriteString(fmt.Sprintf("%v", snp.NetworkCardID))
	builder.WriteByte(')')
	return builder.String()
}

// IsEntity implement fedruntime.Entity
func (snp ServerNetworkPort) IsEntity() {}

// ServerNetworkPorts is a parsable slice of ServerNetworkPort.
type ServerNetworkPorts []*ServerNetworkPort
