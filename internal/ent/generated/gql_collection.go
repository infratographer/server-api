// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package generated

import (
	"context"
	"database/sql/driver"
	"fmt"

	"entgo.io/contrib/entgql"
	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"go.infratographer.com/server-api/internal/ent/generated/provider"
	"go.infratographer.com/server-api/internal/ent/generated/server"
	"go.infratographer.com/server-api/internal/ent/generated/serverchassistype"
	"go.infratographer.com/server-api/internal/ent/generated/servercomponent"
	"go.infratographer.com/server-api/internal/ent/generated/servercomponenttype"
	"go.infratographer.com/server-api/internal/ent/generated/servertype"
	"go.infratographer.com/x/gidx"
)

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (pr *ProviderQuery) CollectFields(ctx context.Context, satisfies ...string) (*ProviderQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return pr, nil
	}
	if err := pr.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return pr, nil
}

func (pr *ProviderQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(provider.Columns))
		selectedFields = []string{provider.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "servers":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ServerClient{config: pr.config}).Query()
			)
			args := newServerPaginateArgs(fieldArgs(ctx, new(ServerWhereInput), path...))
			if err := validateFirstLast(args.first, args.last); err != nil {
				return fmt.Errorf("validate first and last in path %q: %w", path, err)
			}
			pager, err := newServerPager(args.opts, args.last != nil)
			if err != nil {
				return fmt.Errorf("create new pager in path %q: %w", path, err)
			}
			if query, err = pager.applyFilter(query); err != nil {
				return err
			}
			ignoredEdges := !hasCollectedField(ctx, append(path, edgesField)...)
			if hasCollectedField(ctx, append(path, totalCountField)...) || hasCollectedField(ctx, append(path, pageInfoField)...) {
				hasPagination := args.after != nil || args.first != nil || args.before != nil || args.last != nil
				if hasPagination || ignoredEdges {
					query := query.Clone()
					pr.loadTotal = append(pr.loadTotal, func(ctx context.Context, nodes []*Provider) error {
						ids := make([]driver.Value, len(nodes))
						for i := range nodes {
							ids[i] = nodes[i].ID
						}
						var v []struct {
							NodeID gidx.PrefixedID `sql:"provider_id"`
							Count  int             `sql:"count"`
						}
						query.Where(func(s *sql.Selector) {
							s.Where(sql.InValues(s.C(provider.ServersColumn), ids...))
						})
						if err := query.GroupBy(provider.ServersColumn).Aggregate(Count()).Scan(ctx, &v); err != nil {
							return err
						}
						m := make(map[gidx.PrefixedID]int, len(v))
						for i := range v {
							m[v[i].NodeID] = v[i].Count
						}
						for i := range nodes {
							n := m[nodes[i].ID]
							if nodes[i].Edges.totalCount[0] == nil {
								nodes[i].Edges.totalCount[0] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[0][alias] = n
						}
						return nil
					})
				} else {
					pr.loadTotal = append(pr.loadTotal, func(_ context.Context, nodes []*Provider) error {
						for i := range nodes {
							n := len(nodes[i].Edges.Servers)
							if nodes[i].Edges.totalCount[0] == nil {
								nodes[i].Edges.totalCount[0] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[0][alias] = n
						}
						return nil
					})
				}
			}
			if ignoredEdges || (args.first != nil && *args.first == 0) || (args.last != nil && *args.last == 0) {
				continue
			}
			if query, err = pager.applyCursors(query, args.after, args.before); err != nil {
				return err
			}
			path = append(path, edgesField, nodeField)
			if field := collectedField(ctx, path...); field != nil {
				if err := query.collectField(ctx, opCtx, *field, path, mayAddCondition(satisfies, "Server")...); err != nil {
					return err
				}
			}
			if limit := paginateLimit(args.first, args.last); limit > 0 {
				modify := limitRows(provider.ServersColumn, limit, pager.orderExpr(query))
				query.modifiers = append(query.modifiers, modify)
			} else {
				query = pager.applyOrder(query)
			}
			pr.WithNamedServers(alias, func(wq *ServerQuery) {
				*wq = *query
			})
		case "createdAt":
			if _, ok := fieldSeen[provider.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, provider.FieldCreatedAt)
				fieldSeen[provider.FieldCreatedAt] = struct{}{}
			}
		case "updatedAt":
			if _, ok := fieldSeen[provider.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, provider.FieldUpdatedAt)
				fieldSeen[provider.FieldUpdatedAt] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[provider.FieldName]; !ok {
				selectedFields = append(selectedFields, provider.FieldName)
				fieldSeen[provider.FieldName] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		pr.Select(selectedFields...)
	}
	return nil
}

type serverproviderPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []ServerProviderPaginateOption
}

func newServerProviderPaginateArgs(rv map[string]any) *serverproviderPaginateArgs {
	args := &serverproviderPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]any:
			var (
				err1, err2 error
				order      = &ServerProviderOrder{Field: &ServerProviderOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithServerProviderOrder(order))
			}
		case *ServerProviderOrder:
			if v != nil {
				args.opts = append(args.opts, WithServerProviderOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*ServerProviderWhereInput); ok {
		args.opts = append(args.opts, WithServerProviderFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (s *ServerQuery) CollectFields(ctx context.Context, satisfies ...string) (*ServerQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return s, nil
	}
	if err := s.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return s, nil
}

func (s *ServerQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(server.Columns))
		selectedFields = []string{server.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "serverProvider":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ProviderClient{config: s.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			s.withProvider = query
			if _, ok := fieldSeen[server.FieldProviderID]; !ok {
				selectedFields = append(selectedFields, server.FieldProviderID)
				fieldSeen[server.FieldProviderID] = struct{}{}
			}
		case "serverType":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ServerTypeClient{config: s.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			s.withServerType = query
			if _, ok := fieldSeen[server.FieldServerTypeID]; !ok {
				selectedFields = append(selectedFields, server.FieldServerTypeID)
				fieldSeen[server.FieldServerTypeID] = struct{}{}
			}
		case "components":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ServerComponentClient{config: s.config}).Query()
			)
			args := newServerComponentPaginateArgs(fieldArgs(ctx, new(ServerComponentWhereInput), path...))
			if err := validateFirstLast(args.first, args.last); err != nil {
				return fmt.Errorf("validate first and last in path %q: %w", path, err)
			}
			pager, err := newServerComponentPager(args.opts, args.last != nil)
			if err != nil {
				return fmt.Errorf("create new pager in path %q: %w", path, err)
			}
			if query, err = pager.applyFilter(query); err != nil {
				return err
			}
			ignoredEdges := !hasCollectedField(ctx, append(path, edgesField)...)
			if hasCollectedField(ctx, append(path, totalCountField)...) || hasCollectedField(ctx, append(path, pageInfoField)...) {
				hasPagination := args.after != nil || args.first != nil || args.before != nil || args.last != nil
				if hasPagination || ignoredEdges {
					query := query.Clone()
					s.loadTotal = append(s.loadTotal, func(ctx context.Context, nodes []*Server) error {
						ids := make([]driver.Value, len(nodes))
						for i := range nodes {
							ids[i] = nodes[i].ID
						}
						var v []struct {
							NodeID gidx.PrefixedID `sql:"server_id"`
							Count  int             `sql:"count"`
						}
						query.Where(func(s *sql.Selector) {
							s.Where(sql.InValues(s.C(server.ComponentsColumn), ids...))
						})
						if err := query.GroupBy(server.ComponentsColumn).Aggregate(Count()).Scan(ctx, &v); err != nil {
							return err
						}
						m := make(map[gidx.PrefixedID]int, len(v))
						for i := range v {
							m[v[i].NodeID] = v[i].Count
						}
						for i := range nodes {
							n := m[nodes[i].ID]
							if nodes[i].Edges.totalCount[2] == nil {
								nodes[i].Edges.totalCount[2] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[2][alias] = n
						}
						return nil
					})
				} else {
					s.loadTotal = append(s.loadTotal, func(_ context.Context, nodes []*Server) error {
						for i := range nodes {
							n := len(nodes[i].Edges.Components)
							if nodes[i].Edges.totalCount[2] == nil {
								nodes[i].Edges.totalCount[2] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[2][alias] = n
						}
						return nil
					})
				}
			}
			if ignoredEdges || (args.first != nil && *args.first == 0) || (args.last != nil && *args.last == 0) {
				continue
			}
			if query, err = pager.applyCursors(query, args.after, args.before); err != nil {
				return err
			}
			path = append(path, edgesField, nodeField)
			if field := collectedField(ctx, path...); field != nil {
				if err := query.collectField(ctx, opCtx, *field, path, mayAddCondition(satisfies, "ServerComponent")...); err != nil {
					return err
				}
			}
			if limit := paginateLimit(args.first, args.last); limit > 0 {
				modify := limitRows(server.ComponentsColumn, limit, pager.orderExpr(query))
				query.modifiers = append(query.modifiers, modify)
			} else {
				query = pager.applyOrder(query)
			}
			s.WithNamedComponents(alias, func(wq *ServerComponentQuery) {
				*wq = *query
			})
		case "createdAt":
			if _, ok := fieldSeen[server.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, server.FieldCreatedAt)
				fieldSeen[server.FieldCreatedAt] = struct{}{}
			}
		case "updatedAt":
			if _, ok := fieldSeen[server.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, server.FieldUpdatedAt)
				fieldSeen[server.FieldUpdatedAt] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[server.FieldName]; !ok {
				selectedFields = append(selectedFields, server.FieldName)
				fieldSeen[server.FieldName] = struct{}{}
			}
		case "description":
			if _, ok := fieldSeen[server.FieldDescription]; !ok {
				selectedFields = append(selectedFields, server.FieldDescription)
				fieldSeen[server.FieldDescription] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		s.Select(selectedFields...)
	}
	return nil
}

type serverPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []ServerPaginateOption
}

func newServerPaginateArgs(rv map[string]any) *serverPaginateArgs {
	args := &serverPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]any:
			var (
				err1, err2 error
				order      = &ServerOrder{Field: &ServerOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithServerOrder(order))
			}
		case *ServerOrder:
			if v != nil {
				args.opts = append(args.opts, WithServerOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*ServerWhereInput); ok {
		args.opts = append(args.opts, WithServerFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (sct *ServerChassisTypeQuery) CollectFields(ctx context.Context, satisfies ...string) (*ServerChassisTypeQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return sct, nil
	}
	if err := sct.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return sct, nil
}

func (sct *ServerChassisTypeQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(serverchassistype.Columns))
		selectedFields = []string{serverchassistype.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "createdAt":
			if _, ok := fieldSeen[serverchassistype.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, serverchassistype.FieldCreatedAt)
				fieldSeen[serverchassistype.FieldCreatedAt] = struct{}{}
			}
		case "updatedAt":
			if _, ok := fieldSeen[serverchassistype.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, serverchassistype.FieldUpdatedAt)
				fieldSeen[serverchassistype.FieldUpdatedAt] = struct{}{}
			}
		case "vendor":
			if _, ok := fieldSeen[serverchassistype.FieldVendor]; !ok {
				selectedFields = append(selectedFields, serverchassistype.FieldVendor)
				fieldSeen[serverchassistype.FieldVendor] = struct{}{}
			}
		case "model":
			if _, ok := fieldSeen[serverchassistype.FieldModel]; !ok {
				selectedFields = append(selectedFields, serverchassistype.FieldModel)
				fieldSeen[serverchassistype.FieldModel] = struct{}{}
			}
		case "height":
			if _, ok := fieldSeen[serverchassistype.FieldHeight]; !ok {
				selectedFields = append(selectedFields, serverchassistype.FieldHeight)
				fieldSeen[serverchassistype.FieldHeight] = struct{}{}
			}
		case "isFullDepth":
			if _, ok := fieldSeen[serverchassistype.FieldIsFullDepth]; !ok {
				selectedFields = append(selectedFields, serverchassistype.FieldIsFullDepth)
				fieldSeen[serverchassistype.FieldIsFullDepth] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		sct.Select(selectedFields...)
	}
	return nil
}

type serverchassistypePaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []ServerChassisTypePaginateOption
}

func newServerChassisTypePaginateArgs(rv map[string]any) *serverchassistypePaginateArgs {
	args := &serverchassistypePaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]any:
			var (
				err1, err2 error
				order      = &ServerChassisTypeOrder{Field: &ServerChassisTypeOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithServerChassisTypeOrder(order))
			}
		case *ServerChassisTypeOrder:
			if v != nil {
				args.opts = append(args.opts, WithServerChassisTypeOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*ServerChassisTypeWhereInput); ok {
		args.opts = append(args.opts, WithServerChassisTypeFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (sc *ServerComponentQuery) CollectFields(ctx context.Context, satisfies ...string) (*ServerComponentQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return sc, nil
	}
	if err := sc.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return sc, nil
}

func (sc *ServerComponentQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(servercomponent.Columns))
		selectedFields = []string{servercomponent.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "serverComponentType":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ServerComponentTypeClient{config: sc.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			sc.withComponentType = query
			if _, ok := fieldSeen[servercomponent.FieldComponentTypeID]; !ok {
				selectedFields = append(selectedFields, servercomponent.FieldComponentTypeID)
				fieldSeen[servercomponent.FieldComponentTypeID] = struct{}{}
			}
		case "server":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ServerClient{config: sc.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			sc.withServer = query
			if _, ok := fieldSeen[servercomponent.FieldServerID]; !ok {
				selectedFields = append(selectedFields, servercomponent.FieldServerID)
				fieldSeen[servercomponent.FieldServerID] = struct{}{}
			}
		case "createdAt":
			if _, ok := fieldSeen[servercomponent.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, servercomponent.FieldCreatedAt)
				fieldSeen[servercomponent.FieldCreatedAt] = struct{}{}
			}
		case "updatedAt":
			if _, ok := fieldSeen[servercomponent.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, servercomponent.FieldUpdatedAt)
				fieldSeen[servercomponent.FieldUpdatedAt] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[servercomponent.FieldName]; !ok {
				selectedFields = append(selectedFields, servercomponent.FieldName)
				fieldSeen[servercomponent.FieldName] = struct{}{}
			}
		case "vendor":
			if _, ok := fieldSeen[servercomponent.FieldVendor]; !ok {
				selectedFields = append(selectedFields, servercomponent.FieldVendor)
				fieldSeen[servercomponent.FieldVendor] = struct{}{}
			}
		case "model":
			if _, ok := fieldSeen[servercomponent.FieldModel]; !ok {
				selectedFields = append(selectedFields, servercomponent.FieldModel)
				fieldSeen[servercomponent.FieldModel] = struct{}{}
			}
		case "serial":
			if _, ok := fieldSeen[servercomponent.FieldSerial]; !ok {
				selectedFields = append(selectedFields, servercomponent.FieldSerial)
				fieldSeen[servercomponent.FieldSerial] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		sc.Select(selectedFields...)
	}
	return nil
}

type servercomponentPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []ServerComponentPaginateOption
}

func newServerComponentPaginateArgs(rv map[string]any) *servercomponentPaginateArgs {
	args := &servercomponentPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]any:
			var (
				err1, err2 error
				order      = &ServerComponentOrder{Field: &ServerComponentOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithServerComponentOrder(order))
			}
		case *ServerComponentOrder:
			if v != nil {
				args.opts = append(args.opts, WithServerComponentOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*ServerComponentWhereInput); ok {
		args.opts = append(args.opts, WithServerComponentFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (sct *ServerComponentTypeQuery) CollectFields(ctx context.Context, satisfies ...string) (*ServerComponentTypeQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return sct, nil
	}
	if err := sct.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return sct, nil
}

func (sct *ServerComponentTypeQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(servercomponenttype.Columns))
		selectedFields = []string{servercomponenttype.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "createdAt":
			if _, ok := fieldSeen[servercomponenttype.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, servercomponenttype.FieldCreatedAt)
				fieldSeen[servercomponenttype.FieldCreatedAt] = struct{}{}
			}
		case "updatedAt":
			if _, ok := fieldSeen[servercomponenttype.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, servercomponenttype.FieldUpdatedAt)
				fieldSeen[servercomponenttype.FieldUpdatedAt] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[servercomponenttype.FieldName]; !ok {
				selectedFields = append(selectedFields, servercomponenttype.FieldName)
				fieldSeen[servercomponenttype.FieldName] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		sct.Select(selectedFields...)
	}
	return nil
}

type servercomponenttypePaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []ServerComponentTypePaginateOption
}

func newServerComponentTypePaginateArgs(rv map[string]any) *servercomponenttypePaginateArgs {
	args := &servercomponenttypePaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]any:
			var (
				err1, err2 error
				order      = &ServerComponentTypeOrder{Field: &ServerComponentTypeOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithServerComponentTypeOrder(order))
			}
		case *ServerComponentTypeOrder:
			if v != nil {
				args.opts = append(args.opts, WithServerComponentTypeOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*ServerComponentTypeWhereInput); ok {
		args.opts = append(args.opts, WithServerComponentTypeFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (st *ServerTypeQuery) CollectFields(ctx context.Context, satisfies ...string) (*ServerTypeQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return st, nil
	}
	if err := st.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return st, nil
}

func (st *ServerTypeQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(servertype.Columns))
		selectedFields = []string{servertype.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "servers":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ServerClient{config: st.config}).Query()
			)
			args := newServerPaginateArgs(fieldArgs(ctx, new(ServerWhereInput), path...))
			if err := validateFirstLast(args.first, args.last); err != nil {
				return fmt.Errorf("validate first and last in path %q: %w", path, err)
			}
			pager, err := newServerPager(args.opts, args.last != nil)
			if err != nil {
				return fmt.Errorf("create new pager in path %q: %w", path, err)
			}
			if query, err = pager.applyFilter(query); err != nil {
				return err
			}
			ignoredEdges := !hasCollectedField(ctx, append(path, edgesField)...)
			if hasCollectedField(ctx, append(path, totalCountField)...) || hasCollectedField(ctx, append(path, pageInfoField)...) {
				hasPagination := args.after != nil || args.first != nil || args.before != nil || args.last != nil
				if hasPagination || ignoredEdges {
					query := query.Clone()
					st.loadTotal = append(st.loadTotal, func(ctx context.Context, nodes []*ServerType) error {
						ids := make([]driver.Value, len(nodes))
						for i := range nodes {
							ids[i] = nodes[i].ID
						}
						var v []struct {
							NodeID gidx.PrefixedID `sql:"server_type_id"`
							Count  int             `sql:"count"`
						}
						query.Where(func(s *sql.Selector) {
							s.Where(sql.InValues(s.C(servertype.ServersColumn), ids...))
						})
						if err := query.GroupBy(servertype.ServersColumn).Aggregate(Count()).Scan(ctx, &v); err != nil {
							return err
						}
						m := make(map[gidx.PrefixedID]int, len(v))
						for i := range v {
							m[v[i].NodeID] = v[i].Count
						}
						for i := range nodes {
							n := m[nodes[i].ID]
							if nodes[i].Edges.totalCount[0] == nil {
								nodes[i].Edges.totalCount[0] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[0][alias] = n
						}
						return nil
					})
				} else {
					st.loadTotal = append(st.loadTotal, func(_ context.Context, nodes []*ServerType) error {
						for i := range nodes {
							n := len(nodes[i].Edges.Servers)
							if nodes[i].Edges.totalCount[0] == nil {
								nodes[i].Edges.totalCount[0] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[0][alias] = n
						}
						return nil
					})
				}
			}
			if ignoredEdges || (args.first != nil && *args.first == 0) || (args.last != nil && *args.last == 0) {
				continue
			}
			if query, err = pager.applyCursors(query, args.after, args.before); err != nil {
				return err
			}
			path = append(path, edgesField, nodeField)
			if field := collectedField(ctx, path...); field != nil {
				if err := query.collectField(ctx, opCtx, *field, path, mayAddCondition(satisfies, "Server")...); err != nil {
					return err
				}
			}
			if limit := paginateLimit(args.first, args.last); limit > 0 {
				modify := limitRows(servertype.ServersColumn, limit, pager.orderExpr(query))
				query.modifiers = append(query.modifiers, modify)
			} else {
				query = pager.applyOrder(query)
			}
			st.WithNamedServers(alias, func(wq *ServerQuery) {
				*wq = *query
			})
		case "createdAt":
			if _, ok := fieldSeen[servertype.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, servertype.FieldCreatedAt)
				fieldSeen[servertype.FieldCreatedAt] = struct{}{}
			}
		case "updatedAt":
			if _, ok := fieldSeen[servertype.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, servertype.FieldUpdatedAt)
				fieldSeen[servertype.FieldUpdatedAt] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[servertype.FieldName]; !ok {
				selectedFields = append(selectedFields, servertype.FieldName)
				fieldSeen[servertype.FieldName] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		st.Select(selectedFields...)
	}
	return nil
}

type servertypePaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []ServerTypePaginateOption
}

func newServerTypePaginateArgs(rv map[string]any) *servertypePaginateArgs {
	args := &servertypePaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]any:
			var (
				err1, err2 error
				order      = &ServerTypeOrder{Field: &ServerTypeOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithServerTypeOrder(order))
			}
		case *ServerTypeOrder:
			if v != nil {
				args.opts = append(args.opts, WithServerTypeOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*ServerTypeWhereInput); ok {
		args.opts = append(args.opts, WithServerTypeFilter(v.Filter))
	}
	return args
}

const (
	afterField     = "after"
	firstField     = "first"
	beforeField    = "before"
	lastField      = "last"
	orderByField   = "orderBy"
	directionField = "direction"
	fieldField     = "field"
	whereField     = "where"
)

func fieldArgs(ctx context.Context, whereInput any, path ...string) map[string]any {
	field := collectedField(ctx, path...)
	if field == nil || field.Arguments == nil {
		return nil
	}
	oc := graphql.GetOperationContext(ctx)
	args := field.ArgumentMap(oc.Variables)
	return unmarshalArgs(ctx, whereInput, args)
}

// unmarshalArgs allows extracting the field arguments from their raw representation.
func unmarshalArgs(ctx context.Context, whereInput any, args map[string]any) map[string]any {
	for _, k := range []string{firstField, lastField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		i, err := graphql.UnmarshalInt(v)
		if err == nil {
			args[k] = &i
		}
	}
	for _, k := range []string{beforeField, afterField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		c := &Cursor{}
		if c.UnmarshalGQL(v) == nil {
			args[k] = c
		}
	}
	if v, ok := args[whereField]; ok && whereInput != nil {
		if err := graphql.UnmarshalInputFromContext(ctx, v, whereInput); err == nil {
			args[whereField] = whereInput
		}
	}

	return args
}

func limitRows(partitionBy string, limit int, orderBy ...sql.Querier) func(s *sql.Selector) {
	return func(s *sql.Selector) {
		d := sql.Dialect(s.Dialect())
		s.SetDistinct(false)
		with := d.With("src_query").
			As(s.Clone()).
			With("limited_query").
			As(
				d.Select("*").
					AppendSelectExprAs(
						sql.RowNumber().PartitionBy(partitionBy).OrderExpr(orderBy...),
						"row_number",
					).
					From(d.Table("src_query")),
			)
		t := d.Table("limited_query").As(s.TableName())
		*s = *d.Select(s.UnqualifiedColumns()...).
			From(t).
			Where(sql.LTE(t.C("row_number"), limit)).
			Prefix(with)
	}
}

// mayAddCondition appends another type condition to the satisfies list
// if condition is enabled (Node/Nodes) and it does not exist in the list.
func mayAddCondition(satisfies []string, typeCond string) []string {
	if len(satisfies) == 0 {
		return satisfies
	}
	for _, s := range satisfies {
		if typeCond == s {
			return satisfies
		}
	}
	return append(satisfies, typeCond)
}
