// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"go.infratographer.com/server-api/internal/ent/generated/predicate"
	"go.infratographer.com/server-api/internal/ent/generated/servermemory"
	"go.infratographer.com/server-api/internal/ent/generated/servermemorytype"
	"go.infratographer.com/x/gidx"
)

// ServerMemoryTypeUpdate is the builder for updating ServerMemoryType entities.
type ServerMemoryTypeUpdate struct {
	config
	hooks    []Hook
	mutation *ServerMemoryTypeMutation
}

// Where appends a list predicates to the ServerMemoryTypeUpdate builder.
func (smtu *ServerMemoryTypeUpdate) Where(ps ...predicate.ServerMemoryType) *ServerMemoryTypeUpdate {
	smtu.mutation.Where(ps...)
	return smtu
}

// SetVendor sets the "vendor" field.
func (smtu *ServerMemoryTypeUpdate) SetVendor(s string) *ServerMemoryTypeUpdate {
	smtu.mutation.SetVendor(s)
	return smtu
}

// SetModel sets the "model" field.
func (smtu *ServerMemoryTypeUpdate) SetModel(s string) *ServerMemoryTypeUpdate {
	smtu.mutation.SetModel(s)
	return smtu
}

// SetSpeed sets the "speed" field.
func (smtu *ServerMemoryTypeUpdate) SetSpeed(s string) *ServerMemoryTypeUpdate {
	smtu.mutation.SetSpeed(s)
	return smtu
}

// SetSize sets the "size" field.
func (smtu *ServerMemoryTypeUpdate) SetSize(s string) *ServerMemoryTypeUpdate {
	smtu.mutation.SetSize(s)
	return smtu
}

// AddMemoryIDs adds the "memory" edge to the ServerMemory entity by IDs.
func (smtu *ServerMemoryTypeUpdate) AddMemoryIDs(ids ...gidx.PrefixedID) *ServerMemoryTypeUpdate {
	smtu.mutation.AddMemoryIDs(ids...)
	return smtu
}

// AddMemory adds the "memory" edges to the ServerMemory entity.
func (smtu *ServerMemoryTypeUpdate) AddMemory(s ...*ServerMemory) *ServerMemoryTypeUpdate {
	ids := make([]gidx.PrefixedID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return smtu.AddMemoryIDs(ids...)
}

// Mutation returns the ServerMemoryTypeMutation object of the builder.
func (smtu *ServerMemoryTypeUpdate) Mutation() *ServerMemoryTypeMutation {
	return smtu.mutation
}

// ClearMemory clears all "memory" edges to the ServerMemory entity.
func (smtu *ServerMemoryTypeUpdate) ClearMemory() *ServerMemoryTypeUpdate {
	smtu.mutation.ClearMemory()
	return smtu
}

// RemoveMemoryIDs removes the "memory" edge to ServerMemory entities by IDs.
func (smtu *ServerMemoryTypeUpdate) RemoveMemoryIDs(ids ...gidx.PrefixedID) *ServerMemoryTypeUpdate {
	smtu.mutation.RemoveMemoryIDs(ids...)
	return smtu
}

// RemoveMemory removes "memory" edges to ServerMemory entities.
func (smtu *ServerMemoryTypeUpdate) RemoveMemory(s ...*ServerMemory) *ServerMemoryTypeUpdate {
	ids := make([]gidx.PrefixedID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return smtu.RemoveMemoryIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (smtu *ServerMemoryTypeUpdate) Save(ctx context.Context) (int, error) {
	smtu.defaults()
	return withHooks(ctx, smtu.sqlSave, smtu.mutation, smtu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (smtu *ServerMemoryTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := smtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (smtu *ServerMemoryTypeUpdate) Exec(ctx context.Context) error {
	_, err := smtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smtu *ServerMemoryTypeUpdate) ExecX(ctx context.Context) {
	if err := smtu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (smtu *ServerMemoryTypeUpdate) defaults() {
	if _, ok := smtu.mutation.UpdatedAt(); !ok {
		v := servermemorytype.UpdateDefaultUpdatedAt()
		smtu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (smtu *ServerMemoryTypeUpdate) check() error {
	if v, ok := smtu.mutation.Vendor(); ok {
		if err := servermemorytype.VendorValidator(v); err != nil {
			return &ValidationError{Name: "vendor", err: fmt.Errorf(`generated: validator failed for field "ServerMemoryType.vendor": %w`, err)}
		}
	}
	if v, ok := smtu.mutation.Model(); ok {
		if err := servermemorytype.ModelValidator(v); err != nil {
			return &ValidationError{Name: "model", err: fmt.Errorf(`generated: validator failed for field "ServerMemoryType.model": %w`, err)}
		}
	}
	if v, ok := smtu.mutation.Speed(); ok {
		if err := servermemorytype.SpeedValidator(v); err != nil {
			return &ValidationError{Name: "speed", err: fmt.Errorf(`generated: validator failed for field "ServerMemoryType.speed": %w`, err)}
		}
	}
	if v, ok := smtu.mutation.Size(); ok {
		if err := servermemorytype.SizeValidator(v); err != nil {
			return &ValidationError{Name: "size", err: fmt.Errorf(`generated: validator failed for field "ServerMemoryType.size": %w`, err)}
		}
	}
	return nil
}

func (smtu *ServerMemoryTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := smtu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(servermemorytype.Table, servermemorytype.Columns, sqlgraph.NewFieldSpec(servermemorytype.FieldID, field.TypeString))
	if ps := smtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := smtu.mutation.UpdatedAt(); ok {
		_spec.SetField(servermemorytype.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := smtu.mutation.Vendor(); ok {
		_spec.SetField(servermemorytype.FieldVendor, field.TypeString, value)
	}
	if value, ok := smtu.mutation.Model(); ok {
		_spec.SetField(servermemorytype.FieldModel, field.TypeString, value)
	}
	if value, ok := smtu.mutation.Speed(); ok {
		_spec.SetField(servermemorytype.FieldSpeed, field.TypeString, value)
	}
	if value, ok := smtu.mutation.Size(); ok {
		_spec.SetField(servermemorytype.FieldSize, field.TypeString, value)
	}
	if smtu.mutation.MemoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   servermemorytype.MemoryTable,
			Columns: []string{servermemorytype.MemoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servermemory.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := smtu.mutation.RemovedMemoryIDs(); len(nodes) > 0 && !smtu.mutation.MemoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   servermemorytype.MemoryTable,
			Columns: []string{servermemorytype.MemoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servermemory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := smtu.mutation.MemoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   servermemorytype.MemoryTable,
			Columns: []string{servermemorytype.MemoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servermemory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, smtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{servermemorytype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	smtu.mutation.done = true
	return n, nil
}

// ServerMemoryTypeUpdateOne is the builder for updating a single ServerMemoryType entity.
type ServerMemoryTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ServerMemoryTypeMutation
}

// SetVendor sets the "vendor" field.
func (smtuo *ServerMemoryTypeUpdateOne) SetVendor(s string) *ServerMemoryTypeUpdateOne {
	smtuo.mutation.SetVendor(s)
	return smtuo
}

// SetModel sets the "model" field.
func (smtuo *ServerMemoryTypeUpdateOne) SetModel(s string) *ServerMemoryTypeUpdateOne {
	smtuo.mutation.SetModel(s)
	return smtuo
}

// SetSpeed sets the "speed" field.
func (smtuo *ServerMemoryTypeUpdateOne) SetSpeed(s string) *ServerMemoryTypeUpdateOne {
	smtuo.mutation.SetSpeed(s)
	return smtuo
}

// SetSize sets the "size" field.
func (smtuo *ServerMemoryTypeUpdateOne) SetSize(s string) *ServerMemoryTypeUpdateOne {
	smtuo.mutation.SetSize(s)
	return smtuo
}

// AddMemoryIDs adds the "memory" edge to the ServerMemory entity by IDs.
func (smtuo *ServerMemoryTypeUpdateOne) AddMemoryIDs(ids ...gidx.PrefixedID) *ServerMemoryTypeUpdateOne {
	smtuo.mutation.AddMemoryIDs(ids...)
	return smtuo
}

// AddMemory adds the "memory" edges to the ServerMemory entity.
func (smtuo *ServerMemoryTypeUpdateOne) AddMemory(s ...*ServerMemory) *ServerMemoryTypeUpdateOne {
	ids := make([]gidx.PrefixedID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return smtuo.AddMemoryIDs(ids...)
}

// Mutation returns the ServerMemoryTypeMutation object of the builder.
func (smtuo *ServerMemoryTypeUpdateOne) Mutation() *ServerMemoryTypeMutation {
	return smtuo.mutation
}

// ClearMemory clears all "memory" edges to the ServerMemory entity.
func (smtuo *ServerMemoryTypeUpdateOne) ClearMemory() *ServerMemoryTypeUpdateOne {
	smtuo.mutation.ClearMemory()
	return smtuo
}

// RemoveMemoryIDs removes the "memory" edge to ServerMemory entities by IDs.
func (smtuo *ServerMemoryTypeUpdateOne) RemoveMemoryIDs(ids ...gidx.PrefixedID) *ServerMemoryTypeUpdateOne {
	smtuo.mutation.RemoveMemoryIDs(ids...)
	return smtuo
}

// RemoveMemory removes "memory" edges to ServerMemory entities.
func (smtuo *ServerMemoryTypeUpdateOne) RemoveMemory(s ...*ServerMemory) *ServerMemoryTypeUpdateOne {
	ids := make([]gidx.PrefixedID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return smtuo.RemoveMemoryIDs(ids...)
}

// Where appends a list predicates to the ServerMemoryTypeUpdate builder.
func (smtuo *ServerMemoryTypeUpdateOne) Where(ps ...predicate.ServerMemoryType) *ServerMemoryTypeUpdateOne {
	smtuo.mutation.Where(ps...)
	return smtuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (smtuo *ServerMemoryTypeUpdateOne) Select(field string, fields ...string) *ServerMemoryTypeUpdateOne {
	smtuo.fields = append([]string{field}, fields...)
	return smtuo
}

// Save executes the query and returns the updated ServerMemoryType entity.
func (smtuo *ServerMemoryTypeUpdateOne) Save(ctx context.Context) (*ServerMemoryType, error) {
	smtuo.defaults()
	return withHooks(ctx, smtuo.sqlSave, smtuo.mutation, smtuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (smtuo *ServerMemoryTypeUpdateOne) SaveX(ctx context.Context) *ServerMemoryType {
	node, err := smtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (smtuo *ServerMemoryTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := smtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smtuo *ServerMemoryTypeUpdateOne) ExecX(ctx context.Context) {
	if err := smtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (smtuo *ServerMemoryTypeUpdateOne) defaults() {
	if _, ok := smtuo.mutation.UpdatedAt(); !ok {
		v := servermemorytype.UpdateDefaultUpdatedAt()
		smtuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (smtuo *ServerMemoryTypeUpdateOne) check() error {
	if v, ok := smtuo.mutation.Vendor(); ok {
		if err := servermemorytype.VendorValidator(v); err != nil {
			return &ValidationError{Name: "vendor", err: fmt.Errorf(`generated: validator failed for field "ServerMemoryType.vendor": %w`, err)}
		}
	}
	if v, ok := smtuo.mutation.Model(); ok {
		if err := servermemorytype.ModelValidator(v); err != nil {
			return &ValidationError{Name: "model", err: fmt.Errorf(`generated: validator failed for field "ServerMemoryType.model": %w`, err)}
		}
	}
	if v, ok := smtuo.mutation.Speed(); ok {
		if err := servermemorytype.SpeedValidator(v); err != nil {
			return &ValidationError{Name: "speed", err: fmt.Errorf(`generated: validator failed for field "ServerMemoryType.speed": %w`, err)}
		}
	}
	if v, ok := smtuo.mutation.Size(); ok {
		if err := servermemorytype.SizeValidator(v); err != nil {
			return &ValidationError{Name: "size", err: fmt.Errorf(`generated: validator failed for field "ServerMemoryType.size": %w`, err)}
		}
	}
	return nil
}

func (smtuo *ServerMemoryTypeUpdateOne) sqlSave(ctx context.Context) (_node *ServerMemoryType, err error) {
	if err := smtuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(servermemorytype.Table, servermemorytype.Columns, sqlgraph.NewFieldSpec(servermemorytype.FieldID, field.TypeString))
	id, ok := smtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "ServerMemoryType.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := smtuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, servermemorytype.FieldID)
		for _, f := range fields {
			if !servermemorytype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != servermemorytype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := smtuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := smtuo.mutation.UpdatedAt(); ok {
		_spec.SetField(servermemorytype.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := smtuo.mutation.Vendor(); ok {
		_spec.SetField(servermemorytype.FieldVendor, field.TypeString, value)
	}
	if value, ok := smtuo.mutation.Model(); ok {
		_spec.SetField(servermemorytype.FieldModel, field.TypeString, value)
	}
	if value, ok := smtuo.mutation.Speed(); ok {
		_spec.SetField(servermemorytype.FieldSpeed, field.TypeString, value)
	}
	if value, ok := smtuo.mutation.Size(); ok {
		_spec.SetField(servermemorytype.FieldSize, field.TypeString, value)
	}
	if smtuo.mutation.MemoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   servermemorytype.MemoryTable,
			Columns: []string{servermemorytype.MemoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servermemory.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := smtuo.mutation.RemovedMemoryIDs(); len(nodes) > 0 && !smtuo.mutation.MemoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   servermemorytype.MemoryTable,
			Columns: []string{servermemorytype.MemoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servermemory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := smtuo.mutation.MemoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   servermemorytype.MemoryTable,
			Columns: []string{servermemorytype.MemoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servermemory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ServerMemoryType{config: smtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, smtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{servermemorytype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	smtuo.mutation.done = true
	return _node, nil
}
