// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"go.infratographer.com/server-api/internal/ent/generated/serverharddrive"
	"go.infratographer.com/server-api/internal/ent/generated/serverharddrivetype"
	"go.infratographer.com/x/gidx"
)

// ServerHardDriveTypeCreate is the builder for creating a ServerHardDriveType entity.
type ServerHardDriveTypeCreate struct {
	config
	mutation *ServerHardDriveTypeMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (shdtc *ServerHardDriveTypeCreate) SetCreatedAt(t time.Time) *ServerHardDriveTypeCreate {
	shdtc.mutation.SetCreatedAt(t)
	return shdtc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (shdtc *ServerHardDriveTypeCreate) SetNillableCreatedAt(t *time.Time) *ServerHardDriveTypeCreate {
	if t != nil {
		shdtc.SetCreatedAt(*t)
	}
	return shdtc
}

// SetUpdatedAt sets the "updated_at" field.
func (shdtc *ServerHardDriveTypeCreate) SetUpdatedAt(t time.Time) *ServerHardDriveTypeCreate {
	shdtc.mutation.SetUpdatedAt(t)
	return shdtc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (shdtc *ServerHardDriveTypeCreate) SetNillableUpdatedAt(t *time.Time) *ServerHardDriveTypeCreate {
	if t != nil {
		shdtc.SetUpdatedAt(*t)
	}
	return shdtc
}

// SetVendor sets the "vendor" field.
func (shdtc *ServerHardDriveTypeCreate) SetVendor(s string) *ServerHardDriveTypeCreate {
	shdtc.mutation.SetVendor(s)
	return shdtc
}

// SetModel sets the "model" field.
func (shdtc *ServerHardDriveTypeCreate) SetModel(s string) *ServerHardDriveTypeCreate {
	shdtc.mutation.SetModel(s)
	return shdtc
}

// SetSpeed sets the "speed" field.
func (shdtc *ServerHardDriveTypeCreate) SetSpeed(s string) *ServerHardDriveTypeCreate {
	shdtc.mutation.SetSpeed(s)
	return shdtc
}

// SetType sets the "type" field.
func (shdtc *ServerHardDriveTypeCreate) SetType(s serverharddrivetype.Type) *ServerHardDriveTypeCreate {
	shdtc.mutation.SetType(s)
	return shdtc
}

// SetCapacity sets the "capacity" field.
func (shdtc *ServerHardDriveTypeCreate) SetCapacity(s string) *ServerHardDriveTypeCreate {
	shdtc.mutation.SetCapacity(s)
	return shdtc
}

// SetID sets the "id" field.
func (shdtc *ServerHardDriveTypeCreate) SetID(gi gidx.PrefixedID) *ServerHardDriveTypeCreate {
	shdtc.mutation.SetID(gi)
	return shdtc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (shdtc *ServerHardDriveTypeCreate) SetNillableID(gi *gidx.PrefixedID) *ServerHardDriveTypeCreate {
	if gi != nil {
		shdtc.SetID(*gi)
	}
	return shdtc
}

// AddHardDriveIDs adds the "hard_drive" edge to the ServerHardDrive entity by IDs.
func (shdtc *ServerHardDriveTypeCreate) AddHardDriveIDs(ids ...gidx.PrefixedID) *ServerHardDriveTypeCreate {
	shdtc.mutation.AddHardDriveIDs(ids...)
	return shdtc
}

// AddHardDrive adds the "hard_drive" edges to the ServerHardDrive entity.
func (shdtc *ServerHardDriveTypeCreate) AddHardDrive(s ...*ServerHardDrive) *ServerHardDriveTypeCreate {
	ids := make([]gidx.PrefixedID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return shdtc.AddHardDriveIDs(ids...)
}

// Mutation returns the ServerHardDriveTypeMutation object of the builder.
func (shdtc *ServerHardDriveTypeCreate) Mutation() *ServerHardDriveTypeMutation {
	return shdtc.mutation
}

// Save creates the ServerHardDriveType in the database.
func (shdtc *ServerHardDriveTypeCreate) Save(ctx context.Context) (*ServerHardDriveType, error) {
	shdtc.defaults()
	return withHooks(ctx, shdtc.sqlSave, shdtc.mutation, shdtc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (shdtc *ServerHardDriveTypeCreate) SaveX(ctx context.Context) *ServerHardDriveType {
	v, err := shdtc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (shdtc *ServerHardDriveTypeCreate) Exec(ctx context.Context) error {
	_, err := shdtc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (shdtc *ServerHardDriveTypeCreate) ExecX(ctx context.Context) {
	if err := shdtc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (shdtc *ServerHardDriveTypeCreate) defaults() {
	if _, ok := shdtc.mutation.CreatedAt(); !ok {
		v := serverharddrivetype.DefaultCreatedAt()
		shdtc.mutation.SetCreatedAt(v)
	}
	if _, ok := shdtc.mutation.UpdatedAt(); !ok {
		v := serverharddrivetype.DefaultUpdatedAt()
		shdtc.mutation.SetUpdatedAt(v)
	}
	if _, ok := shdtc.mutation.ID(); !ok {
		v := serverharddrivetype.DefaultID()
		shdtc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (shdtc *ServerHardDriveTypeCreate) check() error {
	if _, ok := shdtc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "ServerHardDriveType.created_at"`)}
	}
	if _, ok := shdtc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "ServerHardDriveType.updated_at"`)}
	}
	if _, ok := shdtc.mutation.Vendor(); !ok {
		return &ValidationError{Name: "vendor", err: errors.New(`generated: missing required field "ServerHardDriveType.vendor"`)}
	}
	if v, ok := shdtc.mutation.Vendor(); ok {
		if err := serverharddrivetype.VendorValidator(v); err != nil {
			return &ValidationError{Name: "vendor", err: fmt.Errorf(`generated: validator failed for field "ServerHardDriveType.vendor": %w`, err)}
		}
	}
	if _, ok := shdtc.mutation.Model(); !ok {
		return &ValidationError{Name: "model", err: errors.New(`generated: missing required field "ServerHardDriveType.model"`)}
	}
	if v, ok := shdtc.mutation.Model(); ok {
		if err := serverharddrivetype.ModelValidator(v); err != nil {
			return &ValidationError{Name: "model", err: fmt.Errorf(`generated: validator failed for field "ServerHardDriveType.model": %w`, err)}
		}
	}
	if _, ok := shdtc.mutation.Speed(); !ok {
		return &ValidationError{Name: "speed", err: errors.New(`generated: missing required field "ServerHardDriveType.speed"`)}
	}
	if v, ok := shdtc.mutation.Speed(); ok {
		if err := serverharddrivetype.SpeedValidator(v); err != nil {
			return &ValidationError{Name: "speed", err: fmt.Errorf(`generated: validator failed for field "ServerHardDriveType.speed": %w`, err)}
		}
	}
	if _, ok := shdtc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`generated: missing required field "ServerHardDriveType.type"`)}
	}
	if v, ok := shdtc.mutation.GetType(); ok {
		if err := serverharddrivetype.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`generated: validator failed for field "ServerHardDriveType.type": %w`, err)}
		}
	}
	if _, ok := shdtc.mutation.Capacity(); !ok {
		return &ValidationError{Name: "capacity", err: errors.New(`generated: missing required field "ServerHardDriveType.capacity"`)}
	}
	if v, ok := shdtc.mutation.Capacity(); ok {
		if err := serverharddrivetype.CapacityValidator(v); err != nil {
			return &ValidationError{Name: "capacity", err: fmt.Errorf(`generated: validator failed for field "ServerHardDriveType.capacity": %w`, err)}
		}
	}
	return nil
}

func (shdtc *ServerHardDriveTypeCreate) sqlSave(ctx context.Context) (*ServerHardDriveType, error) {
	if err := shdtc.check(); err != nil {
		return nil, err
	}
	_node, _spec := shdtc.createSpec()
	if err := sqlgraph.CreateNode(ctx, shdtc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*gidx.PrefixedID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	shdtc.mutation.id = &_node.ID
	shdtc.mutation.done = true
	return _node, nil
}

func (shdtc *ServerHardDriveTypeCreate) createSpec() (*ServerHardDriveType, *sqlgraph.CreateSpec) {
	var (
		_node = &ServerHardDriveType{config: shdtc.config}
		_spec = sqlgraph.NewCreateSpec(serverharddrivetype.Table, sqlgraph.NewFieldSpec(serverharddrivetype.FieldID, field.TypeString))
	)
	if id, ok := shdtc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := shdtc.mutation.CreatedAt(); ok {
		_spec.SetField(serverharddrivetype.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := shdtc.mutation.UpdatedAt(); ok {
		_spec.SetField(serverharddrivetype.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := shdtc.mutation.Vendor(); ok {
		_spec.SetField(serverharddrivetype.FieldVendor, field.TypeString, value)
		_node.Vendor = value
	}
	if value, ok := shdtc.mutation.Model(); ok {
		_spec.SetField(serverharddrivetype.FieldModel, field.TypeString, value)
		_node.Model = value
	}
	if value, ok := shdtc.mutation.Speed(); ok {
		_spec.SetField(serverharddrivetype.FieldSpeed, field.TypeString, value)
		_node.Speed = value
	}
	if value, ok := shdtc.mutation.GetType(); ok {
		_spec.SetField(serverharddrivetype.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := shdtc.mutation.Capacity(); ok {
		_spec.SetField(serverharddrivetype.FieldCapacity, field.TypeString, value)
		_node.Capacity = value
	}
	if nodes := shdtc.mutation.HardDriveIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   serverharddrivetype.HardDriveTable,
			Columns: []string{serverharddrivetype.HardDriveColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serverharddrive.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ServerHardDriveTypeCreateBulk is the builder for creating many ServerHardDriveType entities in bulk.
type ServerHardDriveTypeCreateBulk struct {
	config
	builders []*ServerHardDriveTypeCreate
}

// Save creates the ServerHardDriveType entities in the database.
func (shdtcb *ServerHardDriveTypeCreateBulk) Save(ctx context.Context) ([]*ServerHardDriveType, error) {
	specs := make([]*sqlgraph.CreateSpec, len(shdtcb.builders))
	nodes := make([]*ServerHardDriveType, len(shdtcb.builders))
	mutators := make([]Mutator, len(shdtcb.builders))
	for i := range shdtcb.builders {
		func(i int, root context.Context) {
			builder := shdtcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ServerHardDriveTypeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, shdtcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, shdtcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, shdtcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (shdtcb *ServerHardDriveTypeCreateBulk) SaveX(ctx context.Context) []*ServerHardDriveType {
	v, err := shdtcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (shdtcb *ServerHardDriveTypeCreateBulk) Exec(ctx context.Context) error {
	_, err := shdtcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (shdtcb *ServerHardDriveTypeCreateBulk) ExecX(ctx context.Context) {
	if err := shdtcb.Exec(ctx); err != nil {
		panic(err)
	}
}
