// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"go.infratographer.com/server-api/internal/ent/generated/provider"
	"go.infratographer.com/server-api/internal/ent/generated/server"
	"go.infratographer.com/server-api/internal/ent/generated/servercomponent"
	"go.infratographer.com/server-api/internal/ent/generated/servertype"
	"go.infratographer.com/x/gidx"
)

// ServerCreate is the builder for creating a Server entity.
type ServerCreate struct {
	config
	mutation *ServerMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (sc *ServerCreate) SetCreatedAt(t time.Time) *ServerCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *ServerCreate) SetNillableCreatedAt(t *time.Time) *ServerCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetUpdatedAt sets the "updated_at" field.
func (sc *ServerCreate) SetUpdatedAt(t time.Time) *ServerCreate {
	sc.mutation.SetUpdatedAt(t)
	return sc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sc *ServerCreate) SetNillableUpdatedAt(t *time.Time) *ServerCreate {
	if t != nil {
		sc.SetUpdatedAt(*t)
	}
	return sc
}

// SetName sets the "name" field.
func (sc *ServerCreate) SetName(s string) *ServerCreate {
	sc.mutation.SetName(s)
	return sc
}

// SetDescription sets the "description" field.
func (sc *ServerCreate) SetDescription(s string) *ServerCreate {
	sc.mutation.SetDescription(s)
	return sc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (sc *ServerCreate) SetNillableDescription(s *string) *ServerCreate {
	if s != nil {
		sc.SetDescription(*s)
	}
	return sc
}

// SetOwnerID sets the "owner_id" field.
func (sc *ServerCreate) SetOwnerID(gi gidx.PrefixedID) *ServerCreate {
	sc.mutation.SetOwnerID(gi)
	return sc
}

// SetLocationID sets the "location_id" field.
func (sc *ServerCreate) SetLocationID(gi gidx.PrefixedID) *ServerCreate {
	sc.mutation.SetLocationID(gi)
	return sc
}

// SetProviderID sets the "provider_id" field.
func (sc *ServerCreate) SetProviderID(gi gidx.PrefixedID) *ServerCreate {
	sc.mutation.SetProviderID(gi)
	return sc
}

// SetServerTypeID sets the "server_type_id" field.
func (sc *ServerCreate) SetServerTypeID(gi gidx.PrefixedID) *ServerCreate {
	sc.mutation.SetServerTypeID(gi)
	return sc
}

// SetID sets the "id" field.
func (sc *ServerCreate) SetID(gi gidx.PrefixedID) *ServerCreate {
	sc.mutation.SetID(gi)
	return sc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sc *ServerCreate) SetNillableID(gi *gidx.PrefixedID) *ServerCreate {
	if gi != nil {
		sc.SetID(*gi)
	}
	return sc
}

// SetProvider sets the "provider" edge to the Provider entity.
func (sc *ServerCreate) SetProvider(p *Provider) *ServerCreate {
	return sc.SetProviderID(p.ID)
}

// SetServerType sets the "server_type" edge to the ServerType entity.
func (sc *ServerCreate) SetServerType(s *ServerType) *ServerCreate {
	return sc.SetServerTypeID(s.ID)
}

// AddComponentIDs adds the "components" edge to the ServerComponent entity by IDs.
func (sc *ServerCreate) AddComponentIDs(ids ...gidx.PrefixedID) *ServerCreate {
	sc.mutation.AddComponentIDs(ids...)
	return sc
}

// AddComponents adds the "components" edges to the ServerComponent entity.
func (sc *ServerCreate) AddComponents(s ...*ServerComponent) *ServerCreate {
	ids := make([]gidx.PrefixedID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sc.AddComponentIDs(ids...)
}

// Mutation returns the ServerMutation object of the builder.
func (sc *ServerCreate) Mutation() *ServerMutation {
	return sc.mutation
}

// Save creates the Server in the database.
func (sc *ServerCreate) Save(ctx context.Context) (*Server, error) {
	sc.defaults()
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *ServerCreate) SaveX(ctx context.Context) *Server {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *ServerCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *ServerCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *ServerCreate) defaults() {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		v := server.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		v := server.DefaultUpdatedAt()
		sc.mutation.SetUpdatedAt(v)
	}
	if _, ok := sc.mutation.ID(); !ok {
		v := server.DefaultID()
		sc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *ServerCreate) check() error {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "Server.created_at"`)}
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "Server.updated_at"`)}
	}
	if _, ok := sc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`generated: missing required field "Server.name"`)}
	}
	if v, ok := sc.mutation.Name(); ok {
		if err := server.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "Server.name": %w`, err)}
		}
	}
	if _, ok := sc.mutation.OwnerID(); !ok {
		return &ValidationError{Name: "owner_id", err: errors.New(`generated: missing required field "Server.owner_id"`)}
	}
	if _, ok := sc.mutation.LocationID(); !ok {
		return &ValidationError{Name: "location_id", err: errors.New(`generated: missing required field "Server.location_id"`)}
	}
	if v, ok := sc.mutation.LocationID(); ok {
		if err := server.LocationIDValidator(string(v)); err != nil {
			return &ValidationError{Name: "location_id", err: fmt.Errorf(`generated: validator failed for field "Server.location_id": %w`, err)}
		}
	}
	if _, ok := sc.mutation.ProviderID(); !ok {
		return &ValidationError{Name: "provider_id", err: errors.New(`generated: missing required field "Server.provider_id"`)}
	}
	if v, ok := sc.mutation.ProviderID(); ok {
		if err := server.ProviderIDValidator(string(v)); err != nil {
			return &ValidationError{Name: "provider_id", err: fmt.Errorf(`generated: validator failed for field "Server.provider_id": %w`, err)}
		}
	}
	if _, ok := sc.mutation.ServerTypeID(); !ok {
		return &ValidationError{Name: "server_type_id", err: errors.New(`generated: missing required field "Server.server_type_id"`)}
	}
	if _, ok := sc.mutation.ProviderID(); !ok {
		return &ValidationError{Name: "provider", err: errors.New(`generated: missing required edge "Server.provider"`)}
	}
	if _, ok := sc.mutation.ServerTypeID(); !ok {
		return &ValidationError{Name: "server_type", err: errors.New(`generated: missing required edge "Server.server_type"`)}
	}
	return nil
}

func (sc *ServerCreate) sqlSave(ctx context.Context) (*Server, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*gidx.PrefixedID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *ServerCreate) createSpec() (*Server, *sqlgraph.CreateSpec) {
	var (
		_node = &Server{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(server.Table, sqlgraph.NewFieldSpec(server.FieldID, field.TypeString))
	)
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.SetField(server.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sc.mutation.UpdatedAt(); ok {
		_spec.SetField(server.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := sc.mutation.Name(); ok {
		_spec.SetField(server.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := sc.mutation.Description(); ok {
		_spec.SetField(server.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := sc.mutation.OwnerID(); ok {
		_spec.SetField(server.FieldOwnerID, field.TypeString, value)
		_node.OwnerID = value
	}
	if value, ok := sc.mutation.LocationID(); ok {
		_spec.SetField(server.FieldLocationID, field.TypeString, value)
		_node.LocationID = value
	}
	if nodes := sc.mutation.ProviderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   server.ProviderTable,
			Columns: []string{server.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(provider.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProviderID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.ServerTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   server.ServerTypeTable,
			Columns: []string{server.ServerTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servertype.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ServerTypeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.ComponentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   server.ComponentsTable,
			Columns: []string{server.ComponentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servercomponent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ServerCreateBulk is the builder for creating many Server entities in bulk.
type ServerCreateBulk struct {
	config
	builders []*ServerCreate
}

// Save creates the Server entities in the database.
func (scb *ServerCreateBulk) Save(ctx context.Context) ([]*Server, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Server, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ServerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *ServerCreateBulk) SaveX(ctx context.Context) []*Server {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *ServerCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *ServerCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
