// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package servermemory

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"go.infratographer.com/x/gidx"
)

const (
	// Label holds the string label denoting the servermemory type in the database.
	Label = "server_memory"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldSerial holds the string denoting the serial field in the database.
	FieldSerial = "serial"
	// FieldServerID holds the string denoting the server_id field in the database.
	FieldServerID = "server_id"
	// FieldServerMemoryTypeID holds the string denoting the server_memory_type_id field in the database.
	FieldServerMemoryTypeID = "server_memory_type_id"
	// EdgeServer holds the string denoting the server edge name in mutations.
	EdgeServer = "server"
	// EdgeServerMemoryType holds the string denoting the server_memory_type edge name in mutations.
	EdgeServerMemoryType = "server_memory_type"
	// Table holds the table name of the servermemory in the database.
	Table = "server_memories"
	// ServerTable is the table that holds the server relation/edge.
	ServerTable = "server_memories"
	// ServerInverseTable is the table name for the Server entity.
	// It exists in this package in order to avoid circular dependency with the "server" package.
	ServerInverseTable = "servers"
	// ServerColumn is the table column denoting the server relation/edge.
	ServerColumn = "server_id"
	// ServerMemoryTypeTable is the table that holds the server_memory_type relation/edge.
	ServerMemoryTypeTable = "server_memories"
	// ServerMemoryTypeInverseTable is the table name for the ServerMemoryType entity.
	// It exists in this package in order to avoid circular dependency with the "servermemorytype" package.
	ServerMemoryTypeInverseTable = "server_memory_types"
	// ServerMemoryTypeColumn is the table column denoting the server_memory_type relation/edge.
	ServerMemoryTypeColumn = "server_memory_type_id"
)

// Columns holds all SQL columns for servermemory fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldSerial,
	FieldServerID,
	FieldServerMemoryTypeID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// SerialValidator is a validator for the "serial" field. It is called by the builders before save.
	SerialValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() gidx.PrefixedID
)

// OrderOption defines the ordering options for the ServerMemory queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// BySerial orders the results by the serial field.
func BySerial(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSerial, opts...).ToFunc()
}

// ByServerID orders the results by the server_id field.
func ByServerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldServerID, opts...).ToFunc()
}

// ByServerMemoryTypeID orders the results by the server_memory_type_id field.
func ByServerMemoryTypeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldServerMemoryTypeID, opts...).ToFunc()
}

// ByServerField orders the results by server field.
func ByServerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newServerStep(), sql.OrderByField(field, opts...))
	}
}

// ByServerMemoryTypeField orders the results by server_memory_type field.
func ByServerMemoryTypeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newServerMemoryTypeStep(), sql.OrderByField(field, opts...))
	}
}
func newServerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ServerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ServerTable, ServerColumn),
	)
}
func newServerMemoryTypeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ServerMemoryTypeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ServerMemoryTypeTable, ServerMemoryTypeColumn),
	)
}
