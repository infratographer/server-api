// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package intercept

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"go.infratographer.com/server-api/internal/ent/generated"
	"go.infratographer.com/server-api/internal/ent/generated/predicate"
	"go.infratographer.com/server-api/internal/ent/generated/provider"
	"go.infratographer.com/server-api/internal/ent/generated/server"
	"go.infratographer.com/server-api/internal/ent/generated/serverchassis"
	"go.infratographer.com/server-api/internal/ent/generated/serverchassistype"
	"go.infratographer.com/server-api/internal/ent/generated/servercomponent"
	"go.infratographer.com/server-api/internal/ent/generated/servercomponenttype"
	"go.infratographer.com/server-api/internal/ent/generated/servercpu"
	"go.infratographer.com/server-api/internal/ent/generated/servercputype"
	"go.infratographer.com/server-api/internal/ent/generated/serverharddrive"
	"go.infratographer.com/server-api/internal/ent/generated/serverharddrivetype"
	"go.infratographer.com/server-api/internal/ent/generated/servermemory"
	"go.infratographer.com/server-api/internal/ent/generated/servermemorytype"
	"go.infratographer.com/server-api/internal/ent/generated/servermotherboard"
	"go.infratographer.com/server-api/internal/ent/generated/servermotherboardtype"
	"go.infratographer.com/server-api/internal/ent/generated/servernetworkcard"
	"go.infratographer.com/server-api/internal/ent/generated/servernetworkcardtype"
	"go.infratographer.com/server-api/internal/ent/generated/servernetworkport"
	"go.infratographer.com/server-api/internal/ent/generated/serverpowersupply"
	"go.infratographer.com/server-api/internal/ent/generated/serverpowersupplytype"
	"go.infratographer.com/server-api/internal/ent/generated/servertype"
)

// The Query interface represents an operation that queries a graph.
// By using this interface, users can write generic code that manipulates
// query builders of different types.
type Query interface {
	// Type returns the string representation of the query type.
	Type() string
	// Limit the number of records to be returned by this query.
	Limit(int)
	// Offset to start from.
	Offset(int)
	// Unique configures the query builder to filter duplicate records.
	Unique(bool)
	// Order specifies how the records should be ordered.
	Order(...func(*sql.Selector))
	// WhereP appends storage-level predicates to the query builder. Using this method, users
	// can use type-assertion to append predicates that do not depend on any generated package.
	WhereP(...func(*sql.Selector))
}

// The Func type is an adapter that allows ordinary functions to be used as interceptors.
// Unlike traversal functions, interceptors are skipped during graph traversals. Note that the
// implementation of Func is different from the one defined in entgo.io/ent.InterceptFunc.
type Func func(context.Context, Query) error

// Intercept calls f(ctx, q) and then applied the next Querier.
func (f Func) Intercept(next generated.Querier) generated.Querier {
	return generated.QuerierFunc(func(ctx context.Context, q generated.Query) (generated.Value, error) {
		query, err := NewQuery(q)
		if err != nil {
			return nil, err
		}
		if err := f(ctx, query); err != nil {
			return nil, err
		}
		return next.Query(ctx, q)
	})
}

// The TraverseFunc type is an adapter to allow the use of ordinary function as Traverser.
// If f is a function with the appropriate signature, TraverseFunc(f) is a Traverser that calls f.
type TraverseFunc func(context.Context, Query) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseFunc) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseFunc) Traverse(ctx context.Context, q generated.Query) error {
	query, err := NewQuery(q)
	if err != nil {
		return err
	}
	return f(ctx, query)
}

// The ProviderFunc type is an adapter to allow the use of ordinary function as a Querier.
type ProviderFunc func(context.Context, *generated.ProviderQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f ProviderFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.ProviderQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.ProviderQuery", q)
}

// The TraverseProvider type is an adapter to allow the use of ordinary function as Traverser.
type TraverseProvider func(context.Context, *generated.ProviderQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseProvider) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseProvider) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.ProviderQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.ProviderQuery", q)
}

// The ServerFunc type is an adapter to allow the use of ordinary function as a Querier.
type ServerFunc func(context.Context, *generated.ServerQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f ServerFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.ServerQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.ServerQuery", q)
}

// The TraverseServer type is an adapter to allow the use of ordinary function as Traverser.
type TraverseServer func(context.Context, *generated.ServerQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseServer) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseServer) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.ServerQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.ServerQuery", q)
}

// The ServerCPUFunc type is an adapter to allow the use of ordinary function as a Querier.
type ServerCPUFunc func(context.Context, *generated.ServerCPUQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f ServerCPUFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.ServerCPUQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.ServerCPUQuery", q)
}

// The TraverseServerCPU type is an adapter to allow the use of ordinary function as Traverser.
type TraverseServerCPU func(context.Context, *generated.ServerCPUQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseServerCPU) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseServerCPU) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.ServerCPUQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.ServerCPUQuery", q)
}

// The ServerCPUTypeFunc type is an adapter to allow the use of ordinary function as a Querier.
type ServerCPUTypeFunc func(context.Context, *generated.ServerCPUTypeQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f ServerCPUTypeFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.ServerCPUTypeQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.ServerCPUTypeQuery", q)
}

// The TraverseServerCPUType type is an adapter to allow the use of ordinary function as Traverser.
type TraverseServerCPUType func(context.Context, *generated.ServerCPUTypeQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseServerCPUType) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseServerCPUType) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.ServerCPUTypeQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.ServerCPUTypeQuery", q)
}

// The ServerChassisFunc type is an adapter to allow the use of ordinary function as a Querier.
type ServerChassisFunc func(context.Context, *generated.ServerChassisQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f ServerChassisFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.ServerChassisQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.ServerChassisQuery", q)
}

// The TraverseServerChassis type is an adapter to allow the use of ordinary function as Traverser.
type TraverseServerChassis func(context.Context, *generated.ServerChassisQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseServerChassis) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseServerChassis) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.ServerChassisQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.ServerChassisQuery", q)
}

// The ServerChassisTypeFunc type is an adapter to allow the use of ordinary function as a Querier.
type ServerChassisTypeFunc func(context.Context, *generated.ServerChassisTypeQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f ServerChassisTypeFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.ServerChassisTypeQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.ServerChassisTypeQuery", q)
}

// The TraverseServerChassisType type is an adapter to allow the use of ordinary function as Traverser.
type TraverseServerChassisType func(context.Context, *generated.ServerChassisTypeQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseServerChassisType) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseServerChassisType) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.ServerChassisTypeQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.ServerChassisTypeQuery", q)
}

// The ServerComponentFunc type is an adapter to allow the use of ordinary function as a Querier.
type ServerComponentFunc func(context.Context, *generated.ServerComponentQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f ServerComponentFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.ServerComponentQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.ServerComponentQuery", q)
}

// The TraverseServerComponent type is an adapter to allow the use of ordinary function as Traverser.
type TraverseServerComponent func(context.Context, *generated.ServerComponentQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseServerComponent) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseServerComponent) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.ServerComponentQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.ServerComponentQuery", q)
}

// The ServerComponentTypeFunc type is an adapter to allow the use of ordinary function as a Querier.
type ServerComponentTypeFunc func(context.Context, *generated.ServerComponentTypeQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f ServerComponentTypeFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.ServerComponentTypeQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.ServerComponentTypeQuery", q)
}

// The TraverseServerComponentType type is an adapter to allow the use of ordinary function as Traverser.
type TraverseServerComponentType func(context.Context, *generated.ServerComponentTypeQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseServerComponentType) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseServerComponentType) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.ServerComponentTypeQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.ServerComponentTypeQuery", q)
}

// The ServerHardDriveFunc type is an adapter to allow the use of ordinary function as a Querier.
type ServerHardDriveFunc func(context.Context, *generated.ServerHardDriveQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f ServerHardDriveFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.ServerHardDriveQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.ServerHardDriveQuery", q)
}

// The TraverseServerHardDrive type is an adapter to allow the use of ordinary function as Traverser.
type TraverseServerHardDrive func(context.Context, *generated.ServerHardDriveQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseServerHardDrive) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseServerHardDrive) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.ServerHardDriveQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.ServerHardDriveQuery", q)
}

// The ServerHardDriveTypeFunc type is an adapter to allow the use of ordinary function as a Querier.
type ServerHardDriveTypeFunc func(context.Context, *generated.ServerHardDriveTypeQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f ServerHardDriveTypeFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.ServerHardDriveTypeQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.ServerHardDriveTypeQuery", q)
}

// The TraverseServerHardDriveType type is an adapter to allow the use of ordinary function as Traverser.
type TraverseServerHardDriveType func(context.Context, *generated.ServerHardDriveTypeQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseServerHardDriveType) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseServerHardDriveType) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.ServerHardDriveTypeQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.ServerHardDriveTypeQuery", q)
}

// The ServerMemoryFunc type is an adapter to allow the use of ordinary function as a Querier.
type ServerMemoryFunc func(context.Context, *generated.ServerMemoryQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f ServerMemoryFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.ServerMemoryQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.ServerMemoryQuery", q)
}

// The TraverseServerMemory type is an adapter to allow the use of ordinary function as Traverser.
type TraverseServerMemory func(context.Context, *generated.ServerMemoryQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseServerMemory) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseServerMemory) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.ServerMemoryQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.ServerMemoryQuery", q)
}

// The ServerMemoryTypeFunc type is an adapter to allow the use of ordinary function as a Querier.
type ServerMemoryTypeFunc func(context.Context, *generated.ServerMemoryTypeQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f ServerMemoryTypeFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.ServerMemoryTypeQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.ServerMemoryTypeQuery", q)
}

// The TraverseServerMemoryType type is an adapter to allow the use of ordinary function as Traverser.
type TraverseServerMemoryType func(context.Context, *generated.ServerMemoryTypeQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseServerMemoryType) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseServerMemoryType) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.ServerMemoryTypeQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.ServerMemoryTypeQuery", q)
}

// The ServerMotherboardFunc type is an adapter to allow the use of ordinary function as a Querier.
type ServerMotherboardFunc func(context.Context, *generated.ServerMotherboardQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f ServerMotherboardFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.ServerMotherboardQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.ServerMotherboardQuery", q)
}

// The TraverseServerMotherboard type is an adapter to allow the use of ordinary function as Traverser.
type TraverseServerMotherboard func(context.Context, *generated.ServerMotherboardQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseServerMotherboard) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseServerMotherboard) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.ServerMotherboardQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.ServerMotherboardQuery", q)
}

// The ServerMotherboardTypeFunc type is an adapter to allow the use of ordinary function as a Querier.
type ServerMotherboardTypeFunc func(context.Context, *generated.ServerMotherboardTypeQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f ServerMotherboardTypeFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.ServerMotherboardTypeQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.ServerMotherboardTypeQuery", q)
}

// The TraverseServerMotherboardType type is an adapter to allow the use of ordinary function as Traverser.
type TraverseServerMotherboardType func(context.Context, *generated.ServerMotherboardTypeQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseServerMotherboardType) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseServerMotherboardType) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.ServerMotherboardTypeQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.ServerMotherboardTypeQuery", q)
}

// The ServerNetworkCardFunc type is an adapter to allow the use of ordinary function as a Querier.
type ServerNetworkCardFunc func(context.Context, *generated.ServerNetworkCardQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f ServerNetworkCardFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.ServerNetworkCardQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.ServerNetworkCardQuery", q)
}

// The TraverseServerNetworkCard type is an adapter to allow the use of ordinary function as Traverser.
type TraverseServerNetworkCard func(context.Context, *generated.ServerNetworkCardQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseServerNetworkCard) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseServerNetworkCard) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.ServerNetworkCardQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.ServerNetworkCardQuery", q)
}

// The ServerNetworkCardTypeFunc type is an adapter to allow the use of ordinary function as a Querier.
type ServerNetworkCardTypeFunc func(context.Context, *generated.ServerNetworkCardTypeQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f ServerNetworkCardTypeFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.ServerNetworkCardTypeQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.ServerNetworkCardTypeQuery", q)
}

// The TraverseServerNetworkCardType type is an adapter to allow the use of ordinary function as Traverser.
type TraverseServerNetworkCardType func(context.Context, *generated.ServerNetworkCardTypeQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseServerNetworkCardType) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseServerNetworkCardType) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.ServerNetworkCardTypeQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.ServerNetworkCardTypeQuery", q)
}

// The ServerNetworkPortFunc type is an adapter to allow the use of ordinary function as a Querier.
type ServerNetworkPortFunc func(context.Context, *generated.ServerNetworkPortQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f ServerNetworkPortFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.ServerNetworkPortQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.ServerNetworkPortQuery", q)
}

// The TraverseServerNetworkPort type is an adapter to allow the use of ordinary function as Traverser.
type TraverseServerNetworkPort func(context.Context, *generated.ServerNetworkPortQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseServerNetworkPort) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseServerNetworkPort) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.ServerNetworkPortQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.ServerNetworkPortQuery", q)
}

// The ServerPowerSupplyFunc type is an adapter to allow the use of ordinary function as a Querier.
type ServerPowerSupplyFunc func(context.Context, *generated.ServerPowerSupplyQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f ServerPowerSupplyFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.ServerPowerSupplyQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.ServerPowerSupplyQuery", q)
}

// The TraverseServerPowerSupply type is an adapter to allow the use of ordinary function as Traverser.
type TraverseServerPowerSupply func(context.Context, *generated.ServerPowerSupplyQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseServerPowerSupply) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseServerPowerSupply) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.ServerPowerSupplyQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.ServerPowerSupplyQuery", q)
}

// The ServerPowerSupplyTypeFunc type is an adapter to allow the use of ordinary function as a Querier.
type ServerPowerSupplyTypeFunc func(context.Context, *generated.ServerPowerSupplyTypeQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f ServerPowerSupplyTypeFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.ServerPowerSupplyTypeQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.ServerPowerSupplyTypeQuery", q)
}

// The TraverseServerPowerSupplyType type is an adapter to allow the use of ordinary function as Traverser.
type TraverseServerPowerSupplyType func(context.Context, *generated.ServerPowerSupplyTypeQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseServerPowerSupplyType) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseServerPowerSupplyType) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.ServerPowerSupplyTypeQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.ServerPowerSupplyTypeQuery", q)
}

// The ServerTypeFunc type is an adapter to allow the use of ordinary function as a Querier.
type ServerTypeFunc func(context.Context, *generated.ServerTypeQuery) (generated.Value, error)

// Query calls f(ctx, q).
func (f ServerTypeFunc) Query(ctx context.Context, q generated.Query) (generated.Value, error) {
	if q, ok := q.(*generated.ServerTypeQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *generated.ServerTypeQuery", q)
}

// The TraverseServerType type is an adapter to allow the use of ordinary function as Traverser.
type TraverseServerType func(context.Context, *generated.ServerTypeQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseServerType) Intercept(next generated.Querier) generated.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseServerType) Traverse(ctx context.Context, q generated.Query) error {
	if q, ok := q.(*generated.ServerTypeQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *generated.ServerTypeQuery", q)
}

// NewQuery returns the generic Query interface for the given typed query.
func NewQuery(q generated.Query) (Query, error) {
	switch q := q.(type) {
	case *generated.ProviderQuery:
		return &query[*generated.ProviderQuery, predicate.Provider, provider.OrderOption]{typ: generated.TypeProvider, tq: q}, nil
	case *generated.ServerQuery:
		return &query[*generated.ServerQuery, predicate.Server, server.OrderOption]{typ: generated.TypeServer, tq: q}, nil
	case *generated.ServerCPUQuery:
		return &query[*generated.ServerCPUQuery, predicate.ServerCPU, servercpu.OrderOption]{typ: generated.TypeServerCPU, tq: q}, nil
	case *generated.ServerCPUTypeQuery:
		return &query[*generated.ServerCPUTypeQuery, predicate.ServerCPUType, servercputype.OrderOption]{typ: generated.TypeServerCPUType, tq: q}, nil
	case *generated.ServerChassisQuery:
		return &query[*generated.ServerChassisQuery, predicate.ServerChassis, serverchassis.OrderOption]{typ: generated.TypeServerChassis, tq: q}, nil
	case *generated.ServerChassisTypeQuery:
		return &query[*generated.ServerChassisTypeQuery, predicate.ServerChassisType, serverchassistype.OrderOption]{typ: generated.TypeServerChassisType, tq: q}, nil
	case *generated.ServerComponentQuery:
		return &query[*generated.ServerComponentQuery, predicate.ServerComponent, servercomponent.OrderOption]{typ: generated.TypeServerComponent, tq: q}, nil
	case *generated.ServerComponentTypeQuery:
		return &query[*generated.ServerComponentTypeQuery, predicate.ServerComponentType, servercomponenttype.OrderOption]{typ: generated.TypeServerComponentType, tq: q}, nil
	case *generated.ServerHardDriveQuery:
		return &query[*generated.ServerHardDriveQuery, predicate.ServerHardDrive, serverharddrive.OrderOption]{typ: generated.TypeServerHardDrive, tq: q}, nil
	case *generated.ServerHardDriveTypeQuery:
		return &query[*generated.ServerHardDriveTypeQuery, predicate.ServerHardDriveType, serverharddrivetype.OrderOption]{typ: generated.TypeServerHardDriveType, tq: q}, nil
	case *generated.ServerMemoryQuery:
		return &query[*generated.ServerMemoryQuery, predicate.ServerMemory, servermemory.OrderOption]{typ: generated.TypeServerMemory, tq: q}, nil
	case *generated.ServerMemoryTypeQuery:
		return &query[*generated.ServerMemoryTypeQuery, predicate.ServerMemoryType, servermemorytype.OrderOption]{typ: generated.TypeServerMemoryType, tq: q}, nil
	case *generated.ServerMotherboardQuery:
		return &query[*generated.ServerMotherboardQuery, predicate.ServerMotherboard, servermotherboard.OrderOption]{typ: generated.TypeServerMotherboard, tq: q}, nil
	case *generated.ServerMotherboardTypeQuery:
		return &query[*generated.ServerMotherboardTypeQuery, predicate.ServerMotherboardType, servermotherboardtype.OrderOption]{typ: generated.TypeServerMotherboardType, tq: q}, nil
	case *generated.ServerNetworkCardQuery:
		return &query[*generated.ServerNetworkCardQuery, predicate.ServerNetworkCard, servernetworkcard.OrderOption]{typ: generated.TypeServerNetworkCard, tq: q}, nil
	case *generated.ServerNetworkCardTypeQuery:
		return &query[*generated.ServerNetworkCardTypeQuery, predicate.ServerNetworkCardType, servernetworkcardtype.OrderOption]{typ: generated.TypeServerNetworkCardType, tq: q}, nil
	case *generated.ServerNetworkPortQuery:
		return &query[*generated.ServerNetworkPortQuery, predicate.ServerNetworkPort, servernetworkport.OrderOption]{typ: generated.TypeServerNetworkPort, tq: q}, nil
	case *generated.ServerPowerSupplyQuery:
		return &query[*generated.ServerPowerSupplyQuery, predicate.ServerPowerSupply, serverpowersupply.OrderOption]{typ: generated.TypeServerPowerSupply, tq: q}, nil
	case *generated.ServerPowerSupplyTypeQuery:
		return &query[*generated.ServerPowerSupplyTypeQuery, predicate.ServerPowerSupplyType, serverpowersupplytype.OrderOption]{typ: generated.TypeServerPowerSupplyType, tq: q}, nil
	case *generated.ServerTypeQuery:
		return &query[*generated.ServerTypeQuery, predicate.ServerType, servertype.OrderOption]{typ: generated.TypeServerType, tq: q}, nil
	default:
		return nil, fmt.Errorf("unknown query type %T", q)
	}
}

type query[T any, P ~func(*sql.Selector), R ~func(*sql.Selector)] struct {
	typ string
	tq  interface {
		Limit(int) T
		Offset(int) T
		Unique(bool) T
		Order(...R) T
		Where(...P) T
	}
}

func (q query[T, P, R]) Type() string {
	return q.typ
}

func (q query[T, P, R]) Limit(limit int) {
	q.tq.Limit(limit)
}

func (q query[T, P, R]) Offset(offset int) {
	q.tq.Offset(offset)
}

func (q query[T, P, R]) Unique(unique bool) {
	q.tq.Unique(unique)
}

func (q query[T, P, R]) Order(orders ...func(*sql.Selector)) {
	rs := make([]R, len(orders))
	for i := range orders {
		rs[i] = orders[i]
	}
	q.tq.Order(rs...)
}

func (q query[T, P, R]) WhereP(ps ...func(*sql.Selector)) {
	p := make([]P, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	q.tq.Where(p...)
}
