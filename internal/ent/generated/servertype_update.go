// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"go.infratographer.com/server-api/internal/ent/generated/predicate"
	"go.infratographer.com/server-api/internal/ent/generated/server"
	"go.infratographer.com/server-api/internal/ent/generated/servertype"
	"go.infratographer.com/x/gidx"
)

// ServerTypeUpdate is the builder for updating ServerType entities.
type ServerTypeUpdate struct {
	config
	hooks    []Hook
	mutation *ServerTypeMutation
}

// Where appends a list predicates to the ServerTypeUpdate builder.
func (stu *ServerTypeUpdate) Where(ps ...predicate.ServerType) *ServerTypeUpdate {
	stu.mutation.Where(ps...)
	return stu
}

// SetName sets the "name" field.
func (stu *ServerTypeUpdate) SetName(s string) *ServerTypeUpdate {
	stu.mutation.SetName(s)
	return stu
}

// AddServerIDs adds the "servers" edge to the Server entity by IDs.
func (stu *ServerTypeUpdate) AddServerIDs(ids ...gidx.PrefixedID) *ServerTypeUpdate {
	stu.mutation.AddServerIDs(ids...)
	return stu
}

// AddServers adds the "servers" edges to the Server entity.
func (stu *ServerTypeUpdate) AddServers(s ...*Server) *ServerTypeUpdate {
	ids := make([]gidx.PrefixedID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return stu.AddServerIDs(ids...)
}

// Mutation returns the ServerTypeMutation object of the builder.
func (stu *ServerTypeUpdate) Mutation() *ServerTypeMutation {
	return stu.mutation
}

// ClearServers clears all "servers" edges to the Server entity.
func (stu *ServerTypeUpdate) ClearServers() *ServerTypeUpdate {
	stu.mutation.ClearServers()
	return stu
}

// RemoveServerIDs removes the "servers" edge to Server entities by IDs.
func (stu *ServerTypeUpdate) RemoveServerIDs(ids ...gidx.PrefixedID) *ServerTypeUpdate {
	stu.mutation.RemoveServerIDs(ids...)
	return stu
}

// RemoveServers removes "servers" edges to Server entities.
func (stu *ServerTypeUpdate) RemoveServers(s ...*Server) *ServerTypeUpdate {
	ids := make([]gidx.PrefixedID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return stu.RemoveServerIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (stu *ServerTypeUpdate) Save(ctx context.Context) (int, error) {
	stu.defaults()
	return withHooks(ctx, stu.sqlSave, stu.mutation, stu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (stu *ServerTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := stu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (stu *ServerTypeUpdate) Exec(ctx context.Context) error {
	_, err := stu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stu *ServerTypeUpdate) ExecX(ctx context.Context) {
	if err := stu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (stu *ServerTypeUpdate) defaults() {
	if _, ok := stu.mutation.UpdatedAt(); !ok {
		v := servertype.UpdateDefaultUpdatedAt()
		stu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (stu *ServerTypeUpdate) check() error {
	if v, ok := stu.mutation.Name(); ok {
		if err := servertype.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "ServerType.name": %w`, err)}
		}
	}
	return nil
}

func (stu *ServerTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := stu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(servertype.Table, servertype.Columns, sqlgraph.NewFieldSpec(servertype.FieldID, field.TypeString))
	if ps := stu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := stu.mutation.UpdatedAt(); ok {
		_spec.SetField(servertype.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := stu.mutation.Name(); ok {
		_spec.SetField(servertype.FieldName, field.TypeString, value)
	}
	if stu.mutation.ServersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   servertype.ServersTable,
			Columns: []string{servertype.ServersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(server.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stu.mutation.RemovedServersIDs(); len(nodes) > 0 && !stu.mutation.ServersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   servertype.ServersTable,
			Columns: []string{servertype.ServersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(server.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stu.mutation.ServersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   servertype.ServersTable,
			Columns: []string{servertype.ServersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(server.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, stu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{servertype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	stu.mutation.done = true
	return n, nil
}

// ServerTypeUpdateOne is the builder for updating a single ServerType entity.
type ServerTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ServerTypeMutation
}

// SetName sets the "name" field.
func (stuo *ServerTypeUpdateOne) SetName(s string) *ServerTypeUpdateOne {
	stuo.mutation.SetName(s)
	return stuo
}

// AddServerIDs adds the "servers" edge to the Server entity by IDs.
func (stuo *ServerTypeUpdateOne) AddServerIDs(ids ...gidx.PrefixedID) *ServerTypeUpdateOne {
	stuo.mutation.AddServerIDs(ids...)
	return stuo
}

// AddServers adds the "servers" edges to the Server entity.
func (stuo *ServerTypeUpdateOne) AddServers(s ...*Server) *ServerTypeUpdateOne {
	ids := make([]gidx.PrefixedID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return stuo.AddServerIDs(ids...)
}

// Mutation returns the ServerTypeMutation object of the builder.
func (stuo *ServerTypeUpdateOne) Mutation() *ServerTypeMutation {
	return stuo.mutation
}

// ClearServers clears all "servers" edges to the Server entity.
func (stuo *ServerTypeUpdateOne) ClearServers() *ServerTypeUpdateOne {
	stuo.mutation.ClearServers()
	return stuo
}

// RemoveServerIDs removes the "servers" edge to Server entities by IDs.
func (stuo *ServerTypeUpdateOne) RemoveServerIDs(ids ...gidx.PrefixedID) *ServerTypeUpdateOne {
	stuo.mutation.RemoveServerIDs(ids...)
	return stuo
}

// RemoveServers removes "servers" edges to Server entities.
func (stuo *ServerTypeUpdateOne) RemoveServers(s ...*Server) *ServerTypeUpdateOne {
	ids := make([]gidx.PrefixedID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return stuo.RemoveServerIDs(ids...)
}

// Where appends a list predicates to the ServerTypeUpdate builder.
func (stuo *ServerTypeUpdateOne) Where(ps ...predicate.ServerType) *ServerTypeUpdateOne {
	stuo.mutation.Where(ps...)
	return stuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (stuo *ServerTypeUpdateOne) Select(field string, fields ...string) *ServerTypeUpdateOne {
	stuo.fields = append([]string{field}, fields...)
	return stuo
}

// Save executes the query and returns the updated ServerType entity.
func (stuo *ServerTypeUpdateOne) Save(ctx context.Context) (*ServerType, error) {
	stuo.defaults()
	return withHooks(ctx, stuo.sqlSave, stuo.mutation, stuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (stuo *ServerTypeUpdateOne) SaveX(ctx context.Context) *ServerType {
	node, err := stuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (stuo *ServerTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := stuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stuo *ServerTypeUpdateOne) ExecX(ctx context.Context) {
	if err := stuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (stuo *ServerTypeUpdateOne) defaults() {
	if _, ok := stuo.mutation.UpdatedAt(); !ok {
		v := servertype.UpdateDefaultUpdatedAt()
		stuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (stuo *ServerTypeUpdateOne) check() error {
	if v, ok := stuo.mutation.Name(); ok {
		if err := servertype.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "ServerType.name": %w`, err)}
		}
	}
	return nil
}

func (stuo *ServerTypeUpdateOne) sqlSave(ctx context.Context) (_node *ServerType, err error) {
	if err := stuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(servertype.Table, servertype.Columns, sqlgraph.NewFieldSpec(servertype.FieldID, field.TypeString))
	id, ok := stuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "ServerType.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := stuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, servertype.FieldID)
		for _, f := range fields {
			if !servertype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != servertype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := stuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := stuo.mutation.UpdatedAt(); ok {
		_spec.SetField(servertype.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := stuo.mutation.Name(); ok {
		_spec.SetField(servertype.FieldName, field.TypeString, value)
	}
	if stuo.mutation.ServersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   servertype.ServersTable,
			Columns: []string{servertype.ServersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(server.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stuo.mutation.RemovedServersIDs(); len(nodes) > 0 && !stuo.mutation.ServersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   servertype.ServersTable,
			Columns: []string{servertype.ServersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(server.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stuo.mutation.ServersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   servertype.ServersTable,
			Columns: []string{servertype.ServersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(server.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ServerType{config: stuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, stuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{servertype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	stuo.mutation.done = true
	return _node, nil
}
