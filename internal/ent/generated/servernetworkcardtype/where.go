// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package servernetworkcardtype

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"go.infratographer.com/server-api/internal/ent/generated/predicate"
	"go.infratographer.com/x/gidx"
)

// ID filters vertices based on their ID field.
func ID(id gidx.PrefixedID) predicate.ServerNetworkCardType {
	return predicate.ServerNetworkCardType(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id gidx.PrefixedID) predicate.ServerNetworkCardType {
	return predicate.ServerNetworkCardType(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id gidx.PrefixedID) predicate.ServerNetworkCardType {
	return predicate.ServerNetworkCardType(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...gidx.PrefixedID) predicate.ServerNetworkCardType {
	return predicate.ServerNetworkCardType(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...gidx.PrefixedID) predicate.ServerNetworkCardType {
	return predicate.ServerNetworkCardType(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id gidx.PrefixedID) predicate.ServerNetworkCardType {
	return predicate.ServerNetworkCardType(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id gidx.PrefixedID) predicate.ServerNetworkCardType {
	return predicate.ServerNetworkCardType(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id gidx.PrefixedID) predicate.ServerNetworkCardType {
	return predicate.ServerNetworkCardType(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id gidx.PrefixedID) predicate.ServerNetworkCardType {
	return predicate.ServerNetworkCardType(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ServerNetworkCardType {
	return predicate.ServerNetworkCardType(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ServerNetworkCardType {
	return predicate.ServerNetworkCardType(sql.FieldEQ(FieldUpdatedAt, v))
}

// Vendor applies equality check predicate on the "vendor" field. It's identical to VendorEQ.
func Vendor(v string) predicate.ServerNetworkCardType {
	return predicate.ServerNetworkCardType(sql.FieldEQ(FieldVendor, v))
}

// Model applies equality check predicate on the "model" field. It's identical to ModelEQ.
func Model(v string) predicate.ServerNetworkCardType {
	return predicate.ServerNetworkCardType(sql.FieldEQ(FieldModel, v))
}

// PortCount applies equality check predicate on the "port_count" field. It's identical to PortCountEQ.
func PortCount(v int) predicate.ServerNetworkCardType {
	return predicate.ServerNetworkCardType(sql.FieldEQ(FieldPortCount, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ServerNetworkCardType {
	return predicate.ServerNetworkCardType(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ServerNetworkCardType {
	return predicate.ServerNetworkCardType(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ServerNetworkCardType {
	return predicate.ServerNetworkCardType(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ServerNetworkCardType {
	return predicate.ServerNetworkCardType(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ServerNetworkCardType {
	return predicate.ServerNetworkCardType(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ServerNetworkCardType {
	return predicate.ServerNetworkCardType(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ServerNetworkCardType {
	return predicate.ServerNetworkCardType(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ServerNetworkCardType {
	return predicate.ServerNetworkCardType(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ServerNetworkCardType {
	return predicate.ServerNetworkCardType(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ServerNetworkCardType {
	return predicate.ServerNetworkCardType(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ServerNetworkCardType {
	return predicate.ServerNetworkCardType(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ServerNetworkCardType {
	return predicate.ServerNetworkCardType(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ServerNetworkCardType {
	return predicate.ServerNetworkCardType(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ServerNetworkCardType {
	return predicate.ServerNetworkCardType(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ServerNetworkCardType {
	return predicate.ServerNetworkCardType(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ServerNetworkCardType {
	return predicate.ServerNetworkCardType(sql.FieldLTE(FieldUpdatedAt, v))
}

// VendorEQ applies the EQ predicate on the "vendor" field.
func VendorEQ(v string) predicate.ServerNetworkCardType {
	return predicate.ServerNetworkCardType(sql.FieldEQ(FieldVendor, v))
}

// VendorNEQ applies the NEQ predicate on the "vendor" field.
func VendorNEQ(v string) predicate.ServerNetworkCardType {
	return predicate.ServerNetworkCardType(sql.FieldNEQ(FieldVendor, v))
}

// VendorIn applies the In predicate on the "vendor" field.
func VendorIn(vs ...string) predicate.ServerNetworkCardType {
	return predicate.ServerNetworkCardType(sql.FieldIn(FieldVendor, vs...))
}

// VendorNotIn applies the NotIn predicate on the "vendor" field.
func VendorNotIn(vs ...string) predicate.ServerNetworkCardType {
	return predicate.ServerNetworkCardType(sql.FieldNotIn(FieldVendor, vs...))
}

// VendorGT applies the GT predicate on the "vendor" field.
func VendorGT(v string) predicate.ServerNetworkCardType {
	return predicate.ServerNetworkCardType(sql.FieldGT(FieldVendor, v))
}

// VendorGTE applies the GTE predicate on the "vendor" field.
func VendorGTE(v string) predicate.ServerNetworkCardType {
	return predicate.ServerNetworkCardType(sql.FieldGTE(FieldVendor, v))
}

// VendorLT applies the LT predicate on the "vendor" field.
func VendorLT(v string) predicate.ServerNetworkCardType {
	return predicate.ServerNetworkCardType(sql.FieldLT(FieldVendor, v))
}

// VendorLTE applies the LTE predicate on the "vendor" field.
func VendorLTE(v string) predicate.ServerNetworkCardType {
	return predicate.ServerNetworkCardType(sql.FieldLTE(FieldVendor, v))
}

// VendorContains applies the Contains predicate on the "vendor" field.
func VendorContains(v string) predicate.ServerNetworkCardType {
	return predicate.ServerNetworkCardType(sql.FieldContains(FieldVendor, v))
}

// VendorHasPrefix applies the HasPrefix predicate on the "vendor" field.
func VendorHasPrefix(v string) predicate.ServerNetworkCardType {
	return predicate.ServerNetworkCardType(sql.FieldHasPrefix(FieldVendor, v))
}

// VendorHasSuffix applies the HasSuffix predicate on the "vendor" field.
func VendorHasSuffix(v string) predicate.ServerNetworkCardType {
	return predicate.ServerNetworkCardType(sql.FieldHasSuffix(FieldVendor, v))
}

// VendorEqualFold applies the EqualFold predicate on the "vendor" field.
func VendorEqualFold(v string) predicate.ServerNetworkCardType {
	return predicate.ServerNetworkCardType(sql.FieldEqualFold(FieldVendor, v))
}

// VendorContainsFold applies the ContainsFold predicate on the "vendor" field.
func VendorContainsFold(v string) predicate.ServerNetworkCardType {
	return predicate.ServerNetworkCardType(sql.FieldContainsFold(FieldVendor, v))
}

// ModelEQ applies the EQ predicate on the "model" field.
func ModelEQ(v string) predicate.ServerNetworkCardType {
	return predicate.ServerNetworkCardType(sql.FieldEQ(FieldModel, v))
}

// ModelNEQ applies the NEQ predicate on the "model" field.
func ModelNEQ(v string) predicate.ServerNetworkCardType {
	return predicate.ServerNetworkCardType(sql.FieldNEQ(FieldModel, v))
}

// ModelIn applies the In predicate on the "model" field.
func ModelIn(vs ...string) predicate.ServerNetworkCardType {
	return predicate.ServerNetworkCardType(sql.FieldIn(FieldModel, vs...))
}

// ModelNotIn applies the NotIn predicate on the "model" field.
func ModelNotIn(vs ...string) predicate.ServerNetworkCardType {
	return predicate.ServerNetworkCardType(sql.FieldNotIn(FieldModel, vs...))
}

// ModelGT applies the GT predicate on the "model" field.
func ModelGT(v string) predicate.ServerNetworkCardType {
	return predicate.ServerNetworkCardType(sql.FieldGT(FieldModel, v))
}

// ModelGTE applies the GTE predicate on the "model" field.
func ModelGTE(v string) predicate.ServerNetworkCardType {
	return predicate.ServerNetworkCardType(sql.FieldGTE(FieldModel, v))
}

// ModelLT applies the LT predicate on the "model" field.
func ModelLT(v string) predicate.ServerNetworkCardType {
	return predicate.ServerNetworkCardType(sql.FieldLT(FieldModel, v))
}

// ModelLTE applies the LTE predicate on the "model" field.
func ModelLTE(v string) predicate.ServerNetworkCardType {
	return predicate.ServerNetworkCardType(sql.FieldLTE(FieldModel, v))
}

// ModelContains applies the Contains predicate on the "model" field.
func ModelContains(v string) predicate.ServerNetworkCardType {
	return predicate.ServerNetworkCardType(sql.FieldContains(FieldModel, v))
}

// ModelHasPrefix applies the HasPrefix predicate on the "model" field.
func ModelHasPrefix(v string) predicate.ServerNetworkCardType {
	return predicate.ServerNetworkCardType(sql.FieldHasPrefix(FieldModel, v))
}

// ModelHasSuffix applies the HasSuffix predicate on the "model" field.
func ModelHasSuffix(v string) predicate.ServerNetworkCardType {
	return predicate.ServerNetworkCardType(sql.FieldHasSuffix(FieldModel, v))
}

// ModelEqualFold applies the EqualFold predicate on the "model" field.
func ModelEqualFold(v string) predicate.ServerNetworkCardType {
	return predicate.ServerNetworkCardType(sql.FieldEqualFold(FieldModel, v))
}

// ModelContainsFold applies the ContainsFold predicate on the "model" field.
func ModelContainsFold(v string) predicate.ServerNetworkCardType {
	return predicate.ServerNetworkCardType(sql.FieldContainsFold(FieldModel, v))
}

// PortCountEQ applies the EQ predicate on the "port_count" field.
func PortCountEQ(v int) predicate.ServerNetworkCardType {
	return predicate.ServerNetworkCardType(sql.FieldEQ(FieldPortCount, v))
}

// PortCountNEQ applies the NEQ predicate on the "port_count" field.
func PortCountNEQ(v int) predicate.ServerNetworkCardType {
	return predicate.ServerNetworkCardType(sql.FieldNEQ(FieldPortCount, v))
}

// PortCountIn applies the In predicate on the "port_count" field.
func PortCountIn(vs ...int) predicate.ServerNetworkCardType {
	return predicate.ServerNetworkCardType(sql.FieldIn(FieldPortCount, vs...))
}

// PortCountNotIn applies the NotIn predicate on the "port_count" field.
func PortCountNotIn(vs ...int) predicate.ServerNetworkCardType {
	return predicate.ServerNetworkCardType(sql.FieldNotIn(FieldPortCount, vs...))
}

// PortCountGT applies the GT predicate on the "port_count" field.
func PortCountGT(v int) predicate.ServerNetworkCardType {
	return predicate.ServerNetworkCardType(sql.FieldGT(FieldPortCount, v))
}

// PortCountGTE applies the GTE predicate on the "port_count" field.
func PortCountGTE(v int) predicate.ServerNetworkCardType {
	return predicate.ServerNetworkCardType(sql.FieldGTE(FieldPortCount, v))
}

// PortCountLT applies the LT predicate on the "port_count" field.
func PortCountLT(v int) predicate.ServerNetworkCardType {
	return predicate.ServerNetworkCardType(sql.FieldLT(FieldPortCount, v))
}

// PortCountLTE applies the LTE predicate on the "port_count" field.
func PortCountLTE(v int) predicate.ServerNetworkCardType {
	return predicate.ServerNetworkCardType(sql.FieldLTE(FieldPortCount, v))
}

// HasNetworkCard applies the HasEdge predicate on the "network_card" edge.
func HasNetworkCard() predicate.ServerNetworkCardType {
	return predicate.ServerNetworkCardType(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, NetworkCardTable, NetworkCardColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNetworkCardWith applies the HasEdge predicate on the "network_card" edge with a given conditions (other predicates).
func HasNetworkCardWith(preds ...predicate.ServerNetworkCard) predicate.ServerNetworkCardType {
	return predicate.ServerNetworkCardType(func(s *sql.Selector) {
		step := newNetworkCardStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ServerNetworkCardType) predicate.ServerNetworkCardType {
	return predicate.ServerNetworkCardType(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ServerNetworkCardType) predicate.ServerNetworkCardType {
	return predicate.ServerNetworkCardType(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ServerNetworkCardType) predicate.ServerNetworkCardType {
	return predicate.ServerNetworkCardType(func(s *sql.Selector) {
		p(s.Not())
	})
}
