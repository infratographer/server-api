// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"go.infratographer.com/server-api/internal/ent/generated/predicate"
	"go.infratographer.com/server-api/internal/ent/generated/servercputype"
)

// ServerCPUTypeUpdate is the builder for updating ServerCPUType entities.
type ServerCPUTypeUpdate struct {
	config
	hooks    []Hook
	mutation *ServerCPUTypeMutation
}

// Where appends a list predicates to the ServerCPUTypeUpdate builder.
func (sctu *ServerCPUTypeUpdate) Where(ps ...predicate.ServerCPUType) *ServerCPUTypeUpdate {
	sctu.mutation.Where(ps...)
	return sctu
}

// SetVendor sets the "vendor" field.
func (sctu *ServerCPUTypeUpdate) SetVendor(s string) *ServerCPUTypeUpdate {
	sctu.mutation.SetVendor(s)
	return sctu
}

// SetModel sets the "model" field.
func (sctu *ServerCPUTypeUpdate) SetModel(s string) *ServerCPUTypeUpdate {
	sctu.mutation.SetModel(s)
	return sctu
}

// SetClockSpeed sets the "clock_speed" field.
func (sctu *ServerCPUTypeUpdate) SetClockSpeed(s string) *ServerCPUTypeUpdate {
	sctu.mutation.SetClockSpeed(s)
	return sctu
}

// SetCoreCount sets the "core_count" field.
func (sctu *ServerCPUTypeUpdate) SetCoreCount(i int) *ServerCPUTypeUpdate {
	sctu.mutation.ResetCoreCount()
	sctu.mutation.SetCoreCount(i)
	return sctu
}

// AddCoreCount adds i to the "core_count" field.
func (sctu *ServerCPUTypeUpdate) AddCoreCount(i int) *ServerCPUTypeUpdate {
	sctu.mutation.AddCoreCount(i)
	return sctu
}

// Mutation returns the ServerCPUTypeMutation object of the builder.
func (sctu *ServerCPUTypeUpdate) Mutation() *ServerCPUTypeMutation {
	return sctu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sctu *ServerCPUTypeUpdate) Save(ctx context.Context) (int, error) {
	sctu.defaults()
	return withHooks(ctx, sctu.sqlSave, sctu.mutation, sctu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sctu *ServerCPUTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := sctu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sctu *ServerCPUTypeUpdate) Exec(ctx context.Context) error {
	_, err := sctu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sctu *ServerCPUTypeUpdate) ExecX(ctx context.Context) {
	if err := sctu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sctu *ServerCPUTypeUpdate) defaults() {
	if _, ok := sctu.mutation.UpdatedAt(); !ok {
		v := servercputype.UpdateDefaultUpdatedAt()
		sctu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sctu *ServerCPUTypeUpdate) check() error {
	if v, ok := sctu.mutation.Vendor(); ok {
		if err := servercputype.VendorValidator(v); err != nil {
			return &ValidationError{Name: "vendor", err: fmt.Errorf(`generated: validator failed for field "ServerCPUType.vendor": %w`, err)}
		}
	}
	if v, ok := sctu.mutation.Model(); ok {
		if err := servercputype.ModelValidator(v); err != nil {
			return &ValidationError{Name: "model", err: fmt.Errorf(`generated: validator failed for field "ServerCPUType.model": %w`, err)}
		}
	}
	if v, ok := sctu.mutation.ClockSpeed(); ok {
		if err := servercputype.ClockSpeedValidator(v); err != nil {
			return &ValidationError{Name: "clock_speed", err: fmt.Errorf(`generated: validator failed for field "ServerCPUType.clock_speed": %w`, err)}
		}
	}
	if v, ok := sctu.mutation.CoreCount(); ok {
		if err := servercputype.CoreCountValidator(v); err != nil {
			return &ValidationError{Name: "core_count", err: fmt.Errorf(`generated: validator failed for field "ServerCPUType.core_count": %w`, err)}
		}
	}
	return nil
}

func (sctu *ServerCPUTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := sctu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(servercputype.Table, servercputype.Columns, sqlgraph.NewFieldSpec(servercputype.FieldID, field.TypeString))
	if ps := sctu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sctu.mutation.UpdatedAt(); ok {
		_spec.SetField(servercputype.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := sctu.mutation.Vendor(); ok {
		_spec.SetField(servercputype.FieldVendor, field.TypeString, value)
	}
	if value, ok := sctu.mutation.Model(); ok {
		_spec.SetField(servercputype.FieldModel, field.TypeString, value)
	}
	if value, ok := sctu.mutation.ClockSpeed(); ok {
		_spec.SetField(servercputype.FieldClockSpeed, field.TypeString, value)
	}
	if value, ok := sctu.mutation.CoreCount(); ok {
		_spec.SetField(servercputype.FieldCoreCount, field.TypeInt, value)
	}
	if value, ok := sctu.mutation.AddedCoreCount(); ok {
		_spec.AddField(servercputype.FieldCoreCount, field.TypeInt, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sctu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{servercputype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sctu.mutation.done = true
	return n, nil
}

// ServerCPUTypeUpdateOne is the builder for updating a single ServerCPUType entity.
type ServerCPUTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ServerCPUTypeMutation
}

// SetVendor sets the "vendor" field.
func (sctuo *ServerCPUTypeUpdateOne) SetVendor(s string) *ServerCPUTypeUpdateOne {
	sctuo.mutation.SetVendor(s)
	return sctuo
}

// SetModel sets the "model" field.
func (sctuo *ServerCPUTypeUpdateOne) SetModel(s string) *ServerCPUTypeUpdateOne {
	sctuo.mutation.SetModel(s)
	return sctuo
}

// SetClockSpeed sets the "clock_speed" field.
func (sctuo *ServerCPUTypeUpdateOne) SetClockSpeed(s string) *ServerCPUTypeUpdateOne {
	sctuo.mutation.SetClockSpeed(s)
	return sctuo
}

// SetCoreCount sets the "core_count" field.
func (sctuo *ServerCPUTypeUpdateOne) SetCoreCount(i int) *ServerCPUTypeUpdateOne {
	sctuo.mutation.ResetCoreCount()
	sctuo.mutation.SetCoreCount(i)
	return sctuo
}

// AddCoreCount adds i to the "core_count" field.
func (sctuo *ServerCPUTypeUpdateOne) AddCoreCount(i int) *ServerCPUTypeUpdateOne {
	sctuo.mutation.AddCoreCount(i)
	return sctuo
}

// Mutation returns the ServerCPUTypeMutation object of the builder.
func (sctuo *ServerCPUTypeUpdateOne) Mutation() *ServerCPUTypeMutation {
	return sctuo.mutation
}

// Where appends a list predicates to the ServerCPUTypeUpdate builder.
func (sctuo *ServerCPUTypeUpdateOne) Where(ps ...predicate.ServerCPUType) *ServerCPUTypeUpdateOne {
	sctuo.mutation.Where(ps...)
	return sctuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sctuo *ServerCPUTypeUpdateOne) Select(field string, fields ...string) *ServerCPUTypeUpdateOne {
	sctuo.fields = append([]string{field}, fields...)
	return sctuo
}

// Save executes the query and returns the updated ServerCPUType entity.
func (sctuo *ServerCPUTypeUpdateOne) Save(ctx context.Context) (*ServerCPUType, error) {
	sctuo.defaults()
	return withHooks(ctx, sctuo.sqlSave, sctuo.mutation, sctuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sctuo *ServerCPUTypeUpdateOne) SaveX(ctx context.Context) *ServerCPUType {
	node, err := sctuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sctuo *ServerCPUTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := sctuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sctuo *ServerCPUTypeUpdateOne) ExecX(ctx context.Context) {
	if err := sctuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sctuo *ServerCPUTypeUpdateOne) defaults() {
	if _, ok := sctuo.mutation.UpdatedAt(); !ok {
		v := servercputype.UpdateDefaultUpdatedAt()
		sctuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sctuo *ServerCPUTypeUpdateOne) check() error {
	if v, ok := sctuo.mutation.Vendor(); ok {
		if err := servercputype.VendorValidator(v); err != nil {
			return &ValidationError{Name: "vendor", err: fmt.Errorf(`generated: validator failed for field "ServerCPUType.vendor": %w`, err)}
		}
	}
	if v, ok := sctuo.mutation.Model(); ok {
		if err := servercputype.ModelValidator(v); err != nil {
			return &ValidationError{Name: "model", err: fmt.Errorf(`generated: validator failed for field "ServerCPUType.model": %w`, err)}
		}
	}
	if v, ok := sctuo.mutation.ClockSpeed(); ok {
		if err := servercputype.ClockSpeedValidator(v); err != nil {
			return &ValidationError{Name: "clock_speed", err: fmt.Errorf(`generated: validator failed for field "ServerCPUType.clock_speed": %w`, err)}
		}
	}
	if v, ok := sctuo.mutation.CoreCount(); ok {
		if err := servercputype.CoreCountValidator(v); err != nil {
			return &ValidationError{Name: "core_count", err: fmt.Errorf(`generated: validator failed for field "ServerCPUType.core_count": %w`, err)}
		}
	}
	return nil
}

func (sctuo *ServerCPUTypeUpdateOne) sqlSave(ctx context.Context) (_node *ServerCPUType, err error) {
	if err := sctuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(servercputype.Table, servercputype.Columns, sqlgraph.NewFieldSpec(servercputype.FieldID, field.TypeString))
	id, ok := sctuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "ServerCPUType.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sctuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, servercputype.FieldID)
		for _, f := range fields {
			if !servercputype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != servercputype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sctuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sctuo.mutation.UpdatedAt(); ok {
		_spec.SetField(servercputype.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := sctuo.mutation.Vendor(); ok {
		_spec.SetField(servercputype.FieldVendor, field.TypeString, value)
	}
	if value, ok := sctuo.mutation.Model(); ok {
		_spec.SetField(servercputype.FieldModel, field.TypeString, value)
	}
	if value, ok := sctuo.mutation.ClockSpeed(); ok {
		_spec.SetField(servercputype.FieldClockSpeed, field.TypeString, value)
	}
	if value, ok := sctuo.mutation.CoreCount(); ok {
		_spec.SetField(servercputype.FieldCoreCount, field.TypeInt, value)
	}
	if value, ok := sctuo.mutation.AddedCoreCount(); ok {
		_spec.AddField(servercputype.FieldCoreCount, field.TypeInt, value)
	}
	_node = &ServerCPUType{config: sctuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sctuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{servercputype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sctuo.mutation.done = true
	return _node, nil
}
