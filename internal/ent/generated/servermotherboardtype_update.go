// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"go.infratographer.com/server-api/internal/ent/generated/predicate"
	"go.infratographer.com/server-api/internal/ent/generated/servermotherboard"
	"go.infratographer.com/server-api/internal/ent/generated/servermotherboardtype"
	"go.infratographer.com/x/gidx"
)

// ServerMotherboardTypeUpdate is the builder for updating ServerMotherboardType entities.
type ServerMotherboardTypeUpdate struct {
	config
	hooks    []Hook
	mutation *ServerMotherboardTypeMutation
}

// Where appends a list predicates to the ServerMotherboardTypeUpdate builder.
func (smtu *ServerMotherboardTypeUpdate) Where(ps ...predicate.ServerMotherboardType) *ServerMotherboardTypeUpdate {
	smtu.mutation.Where(ps...)
	return smtu
}

// SetVendor sets the "vendor" field.
func (smtu *ServerMotherboardTypeUpdate) SetVendor(s string) *ServerMotherboardTypeUpdate {
	smtu.mutation.SetVendor(s)
	return smtu
}

// SetModel sets the "model" field.
func (smtu *ServerMotherboardTypeUpdate) SetModel(s string) *ServerMotherboardTypeUpdate {
	smtu.mutation.SetModel(s)
	return smtu
}

// AddMotherboardIDs adds the "motherboard" edge to the ServerMotherboard entity by IDs.
func (smtu *ServerMotherboardTypeUpdate) AddMotherboardIDs(ids ...gidx.PrefixedID) *ServerMotherboardTypeUpdate {
	smtu.mutation.AddMotherboardIDs(ids...)
	return smtu
}

// AddMotherboard adds the "motherboard" edges to the ServerMotherboard entity.
func (smtu *ServerMotherboardTypeUpdate) AddMotherboard(s ...*ServerMotherboard) *ServerMotherboardTypeUpdate {
	ids := make([]gidx.PrefixedID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return smtu.AddMotherboardIDs(ids...)
}

// Mutation returns the ServerMotherboardTypeMutation object of the builder.
func (smtu *ServerMotherboardTypeUpdate) Mutation() *ServerMotherboardTypeMutation {
	return smtu.mutation
}

// ClearMotherboard clears all "motherboard" edges to the ServerMotherboard entity.
func (smtu *ServerMotherboardTypeUpdate) ClearMotherboard() *ServerMotherboardTypeUpdate {
	smtu.mutation.ClearMotherboard()
	return smtu
}

// RemoveMotherboardIDs removes the "motherboard" edge to ServerMotherboard entities by IDs.
func (smtu *ServerMotherboardTypeUpdate) RemoveMotherboardIDs(ids ...gidx.PrefixedID) *ServerMotherboardTypeUpdate {
	smtu.mutation.RemoveMotherboardIDs(ids...)
	return smtu
}

// RemoveMotherboard removes "motherboard" edges to ServerMotherboard entities.
func (smtu *ServerMotherboardTypeUpdate) RemoveMotherboard(s ...*ServerMotherboard) *ServerMotherboardTypeUpdate {
	ids := make([]gidx.PrefixedID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return smtu.RemoveMotherboardIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (smtu *ServerMotherboardTypeUpdate) Save(ctx context.Context) (int, error) {
	smtu.defaults()
	return withHooks(ctx, smtu.sqlSave, smtu.mutation, smtu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (smtu *ServerMotherboardTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := smtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (smtu *ServerMotherboardTypeUpdate) Exec(ctx context.Context) error {
	_, err := smtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smtu *ServerMotherboardTypeUpdate) ExecX(ctx context.Context) {
	if err := smtu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (smtu *ServerMotherboardTypeUpdate) defaults() {
	if _, ok := smtu.mutation.UpdatedAt(); !ok {
		v := servermotherboardtype.UpdateDefaultUpdatedAt()
		smtu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (smtu *ServerMotherboardTypeUpdate) check() error {
	if v, ok := smtu.mutation.Vendor(); ok {
		if err := servermotherboardtype.VendorValidator(v); err != nil {
			return &ValidationError{Name: "vendor", err: fmt.Errorf(`generated: validator failed for field "ServerMotherboardType.vendor": %w`, err)}
		}
	}
	if v, ok := smtu.mutation.Model(); ok {
		if err := servermotherboardtype.ModelValidator(v); err != nil {
			return &ValidationError{Name: "model", err: fmt.Errorf(`generated: validator failed for field "ServerMotherboardType.model": %w`, err)}
		}
	}
	return nil
}

func (smtu *ServerMotherboardTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := smtu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(servermotherboardtype.Table, servermotherboardtype.Columns, sqlgraph.NewFieldSpec(servermotherboardtype.FieldID, field.TypeString))
	if ps := smtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := smtu.mutation.UpdatedAt(); ok {
		_spec.SetField(servermotherboardtype.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := smtu.mutation.Vendor(); ok {
		_spec.SetField(servermotherboardtype.FieldVendor, field.TypeString, value)
	}
	if value, ok := smtu.mutation.Model(); ok {
		_spec.SetField(servermotherboardtype.FieldModel, field.TypeString, value)
	}
	if smtu.mutation.MotherboardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   servermotherboardtype.MotherboardTable,
			Columns: []string{servermotherboardtype.MotherboardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servermotherboard.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := smtu.mutation.RemovedMotherboardIDs(); len(nodes) > 0 && !smtu.mutation.MotherboardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   servermotherboardtype.MotherboardTable,
			Columns: []string{servermotherboardtype.MotherboardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servermotherboard.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := smtu.mutation.MotherboardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   servermotherboardtype.MotherboardTable,
			Columns: []string{servermotherboardtype.MotherboardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servermotherboard.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, smtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{servermotherboardtype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	smtu.mutation.done = true
	return n, nil
}

// ServerMotherboardTypeUpdateOne is the builder for updating a single ServerMotherboardType entity.
type ServerMotherboardTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ServerMotherboardTypeMutation
}

// SetVendor sets the "vendor" field.
func (smtuo *ServerMotherboardTypeUpdateOne) SetVendor(s string) *ServerMotherboardTypeUpdateOne {
	smtuo.mutation.SetVendor(s)
	return smtuo
}

// SetModel sets the "model" field.
func (smtuo *ServerMotherboardTypeUpdateOne) SetModel(s string) *ServerMotherboardTypeUpdateOne {
	smtuo.mutation.SetModel(s)
	return smtuo
}

// AddMotherboardIDs adds the "motherboard" edge to the ServerMotherboard entity by IDs.
func (smtuo *ServerMotherboardTypeUpdateOne) AddMotherboardIDs(ids ...gidx.PrefixedID) *ServerMotherboardTypeUpdateOne {
	smtuo.mutation.AddMotherboardIDs(ids...)
	return smtuo
}

// AddMotherboard adds the "motherboard" edges to the ServerMotherboard entity.
func (smtuo *ServerMotherboardTypeUpdateOne) AddMotherboard(s ...*ServerMotherboard) *ServerMotherboardTypeUpdateOne {
	ids := make([]gidx.PrefixedID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return smtuo.AddMotherboardIDs(ids...)
}

// Mutation returns the ServerMotherboardTypeMutation object of the builder.
func (smtuo *ServerMotherboardTypeUpdateOne) Mutation() *ServerMotherboardTypeMutation {
	return smtuo.mutation
}

// ClearMotherboard clears all "motherboard" edges to the ServerMotherboard entity.
func (smtuo *ServerMotherboardTypeUpdateOne) ClearMotherboard() *ServerMotherboardTypeUpdateOne {
	smtuo.mutation.ClearMotherboard()
	return smtuo
}

// RemoveMotherboardIDs removes the "motherboard" edge to ServerMotherboard entities by IDs.
func (smtuo *ServerMotherboardTypeUpdateOne) RemoveMotherboardIDs(ids ...gidx.PrefixedID) *ServerMotherboardTypeUpdateOne {
	smtuo.mutation.RemoveMotherboardIDs(ids...)
	return smtuo
}

// RemoveMotherboard removes "motherboard" edges to ServerMotherboard entities.
func (smtuo *ServerMotherboardTypeUpdateOne) RemoveMotherboard(s ...*ServerMotherboard) *ServerMotherboardTypeUpdateOne {
	ids := make([]gidx.PrefixedID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return smtuo.RemoveMotherboardIDs(ids...)
}

// Where appends a list predicates to the ServerMotherboardTypeUpdate builder.
func (smtuo *ServerMotherboardTypeUpdateOne) Where(ps ...predicate.ServerMotherboardType) *ServerMotherboardTypeUpdateOne {
	smtuo.mutation.Where(ps...)
	return smtuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (smtuo *ServerMotherboardTypeUpdateOne) Select(field string, fields ...string) *ServerMotherboardTypeUpdateOne {
	smtuo.fields = append([]string{field}, fields...)
	return smtuo
}

// Save executes the query and returns the updated ServerMotherboardType entity.
func (smtuo *ServerMotherboardTypeUpdateOne) Save(ctx context.Context) (*ServerMotherboardType, error) {
	smtuo.defaults()
	return withHooks(ctx, smtuo.sqlSave, smtuo.mutation, smtuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (smtuo *ServerMotherboardTypeUpdateOne) SaveX(ctx context.Context) *ServerMotherboardType {
	node, err := smtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (smtuo *ServerMotherboardTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := smtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smtuo *ServerMotherboardTypeUpdateOne) ExecX(ctx context.Context) {
	if err := smtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (smtuo *ServerMotherboardTypeUpdateOne) defaults() {
	if _, ok := smtuo.mutation.UpdatedAt(); !ok {
		v := servermotherboardtype.UpdateDefaultUpdatedAt()
		smtuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (smtuo *ServerMotherboardTypeUpdateOne) check() error {
	if v, ok := smtuo.mutation.Vendor(); ok {
		if err := servermotherboardtype.VendorValidator(v); err != nil {
			return &ValidationError{Name: "vendor", err: fmt.Errorf(`generated: validator failed for field "ServerMotherboardType.vendor": %w`, err)}
		}
	}
	if v, ok := smtuo.mutation.Model(); ok {
		if err := servermotherboardtype.ModelValidator(v); err != nil {
			return &ValidationError{Name: "model", err: fmt.Errorf(`generated: validator failed for field "ServerMotherboardType.model": %w`, err)}
		}
	}
	return nil
}

func (smtuo *ServerMotherboardTypeUpdateOne) sqlSave(ctx context.Context) (_node *ServerMotherboardType, err error) {
	if err := smtuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(servermotherboardtype.Table, servermotherboardtype.Columns, sqlgraph.NewFieldSpec(servermotherboardtype.FieldID, field.TypeString))
	id, ok := smtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "ServerMotherboardType.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := smtuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, servermotherboardtype.FieldID)
		for _, f := range fields {
			if !servermotherboardtype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != servermotherboardtype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := smtuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := smtuo.mutation.UpdatedAt(); ok {
		_spec.SetField(servermotherboardtype.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := smtuo.mutation.Vendor(); ok {
		_spec.SetField(servermotherboardtype.FieldVendor, field.TypeString, value)
	}
	if value, ok := smtuo.mutation.Model(); ok {
		_spec.SetField(servermotherboardtype.FieldModel, field.TypeString, value)
	}
	if smtuo.mutation.MotherboardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   servermotherboardtype.MotherboardTable,
			Columns: []string{servermotherboardtype.MotherboardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servermotherboard.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := smtuo.mutation.RemovedMotherboardIDs(); len(nodes) > 0 && !smtuo.mutation.MotherboardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   servermotherboardtype.MotherboardTable,
			Columns: []string{servermotherboardtype.MotherboardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servermotherboard.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := smtuo.mutation.MotherboardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   servermotherboardtype.MotherboardTable,
			Columns: []string{servermotherboardtype.MotherboardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servermotherboard.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ServerMotherboardType{config: smtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, smtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{servermotherboardtype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	smtuo.mutation.done = true
	return _node, nil
}
