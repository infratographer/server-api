// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package servernetworkport

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"go.infratographer.com/server-api/internal/ent/generated/predicate"
	"go.infratographer.com/x/gidx"
)

// ID filters vertices based on their ID field.
func ID(id gidx.PrefixedID) predicate.ServerNetworkPort {
	return predicate.ServerNetworkPort(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id gidx.PrefixedID) predicate.ServerNetworkPort {
	return predicate.ServerNetworkPort(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id gidx.PrefixedID) predicate.ServerNetworkPort {
	return predicate.ServerNetworkPort(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...gidx.PrefixedID) predicate.ServerNetworkPort {
	return predicate.ServerNetworkPort(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...gidx.PrefixedID) predicate.ServerNetworkPort {
	return predicate.ServerNetworkPort(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id gidx.PrefixedID) predicate.ServerNetworkPort {
	return predicate.ServerNetworkPort(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id gidx.PrefixedID) predicate.ServerNetworkPort {
	return predicate.ServerNetworkPort(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id gidx.PrefixedID) predicate.ServerNetworkPort {
	return predicate.ServerNetworkPort(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id gidx.PrefixedID) predicate.ServerNetworkPort {
	return predicate.ServerNetworkPort(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ServerNetworkPort {
	return predicate.ServerNetworkPort(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ServerNetworkPort {
	return predicate.ServerNetworkPort(sql.FieldEQ(FieldUpdatedAt, v))
}

// MACAddress applies equality check predicate on the "mac_address" field. It's identical to MACAddressEQ.
func MACAddress(v string) predicate.ServerNetworkPort {
	return predicate.ServerNetworkPort(sql.FieldEQ(FieldMACAddress, v))
}

// NetworkCardID applies equality check predicate on the "network_card_id" field. It's identical to NetworkCardIDEQ.
func NetworkCardID(v gidx.PrefixedID) predicate.ServerNetworkPort {
	return predicate.ServerNetworkPort(sql.FieldEQ(FieldNetworkCardID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ServerNetworkPort {
	return predicate.ServerNetworkPort(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ServerNetworkPort {
	return predicate.ServerNetworkPort(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ServerNetworkPort {
	return predicate.ServerNetworkPort(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ServerNetworkPort {
	return predicate.ServerNetworkPort(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ServerNetworkPort {
	return predicate.ServerNetworkPort(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ServerNetworkPort {
	return predicate.ServerNetworkPort(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ServerNetworkPort {
	return predicate.ServerNetworkPort(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ServerNetworkPort {
	return predicate.ServerNetworkPort(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ServerNetworkPort {
	return predicate.ServerNetworkPort(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ServerNetworkPort {
	return predicate.ServerNetworkPort(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ServerNetworkPort {
	return predicate.ServerNetworkPort(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ServerNetworkPort {
	return predicate.ServerNetworkPort(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ServerNetworkPort {
	return predicate.ServerNetworkPort(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ServerNetworkPort {
	return predicate.ServerNetworkPort(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ServerNetworkPort {
	return predicate.ServerNetworkPort(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ServerNetworkPort {
	return predicate.ServerNetworkPort(sql.FieldLTE(FieldUpdatedAt, v))
}

// MACAddressEQ applies the EQ predicate on the "mac_address" field.
func MACAddressEQ(v string) predicate.ServerNetworkPort {
	return predicate.ServerNetworkPort(sql.FieldEQ(FieldMACAddress, v))
}

// MACAddressNEQ applies the NEQ predicate on the "mac_address" field.
func MACAddressNEQ(v string) predicate.ServerNetworkPort {
	return predicate.ServerNetworkPort(sql.FieldNEQ(FieldMACAddress, v))
}

// MACAddressIn applies the In predicate on the "mac_address" field.
func MACAddressIn(vs ...string) predicate.ServerNetworkPort {
	return predicate.ServerNetworkPort(sql.FieldIn(FieldMACAddress, vs...))
}

// MACAddressNotIn applies the NotIn predicate on the "mac_address" field.
func MACAddressNotIn(vs ...string) predicate.ServerNetworkPort {
	return predicate.ServerNetworkPort(sql.FieldNotIn(FieldMACAddress, vs...))
}

// MACAddressGT applies the GT predicate on the "mac_address" field.
func MACAddressGT(v string) predicate.ServerNetworkPort {
	return predicate.ServerNetworkPort(sql.FieldGT(FieldMACAddress, v))
}

// MACAddressGTE applies the GTE predicate on the "mac_address" field.
func MACAddressGTE(v string) predicate.ServerNetworkPort {
	return predicate.ServerNetworkPort(sql.FieldGTE(FieldMACAddress, v))
}

// MACAddressLT applies the LT predicate on the "mac_address" field.
func MACAddressLT(v string) predicate.ServerNetworkPort {
	return predicate.ServerNetworkPort(sql.FieldLT(FieldMACAddress, v))
}

// MACAddressLTE applies the LTE predicate on the "mac_address" field.
func MACAddressLTE(v string) predicate.ServerNetworkPort {
	return predicate.ServerNetworkPort(sql.FieldLTE(FieldMACAddress, v))
}

// MACAddressContains applies the Contains predicate on the "mac_address" field.
func MACAddressContains(v string) predicate.ServerNetworkPort {
	return predicate.ServerNetworkPort(sql.FieldContains(FieldMACAddress, v))
}

// MACAddressHasPrefix applies the HasPrefix predicate on the "mac_address" field.
func MACAddressHasPrefix(v string) predicate.ServerNetworkPort {
	return predicate.ServerNetworkPort(sql.FieldHasPrefix(FieldMACAddress, v))
}

// MACAddressHasSuffix applies the HasSuffix predicate on the "mac_address" field.
func MACAddressHasSuffix(v string) predicate.ServerNetworkPort {
	return predicate.ServerNetworkPort(sql.FieldHasSuffix(FieldMACAddress, v))
}

// MACAddressEqualFold applies the EqualFold predicate on the "mac_address" field.
func MACAddressEqualFold(v string) predicate.ServerNetworkPort {
	return predicate.ServerNetworkPort(sql.FieldEqualFold(FieldMACAddress, v))
}

// MACAddressContainsFold applies the ContainsFold predicate on the "mac_address" field.
func MACAddressContainsFold(v string) predicate.ServerNetworkPort {
	return predicate.ServerNetworkPort(sql.FieldContainsFold(FieldMACAddress, v))
}

// NetworkCardIDEQ applies the EQ predicate on the "network_card_id" field.
func NetworkCardIDEQ(v gidx.PrefixedID) predicate.ServerNetworkPort {
	return predicate.ServerNetworkPort(sql.FieldEQ(FieldNetworkCardID, v))
}

// NetworkCardIDNEQ applies the NEQ predicate on the "network_card_id" field.
func NetworkCardIDNEQ(v gidx.PrefixedID) predicate.ServerNetworkPort {
	return predicate.ServerNetworkPort(sql.FieldNEQ(FieldNetworkCardID, v))
}

// NetworkCardIDIn applies the In predicate on the "network_card_id" field.
func NetworkCardIDIn(vs ...gidx.PrefixedID) predicate.ServerNetworkPort {
	return predicate.ServerNetworkPort(sql.FieldIn(FieldNetworkCardID, vs...))
}

// NetworkCardIDNotIn applies the NotIn predicate on the "network_card_id" field.
func NetworkCardIDNotIn(vs ...gidx.PrefixedID) predicate.ServerNetworkPort {
	return predicate.ServerNetworkPort(sql.FieldNotIn(FieldNetworkCardID, vs...))
}

// NetworkCardIDGT applies the GT predicate on the "network_card_id" field.
func NetworkCardIDGT(v gidx.PrefixedID) predicate.ServerNetworkPort {
	return predicate.ServerNetworkPort(sql.FieldGT(FieldNetworkCardID, v))
}

// NetworkCardIDGTE applies the GTE predicate on the "network_card_id" field.
func NetworkCardIDGTE(v gidx.PrefixedID) predicate.ServerNetworkPort {
	return predicate.ServerNetworkPort(sql.FieldGTE(FieldNetworkCardID, v))
}

// NetworkCardIDLT applies the LT predicate on the "network_card_id" field.
func NetworkCardIDLT(v gidx.PrefixedID) predicate.ServerNetworkPort {
	return predicate.ServerNetworkPort(sql.FieldLT(FieldNetworkCardID, v))
}

// NetworkCardIDLTE applies the LTE predicate on the "network_card_id" field.
func NetworkCardIDLTE(v gidx.PrefixedID) predicate.ServerNetworkPort {
	return predicate.ServerNetworkPort(sql.FieldLTE(FieldNetworkCardID, v))
}

// NetworkCardIDContains applies the Contains predicate on the "network_card_id" field.
func NetworkCardIDContains(v gidx.PrefixedID) predicate.ServerNetworkPort {
	vc := string(v)
	return predicate.ServerNetworkPort(sql.FieldContains(FieldNetworkCardID, vc))
}

// NetworkCardIDHasPrefix applies the HasPrefix predicate on the "network_card_id" field.
func NetworkCardIDHasPrefix(v gidx.PrefixedID) predicate.ServerNetworkPort {
	vc := string(v)
	return predicate.ServerNetworkPort(sql.FieldHasPrefix(FieldNetworkCardID, vc))
}

// NetworkCardIDHasSuffix applies the HasSuffix predicate on the "network_card_id" field.
func NetworkCardIDHasSuffix(v gidx.PrefixedID) predicate.ServerNetworkPort {
	vc := string(v)
	return predicate.ServerNetworkPort(sql.FieldHasSuffix(FieldNetworkCardID, vc))
}

// NetworkCardIDEqualFold applies the EqualFold predicate on the "network_card_id" field.
func NetworkCardIDEqualFold(v gidx.PrefixedID) predicate.ServerNetworkPort {
	vc := string(v)
	return predicate.ServerNetworkPort(sql.FieldEqualFold(FieldNetworkCardID, vc))
}

// NetworkCardIDContainsFold applies the ContainsFold predicate on the "network_card_id" field.
func NetworkCardIDContainsFold(v gidx.PrefixedID) predicate.ServerNetworkPort {
	vc := string(v)
	return predicate.ServerNetworkPort(sql.FieldContainsFold(FieldNetworkCardID, vc))
}

// HasNetworkCard applies the HasEdge predicate on the "network_card" edge.
func HasNetworkCard() predicate.ServerNetworkPort {
	return predicate.ServerNetworkPort(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, NetworkCardTable, NetworkCardColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNetworkCardWith applies the HasEdge predicate on the "network_card" edge with a given conditions (other predicates).
func HasNetworkCardWith(preds ...predicate.ServerNetworkCard) predicate.ServerNetworkPort {
	return predicate.ServerNetworkPort(func(s *sql.Selector) {
		step := newNetworkCardStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ServerNetworkPort) predicate.ServerNetworkPort {
	return predicate.ServerNetworkPort(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ServerNetworkPort) predicate.ServerNetworkPort {
	return predicate.ServerNetworkPort(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ServerNetworkPort) predicate.ServerNetworkPort {
	return predicate.ServerNetworkPort(func(s *sql.Selector) {
		p(s.Not())
	})
}
