// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"go.infratographer.com/server-api/internal/ent/generated/predicate"
	"go.infratographer.com/server-api/internal/ent/generated/serverharddrive"
	"go.infratographer.com/server-api/internal/ent/generated/serverharddrivetype"
	"go.infratographer.com/x/gidx"
)

// ServerHardDriveTypeUpdate is the builder for updating ServerHardDriveType entities.
type ServerHardDriveTypeUpdate struct {
	config
	hooks    []Hook
	mutation *ServerHardDriveTypeMutation
}

// Where appends a list predicates to the ServerHardDriveTypeUpdate builder.
func (shdtu *ServerHardDriveTypeUpdate) Where(ps ...predicate.ServerHardDriveType) *ServerHardDriveTypeUpdate {
	shdtu.mutation.Where(ps...)
	return shdtu
}

// SetVendor sets the "vendor" field.
func (shdtu *ServerHardDriveTypeUpdate) SetVendor(s string) *ServerHardDriveTypeUpdate {
	shdtu.mutation.SetVendor(s)
	return shdtu
}

// SetModel sets the "model" field.
func (shdtu *ServerHardDriveTypeUpdate) SetModel(s string) *ServerHardDriveTypeUpdate {
	shdtu.mutation.SetModel(s)
	return shdtu
}

// SetSpeed sets the "speed" field.
func (shdtu *ServerHardDriveTypeUpdate) SetSpeed(s string) *ServerHardDriveTypeUpdate {
	shdtu.mutation.SetSpeed(s)
	return shdtu
}

// SetType sets the "type" field.
func (shdtu *ServerHardDriveTypeUpdate) SetType(s serverharddrivetype.Type) *ServerHardDriveTypeUpdate {
	shdtu.mutation.SetType(s)
	return shdtu
}

// SetCapacity sets the "capacity" field.
func (shdtu *ServerHardDriveTypeUpdate) SetCapacity(s string) *ServerHardDriveTypeUpdate {
	shdtu.mutation.SetCapacity(s)
	return shdtu
}

// AddHardDriveIDs adds the "hard_drive" edge to the ServerHardDrive entity by IDs.
func (shdtu *ServerHardDriveTypeUpdate) AddHardDriveIDs(ids ...gidx.PrefixedID) *ServerHardDriveTypeUpdate {
	shdtu.mutation.AddHardDriveIDs(ids...)
	return shdtu
}

// AddHardDrive adds the "hard_drive" edges to the ServerHardDrive entity.
func (shdtu *ServerHardDriveTypeUpdate) AddHardDrive(s ...*ServerHardDrive) *ServerHardDriveTypeUpdate {
	ids := make([]gidx.PrefixedID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return shdtu.AddHardDriveIDs(ids...)
}

// Mutation returns the ServerHardDriveTypeMutation object of the builder.
func (shdtu *ServerHardDriveTypeUpdate) Mutation() *ServerHardDriveTypeMutation {
	return shdtu.mutation
}

// ClearHardDrive clears all "hard_drive" edges to the ServerHardDrive entity.
func (shdtu *ServerHardDriveTypeUpdate) ClearHardDrive() *ServerHardDriveTypeUpdate {
	shdtu.mutation.ClearHardDrive()
	return shdtu
}

// RemoveHardDriveIDs removes the "hard_drive" edge to ServerHardDrive entities by IDs.
func (shdtu *ServerHardDriveTypeUpdate) RemoveHardDriveIDs(ids ...gidx.PrefixedID) *ServerHardDriveTypeUpdate {
	shdtu.mutation.RemoveHardDriveIDs(ids...)
	return shdtu
}

// RemoveHardDrive removes "hard_drive" edges to ServerHardDrive entities.
func (shdtu *ServerHardDriveTypeUpdate) RemoveHardDrive(s ...*ServerHardDrive) *ServerHardDriveTypeUpdate {
	ids := make([]gidx.PrefixedID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return shdtu.RemoveHardDriveIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (shdtu *ServerHardDriveTypeUpdate) Save(ctx context.Context) (int, error) {
	shdtu.defaults()
	return withHooks(ctx, shdtu.sqlSave, shdtu.mutation, shdtu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (shdtu *ServerHardDriveTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := shdtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (shdtu *ServerHardDriveTypeUpdate) Exec(ctx context.Context) error {
	_, err := shdtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (shdtu *ServerHardDriveTypeUpdate) ExecX(ctx context.Context) {
	if err := shdtu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (shdtu *ServerHardDriveTypeUpdate) defaults() {
	if _, ok := shdtu.mutation.UpdatedAt(); !ok {
		v := serverharddrivetype.UpdateDefaultUpdatedAt()
		shdtu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (shdtu *ServerHardDriveTypeUpdate) check() error {
	if v, ok := shdtu.mutation.Vendor(); ok {
		if err := serverharddrivetype.VendorValidator(v); err != nil {
			return &ValidationError{Name: "vendor", err: fmt.Errorf(`generated: validator failed for field "ServerHardDriveType.vendor": %w`, err)}
		}
	}
	if v, ok := shdtu.mutation.Model(); ok {
		if err := serverharddrivetype.ModelValidator(v); err != nil {
			return &ValidationError{Name: "model", err: fmt.Errorf(`generated: validator failed for field "ServerHardDriveType.model": %w`, err)}
		}
	}
	if v, ok := shdtu.mutation.Speed(); ok {
		if err := serverharddrivetype.SpeedValidator(v); err != nil {
			return &ValidationError{Name: "speed", err: fmt.Errorf(`generated: validator failed for field "ServerHardDriveType.speed": %w`, err)}
		}
	}
	if v, ok := shdtu.mutation.GetType(); ok {
		if err := serverharddrivetype.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`generated: validator failed for field "ServerHardDriveType.type": %w`, err)}
		}
	}
	if v, ok := shdtu.mutation.Capacity(); ok {
		if err := serverharddrivetype.CapacityValidator(v); err != nil {
			return &ValidationError{Name: "capacity", err: fmt.Errorf(`generated: validator failed for field "ServerHardDriveType.capacity": %w`, err)}
		}
	}
	return nil
}

func (shdtu *ServerHardDriveTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := shdtu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(serverharddrivetype.Table, serverharddrivetype.Columns, sqlgraph.NewFieldSpec(serverharddrivetype.FieldID, field.TypeString))
	if ps := shdtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := shdtu.mutation.UpdatedAt(); ok {
		_spec.SetField(serverharddrivetype.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := shdtu.mutation.Vendor(); ok {
		_spec.SetField(serverharddrivetype.FieldVendor, field.TypeString, value)
	}
	if value, ok := shdtu.mutation.Model(); ok {
		_spec.SetField(serverharddrivetype.FieldModel, field.TypeString, value)
	}
	if value, ok := shdtu.mutation.Speed(); ok {
		_spec.SetField(serverharddrivetype.FieldSpeed, field.TypeString, value)
	}
	if value, ok := shdtu.mutation.GetType(); ok {
		_spec.SetField(serverharddrivetype.FieldType, field.TypeEnum, value)
	}
	if value, ok := shdtu.mutation.Capacity(); ok {
		_spec.SetField(serverharddrivetype.FieldCapacity, field.TypeString, value)
	}
	if shdtu.mutation.HardDriveCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   serverharddrivetype.HardDriveTable,
			Columns: []string{serverharddrivetype.HardDriveColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serverharddrive.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := shdtu.mutation.RemovedHardDriveIDs(); len(nodes) > 0 && !shdtu.mutation.HardDriveCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   serverharddrivetype.HardDriveTable,
			Columns: []string{serverharddrivetype.HardDriveColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serverharddrive.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := shdtu.mutation.HardDriveIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   serverharddrivetype.HardDriveTable,
			Columns: []string{serverharddrivetype.HardDriveColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serverharddrive.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, shdtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{serverharddrivetype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	shdtu.mutation.done = true
	return n, nil
}

// ServerHardDriveTypeUpdateOne is the builder for updating a single ServerHardDriveType entity.
type ServerHardDriveTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ServerHardDriveTypeMutation
}

// SetVendor sets the "vendor" field.
func (shdtuo *ServerHardDriveTypeUpdateOne) SetVendor(s string) *ServerHardDriveTypeUpdateOne {
	shdtuo.mutation.SetVendor(s)
	return shdtuo
}

// SetModel sets the "model" field.
func (shdtuo *ServerHardDriveTypeUpdateOne) SetModel(s string) *ServerHardDriveTypeUpdateOne {
	shdtuo.mutation.SetModel(s)
	return shdtuo
}

// SetSpeed sets the "speed" field.
func (shdtuo *ServerHardDriveTypeUpdateOne) SetSpeed(s string) *ServerHardDriveTypeUpdateOne {
	shdtuo.mutation.SetSpeed(s)
	return shdtuo
}

// SetType sets the "type" field.
func (shdtuo *ServerHardDriveTypeUpdateOne) SetType(s serverharddrivetype.Type) *ServerHardDriveTypeUpdateOne {
	shdtuo.mutation.SetType(s)
	return shdtuo
}

// SetCapacity sets the "capacity" field.
func (shdtuo *ServerHardDriveTypeUpdateOne) SetCapacity(s string) *ServerHardDriveTypeUpdateOne {
	shdtuo.mutation.SetCapacity(s)
	return shdtuo
}

// AddHardDriveIDs adds the "hard_drive" edge to the ServerHardDrive entity by IDs.
func (shdtuo *ServerHardDriveTypeUpdateOne) AddHardDriveIDs(ids ...gidx.PrefixedID) *ServerHardDriveTypeUpdateOne {
	shdtuo.mutation.AddHardDriveIDs(ids...)
	return shdtuo
}

// AddHardDrive adds the "hard_drive" edges to the ServerHardDrive entity.
func (shdtuo *ServerHardDriveTypeUpdateOne) AddHardDrive(s ...*ServerHardDrive) *ServerHardDriveTypeUpdateOne {
	ids := make([]gidx.PrefixedID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return shdtuo.AddHardDriveIDs(ids...)
}

// Mutation returns the ServerHardDriveTypeMutation object of the builder.
func (shdtuo *ServerHardDriveTypeUpdateOne) Mutation() *ServerHardDriveTypeMutation {
	return shdtuo.mutation
}

// ClearHardDrive clears all "hard_drive" edges to the ServerHardDrive entity.
func (shdtuo *ServerHardDriveTypeUpdateOne) ClearHardDrive() *ServerHardDriveTypeUpdateOne {
	shdtuo.mutation.ClearHardDrive()
	return shdtuo
}

// RemoveHardDriveIDs removes the "hard_drive" edge to ServerHardDrive entities by IDs.
func (shdtuo *ServerHardDriveTypeUpdateOne) RemoveHardDriveIDs(ids ...gidx.PrefixedID) *ServerHardDriveTypeUpdateOne {
	shdtuo.mutation.RemoveHardDriveIDs(ids...)
	return shdtuo
}

// RemoveHardDrive removes "hard_drive" edges to ServerHardDrive entities.
func (shdtuo *ServerHardDriveTypeUpdateOne) RemoveHardDrive(s ...*ServerHardDrive) *ServerHardDriveTypeUpdateOne {
	ids := make([]gidx.PrefixedID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return shdtuo.RemoveHardDriveIDs(ids...)
}

// Where appends a list predicates to the ServerHardDriveTypeUpdate builder.
func (shdtuo *ServerHardDriveTypeUpdateOne) Where(ps ...predicate.ServerHardDriveType) *ServerHardDriveTypeUpdateOne {
	shdtuo.mutation.Where(ps...)
	return shdtuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (shdtuo *ServerHardDriveTypeUpdateOne) Select(field string, fields ...string) *ServerHardDriveTypeUpdateOne {
	shdtuo.fields = append([]string{field}, fields...)
	return shdtuo
}

// Save executes the query and returns the updated ServerHardDriveType entity.
func (shdtuo *ServerHardDriveTypeUpdateOne) Save(ctx context.Context) (*ServerHardDriveType, error) {
	shdtuo.defaults()
	return withHooks(ctx, shdtuo.sqlSave, shdtuo.mutation, shdtuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (shdtuo *ServerHardDriveTypeUpdateOne) SaveX(ctx context.Context) *ServerHardDriveType {
	node, err := shdtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (shdtuo *ServerHardDriveTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := shdtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (shdtuo *ServerHardDriveTypeUpdateOne) ExecX(ctx context.Context) {
	if err := shdtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (shdtuo *ServerHardDriveTypeUpdateOne) defaults() {
	if _, ok := shdtuo.mutation.UpdatedAt(); !ok {
		v := serverharddrivetype.UpdateDefaultUpdatedAt()
		shdtuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (shdtuo *ServerHardDriveTypeUpdateOne) check() error {
	if v, ok := shdtuo.mutation.Vendor(); ok {
		if err := serverharddrivetype.VendorValidator(v); err != nil {
			return &ValidationError{Name: "vendor", err: fmt.Errorf(`generated: validator failed for field "ServerHardDriveType.vendor": %w`, err)}
		}
	}
	if v, ok := shdtuo.mutation.Model(); ok {
		if err := serverharddrivetype.ModelValidator(v); err != nil {
			return &ValidationError{Name: "model", err: fmt.Errorf(`generated: validator failed for field "ServerHardDriveType.model": %w`, err)}
		}
	}
	if v, ok := shdtuo.mutation.Speed(); ok {
		if err := serverharddrivetype.SpeedValidator(v); err != nil {
			return &ValidationError{Name: "speed", err: fmt.Errorf(`generated: validator failed for field "ServerHardDriveType.speed": %w`, err)}
		}
	}
	if v, ok := shdtuo.mutation.GetType(); ok {
		if err := serverharddrivetype.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`generated: validator failed for field "ServerHardDriveType.type": %w`, err)}
		}
	}
	if v, ok := shdtuo.mutation.Capacity(); ok {
		if err := serverharddrivetype.CapacityValidator(v); err != nil {
			return &ValidationError{Name: "capacity", err: fmt.Errorf(`generated: validator failed for field "ServerHardDriveType.capacity": %w`, err)}
		}
	}
	return nil
}

func (shdtuo *ServerHardDriveTypeUpdateOne) sqlSave(ctx context.Context) (_node *ServerHardDriveType, err error) {
	if err := shdtuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(serverharddrivetype.Table, serverharddrivetype.Columns, sqlgraph.NewFieldSpec(serverharddrivetype.FieldID, field.TypeString))
	id, ok := shdtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "ServerHardDriveType.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := shdtuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, serverharddrivetype.FieldID)
		for _, f := range fields {
			if !serverharddrivetype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != serverharddrivetype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := shdtuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := shdtuo.mutation.UpdatedAt(); ok {
		_spec.SetField(serverharddrivetype.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := shdtuo.mutation.Vendor(); ok {
		_spec.SetField(serverharddrivetype.FieldVendor, field.TypeString, value)
	}
	if value, ok := shdtuo.mutation.Model(); ok {
		_spec.SetField(serverharddrivetype.FieldModel, field.TypeString, value)
	}
	if value, ok := shdtuo.mutation.Speed(); ok {
		_spec.SetField(serverharddrivetype.FieldSpeed, field.TypeString, value)
	}
	if value, ok := shdtuo.mutation.GetType(); ok {
		_spec.SetField(serverharddrivetype.FieldType, field.TypeEnum, value)
	}
	if value, ok := shdtuo.mutation.Capacity(); ok {
		_spec.SetField(serverharddrivetype.FieldCapacity, field.TypeString, value)
	}
	if shdtuo.mutation.HardDriveCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   serverharddrivetype.HardDriveTable,
			Columns: []string{serverharddrivetype.HardDriveColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serverharddrive.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := shdtuo.mutation.RemovedHardDriveIDs(); len(nodes) > 0 && !shdtuo.mutation.HardDriveCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   serverharddrivetype.HardDriveTable,
			Columns: []string{serverharddrivetype.HardDriveColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serverharddrive.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := shdtuo.mutation.HardDriveIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   serverharddrivetype.HardDriveTable,
			Columns: []string{serverharddrivetype.HardDriveColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serverharddrive.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ServerHardDriveType{config: shdtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, shdtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{serverharddrivetype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	shdtuo.mutation.done = true
	return _node, nil
}
