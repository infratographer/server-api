// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package generated

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"go.infratographer.com/server-api/internal/ent/generated/predicate"
	"go.infratographer.com/server-api/internal/ent/generated/server"
	"go.infratographer.com/server-api/internal/ent/generated/serverpowersupply"
	"go.infratographer.com/server-api/internal/ent/generated/serverpowersupplytype"
	"go.infratographer.com/x/gidx"
)

// ServerPowerSupplyQuery is the builder for querying ServerPowerSupply entities.
type ServerPowerSupplyQuery struct {
	config
	ctx                       *QueryContext
	order                     []serverpowersupply.OrderOption
	inters                    []Interceptor
	predicates                []predicate.ServerPowerSupply
	withServer                *ServerQuery
	withServerPowerSupplyType *ServerPowerSupplyTypeQuery
	modifiers                 []func(*sql.Selector)
	loadTotal                 []func(context.Context, []*ServerPowerSupply) error
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ServerPowerSupplyQuery builder.
func (spsq *ServerPowerSupplyQuery) Where(ps ...predicate.ServerPowerSupply) *ServerPowerSupplyQuery {
	spsq.predicates = append(spsq.predicates, ps...)
	return spsq
}

// Limit the number of records to be returned by this query.
func (spsq *ServerPowerSupplyQuery) Limit(limit int) *ServerPowerSupplyQuery {
	spsq.ctx.Limit = &limit
	return spsq
}

// Offset to start from.
func (spsq *ServerPowerSupplyQuery) Offset(offset int) *ServerPowerSupplyQuery {
	spsq.ctx.Offset = &offset
	return spsq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (spsq *ServerPowerSupplyQuery) Unique(unique bool) *ServerPowerSupplyQuery {
	spsq.ctx.Unique = &unique
	return spsq
}

// Order specifies how the records should be ordered.
func (spsq *ServerPowerSupplyQuery) Order(o ...serverpowersupply.OrderOption) *ServerPowerSupplyQuery {
	spsq.order = append(spsq.order, o...)
	return spsq
}

// QueryServer chains the current query on the "server" edge.
func (spsq *ServerPowerSupplyQuery) QueryServer() *ServerQuery {
	query := (&ServerClient{config: spsq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := spsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := spsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(serverpowersupply.Table, serverpowersupply.FieldID, selector),
			sqlgraph.To(server.Table, server.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, serverpowersupply.ServerTable, serverpowersupply.ServerColumn),
		)
		fromU = sqlgraph.SetNeighbors(spsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryServerPowerSupplyType chains the current query on the "server_power_supply_type" edge.
func (spsq *ServerPowerSupplyQuery) QueryServerPowerSupplyType() *ServerPowerSupplyTypeQuery {
	query := (&ServerPowerSupplyTypeClient{config: spsq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := spsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := spsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(serverpowersupply.Table, serverpowersupply.FieldID, selector),
			sqlgraph.To(serverpowersupplytype.Table, serverpowersupplytype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, serverpowersupply.ServerPowerSupplyTypeTable, serverpowersupply.ServerPowerSupplyTypeColumn),
		)
		fromU = sqlgraph.SetNeighbors(spsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ServerPowerSupply entity from the query.
// Returns a *NotFoundError when no ServerPowerSupply was found.
func (spsq *ServerPowerSupplyQuery) First(ctx context.Context) (*ServerPowerSupply, error) {
	nodes, err := spsq.Limit(1).All(setContextOp(ctx, spsq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{serverpowersupply.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (spsq *ServerPowerSupplyQuery) FirstX(ctx context.Context) *ServerPowerSupply {
	node, err := spsq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ServerPowerSupply ID from the query.
// Returns a *NotFoundError when no ServerPowerSupply ID was found.
func (spsq *ServerPowerSupplyQuery) FirstID(ctx context.Context) (id gidx.PrefixedID, err error) {
	var ids []gidx.PrefixedID
	if ids, err = spsq.Limit(1).IDs(setContextOp(ctx, spsq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{serverpowersupply.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (spsq *ServerPowerSupplyQuery) FirstIDX(ctx context.Context) gidx.PrefixedID {
	id, err := spsq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ServerPowerSupply entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ServerPowerSupply entity is found.
// Returns a *NotFoundError when no ServerPowerSupply entities are found.
func (spsq *ServerPowerSupplyQuery) Only(ctx context.Context) (*ServerPowerSupply, error) {
	nodes, err := spsq.Limit(2).All(setContextOp(ctx, spsq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{serverpowersupply.Label}
	default:
		return nil, &NotSingularError{serverpowersupply.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (spsq *ServerPowerSupplyQuery) OnlyX(ctx context.Context) *ServerPowerSupply {
	node, err := spsq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ServerPowerSupply ID in the query.
// Returns a *NotSingularError when more than one ServerPowerSupply ID is found.
// Returns a *NotFoundError when no entities are found.
func (spsq *ServerPowerSupplyQuery) OnlyID(ctx context.Context) (id gidx.PrefixedID, err error) {
	var ids []gidx.PrefixedID
	if ids, err = spsq.Limit(2).IDs(setContextOp(ctx, spsq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{serverpowersupply.Label}
	default:
		err = &NotSingularError{serverpowersupply.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (spsq *ServerPowerSupplyQuery) OnlyIDX(ctx context.Context) gidx.PrefixedID {
	id, err := spsq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ServerPowerSupplies.
func (spsq *ServerPowerSupplyQuery) All(ctx context.Context) ([]*ServerPowerSupply, error) {
	ctx = setContextOp(ctx, spsq.ctx, "All")
	if err := spsq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ServerPowerSupply, *ServerPowerSupplyQuery]()
	return withInterceptors[[]*ServerPowerSupply](ctx, spsq, qr, spsq.inters)
}

// AllX is like All, but panics if an error occurs.
func (spsq *ServerPowerSupplyQuery) AllX(ctx context.Context) []*ServerPowerSupply {
	nodes, err := spsq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ServerPowerSupply IDs.
func (spsq *ServerPowerSupplyQuery) IDs(ctx context.Context) (ids []gidx.PrefixedID, err error) {
	if spsq.ctx.Unique == nil && spsq.path != nil {
		spsq.Unique(true)
	}
	ctx = setContextOp(ctx, spsq.ctx, "IDs")
	if err = spsq.Select(serverpowersupply.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (spsq *ServerPowerSupplyQuery) IDsX(ctx context.Context) []gidx.PrefixedID {
	ids, err := spsq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (spsq *ServerPowerSupplyQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, spsq.ctx, "Count")
	if err := spsq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, spsq, querierCount[*ServerPowerSupplyQuery](), spsq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (spsq *ServerPowerSupplyQuery) CountX(ctx context.Context) int {
	count, err := spsq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (spsq *ServerPowerSupplyQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, spsq.ctx, "Exist")
	switch _, err := spsq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("generated: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (spsq *ServerPowerSupplyQuery) ExistX(ctx context.Context) bool {
	exist, err := spsq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ServerPowerSupplyQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (spsq *ServerPowerSupplyQuery) Clone() *ServerPowerSupplyQuery {
	if spsq == nil {
		return nil
	}
	return &ServerPowerSupplyQuery{
		config:                    spsq.config,
		ctx:                       spsq.ctx.Clone(),
		order:                     append([]serverpowersupply.OrderOption{}, spsq.order...),
		inters:                    append([]Interceptor{}, spsq.inters...),
		predicates:                append([]predicate.ServerPowerSupply{}, spsq.predicates...),
		withServer:                spsq.withServer.Clone(),
		withServerPowerSupplyType: spsq.withServerPowerSupplyType.Clone(),
		// clone intermediate query.
		sql:  spsq.sql.Clone(),
		path: spsq.path,
	}
}

// WithServer tells the query-builder to eager-load the nodes that are connected to
// the "server" edge. The optional arguments are used to configure the query builder of the edge.
func (spsq *ServerPowerSupplyQuery) WithServer(opts ...func(*ServerQuery)) *ServerPowerSupplyQuery {
	query := (&ServerClient{config: spsq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	spsq.withServer = query
	return spsq
}

// WithServerPowerSupplyType tells the query-builder to eager-load the nodes that are connected to
// the "server_power_supply_type" edge. The optional arguments are used to configure the query builder of the edge.
func (spsq *ServerPowerSupplyQuery) WithServerPowerSupplyType(opts ...func(*ServerPowerSupplyTypeQuery)) *ServerPowerSupplyQuery {
	query := (&ServerPowerSupplyTypeClient{config: spsq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	spsq.withServerPowerSupplyType = query
	return spsq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ServerPowerSupply.Query().
//		GroupBy(serverpowersupply.FieldCreatedAt).
//		Aggregate(generated.Count()).
//		Scan(ctx, &v)
func (spsq *ServerPowerSupplyQuery) GroupBy(field string, fields ...string) *ServerPowerSupplyGroupBy {
	spsq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ServerPowerSupplyGroupBy{build: spsq}
	grbuild.flds = &spsq.ctx.Fields
	grbuild.label = serverpowersupply.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.ServerPowerSupply.Query().
//		Select(serverpowersupply.FieldCreatedAt).
//		Scan(ctx, &v)
func (spsq *ServerPowerSupplyQuery) Select(fields ...string) *ServerPowerSupplySelect {
	spsq.ctx.Fields = append(spsq.ctx.Fields, fields...)
	sbuild := &ServerPowerSupplySelect{ServerPowerSupplyQuery: spsq}
	sbuild.label = serverpowersupply.Label
	sbuild.flds, sbuild.scan = &spsq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ServerPowerSupplySelect configured with the given aggregations.
func (spsq *ServerPowerSupplyQuery) Aggregate(fns ...AggregateFunc) *ServerPowerSupplySelect {
	return spsq.Select().Aggregate(fns...)
}

func (spsq *ServerPowerSupplyQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range spsq.inters {
		if inter == nil {
			return fmt.Errorf("generated: uninitialized interceptor (forgotten import generated/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, spsq); err != nil {
				return err
			}
		}
	}
	for _, f := range spsq.ctx.Fields {
		if !serverpowersupply.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
		}
	}
	if spsq.path != nil {
		prev, err := spsq.path(ctx)
		if err != nil {
			return err
		}
		spsq.sql = prev
	}
	return nil
}

func (spsq *ServerPowerSupplyQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ServerPowerSupply, error) {
	var (
		nodes       = []*ServerPowerSupply{}
		_spec       = spsq.querySpec()
		loadedTypes = [2]bool{
			spsq.withServer != nil,
			spsq.withServerPowerSupplyType != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ServerPowerSupply).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ServerPowerSupply{config: spsq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(spsq.modifiers) > 0 {
		_spec.Modifiers = spsq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, spsq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := spsq.withServer; query != nil {
		if err := spsq.loadServer(ctx, query, nodes, nil,
			func(n *ServerPowerSupply, e *Server) { n.Edges.Server = e }); err != nil {
			return nil, err
		}
	}
	if query := spsq.withServerPowerSupplyType; query != nil {
		if err := spsq.loadServerPowerSupplyType(ctx, query, nodes, nil,
			func(n *ServerPowerSupply, e *ServerPowerSupplyType) { n.Edges.ServerPowerSupplyType = e }); err != nil {
			return nil, err
		}
	}
	for i := range spsq.loadTotal {
		if err := spsq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (spsq *ServerPowerSupplyQuery) loadServer(ctx context.Context, query *ServerQuery, nodes []*ServerPowerSupply, init func(*ServerPowerSupply), assign func(*ServerPowerSupply, *Server)) error {
	ids := make([]gidx.PrefixedID, 0, len(nodes))
	nodeids := make(map[gidx.PrefixedID][]*ServerPowerSupply)
	for i := range nodes {
		fk := nodes[i].ServerID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(server.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "server_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (spsq *ServerPowerSupplyQuery) loadServerPowerSupplyType(ctx context.Context, query *ServerPowerSupplyTypeQuery, nodes []*ServerPowerSupply, init func(*ServerPowerSupply), assign func(*ServerPowerSupply, *ServerPowerSupplyType)) error {
	ids := make([]gidx.PrefixedID, 0, len(nodes))
	nodeids := make(map[gidx.PrefixedID][]*ServerPowerSupply)
	for i := range nodes {
		fk := nodes[i].ServerPowerSupplyTypeID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(serverpowersupplytype.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "server_power_supply_type_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (spsq *ServerPowerSupplyQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := spsq.querySpec()
	if len(spsq.modifiers) > 0 {
		_spec.Modifiers = spsq.modifiers
	}
	_spec.Node.Columns = spsq.ctx.Fields
	if len(spsq.ctx.Fields) > 0 {
		_spec.Unique = spsq.ctx.Unique != nil && *spsq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, spsq.driver, _spec)
}

func (spsq *ServerPowerSupplyQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(serverpowersupply.Table, serverpowersupply.Columns, sqlgraph.NewFieldSpec(serverpowersupply.FieldID, field.TypeString))
	_spec.From = spsq.sql
	if unique := spsq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if spsq.path != nil {
		_spec.Unique = true
	}
	if fields := spsq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, serverpowersupply.FieldID)
		for i := range fields {
			if fields[i] != serverpowersupply.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if spsq.withServer != nil {
			_spec.Node.AddColumnOnce(serverpowersupply.FieldServerID)
		}
		if spsq.withServerPowerSupplyType != nil {
			_spec.Node.AddColumnOnce(serverpowersupply.FieldServerPowerSupplyTypeID)
		}
	}
	if ps := spsq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := spsq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := spsq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := spsq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (spsq *ServerPowerSupplyQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(spsq.driver.Dialect())
	t1 := builder.Table(serverpowersupply.Table)
	columns := spsq.ctx.Fields
	if len(columns) == 0 {
		columns = serverpowersupply.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if spsq.sql != nil {
		selector = spsq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if spsq.ctx.Unique != nil && *spsq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range spsq.predicates {
		p(selector)
	}
	for _, p := range spsq.order {
		p(selector)
	}
	if offset := spsq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := spsq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ServerPowerSupplyGroupBy is the group-by builder for ServerPowerSupply entities.
type ServerPowerSupplyGroupBy struct {
	selector
	build *ServerPowerSupplyQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (spsgb *ServerPowerSupplyGroupBy) Aggregate(fns ...AggregateFunc) *ServerPowerSupplyGroupBy {
	spsgb.fns = append(spsgb.fns, fns...)
	return spsgb
}

// Scan applies the selector query and scans the result into the given value.
func (spsgb *ServerPowerSupplyGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, spsgb.build.ctx, "GroupBy")
	if err := spsgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ServerPowerSupplyQuery, *ServerPowerSupplyGroupBy](ctx, spsgb.build, spsgb, spsgb.build.inters, v)
}

func (spsgb *ServerPowerSupplyGroupBy) sqlScan(ctx context.Context, root *ServerPowerSupplyQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(spsgb.fns))
	for _, fn := range spsgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*spsgb.flds)+len(spsgb.fns))
		for _, f := range *spsgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*spsgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := spsgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ServerPowerSupplySelect is the builder for selecting fields of ServerPowerSupply entities.
type ServerPowerSupplySelect struct {
	*ServerPowerSupplyQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (spss *ServerPowerSupplySelect) Aggregate(fns ...AggregateFunc) *ServerPowerSupplySelect {
	spss.fns = append(spss.fns, fns...)
	return spss
}

// Scan applies the selector query and scans the result into the given value.
func (spss *ServerPowerSupplySelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, spss.ctx, "Select")
	if err := spss.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ServerPowerSupplyQuery, *ServerPowerSupplySelect](ctx, spss.ServerPowerSupplyQuery, spss, spss.inters, v)
}

func (spss *ServerPowerSupplySelect) sqlScan(ctx context.Context, root *ServerPowerSupplyQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(spss.fns))
	for _, fn := range spss.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*spss.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := spss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
