// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package serverpowersupply

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"go.infratographer.com/server-api/internal/ent/generated/predicate"
	"go.infratographer.com/x/gidx"
)

// ID filters vertices based on their ID field.
func ID(id gidx.PrefixedID) predicate.ServerPowerSupply {
	return predicate.ServerPowerSupply(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id gidx.PrefixedID) predicate.ServerPowerSupply {
	return predicate.ServerPowerSupply(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id gidx.PrefixedID) predicate.ServerPowerSupply {
	return predicate.ServerPowerSupply(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...gidx.PrefixedID) predicate.ServerPowerSupply {
	return predicate.ServerPowerSupply(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...gidx.PrefixedID) predicate.ServerPowerSupply {
	return predicate.ServerPowerSupply(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id gidx.PrefixedID) predicate.ServerPowerSupply {
	return predicate.ServerPowerSupply(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id gidx.PrefixedID) predicate.ServerPowerSupply {
	return predicate.ServerPowerSupply(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id gidx.PrefixedID) predicate.ServerPowerSupply {
	return predicate.ServerPowerSupply(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id gidx.PrefixedID) predicate.ServerPowerSupply {
	return predicate.ServerPowerSupply(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ServerPowerSupply {
	return predicate.ServerPowerSupply(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ServerPowerSupply {
	return predicate.ServerPowerSupply(sql.FieldEQ(FieldUpdatedAt, v))
}

// Serial applies equality check predicate on the "serial" field. It's identical to SerialEQ.
func Serial(v string) predicate.ServerPowerSupply {
	return predicate.ServerPowerSupply(sql.FieldEQ(FieldSerial, v))
}

// ServerPowerSupplyTypeID applies equality check predicate on the "server_power_supply_type_id" field. It's identical to ServerPowerSupplyTypeIDEQ.
func ServerPowerSupplyTypeID(v gidx.PrefixedID) predicate.ServerPowerSupply {
	return predicate.ServerPowerSupply(sql.FieldEQ(FieldServerPowerSupplyTypeID, v))
}

// ServerID applies equality check predicate on the "server_id" field. It's identical to ServerIDEQ.
func ServerID(v gidx.PrefixedID) predicate.ServerPowerSupply {
	return predicate.ServerPowerSupply(sql.FieldEQ(FieldServerID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ServerPowerSupply {
	return predicate.ServerPowerSupply(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ServerPowerSupply {
	return predicate.ServerPowerSupply(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ServerPowerSupply {
	return predicate.ServerPowerSupply(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ServerPowerSupply {
	return predicate.ServerPowerSupply(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ServerPowerSupply {
	return predicate.ServerPowerSupply(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ServerPowerSupply {
	return predicate.ServerPowerSupply(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ServerPowerSupply {
	return predicate.ServerPowerSupply(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ServerPowerSupply {
	return predicate.ServerPowerSupply(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ServerPowerSupply {
	return predicate.ServerPowerSupply(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ServerPowerSupply {
	return predicate.ServerPowerSupply(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ServerPowerSupply {
	return predicate.ServerPowerSupply(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ServerPowerSupply {
	return predicate.ServerPowerSupply(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ServerPowerSupply {
	return predicate.ServerPowerSupply(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ServerPowerSupply {
	return predicate.ServerPowerSupply(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ServerPowerSupply {
	return predicate.ServerPowerSupply(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ServerPowerSupply {
	return predicate.ServerPowerSupply(sql.FieldLTE(FieldUpdatedAt, v))
}

// SerialEQ applies the EQ predicate on the "serial" field.
func SerialEQ(v string) predicate.ServerPowerSupply {
	return predicate.ServerPowerSupply(sql.FieldEQ(FieldSerial, v))
}

// SerialNEQ applies the NEQ predicate on the "serial" field.
func SerialNEQ(v string) predicate.ServerPowerSupply {
	return predicate.ServerPowerSupply(sql.FieldNEQ(FieldSerial, v))
}

// SerialIn applies the In predicate on the "serial" field.
func SerialIn(vs ...string) predicate.ServerPowerSupply {
	return predicate.ServerPowerSupply(sql.FieldIn(FieldSerial, vs...))
}

// SerialNotIn applies the NotIn predicate on the "serial" field.
func SerialNotIn(vs ...string) predicate.ServerPowerSupply {
	return predicate.ServerPowerSupply(sql.FieldNotIn(FieldSerial, vs...))
}

// SerialGT applies the GT predicate on the "serial" field.
func SerialGT(v string) predicate.ServerPowerSupply {
	return predicate.ServerPowerSupply(sql.FieldGT(FieldSerial, v))
}

// SerialGTE applies the GTE predicate on the "serial" field.
func SerialGTE(v string) predicate.ServerPowerSupply {
	return predicate.ServerPowerSupply(sql.FieldGTE(FieldSerial, v))
}

// SerialLT applies the LT predicate on the "serial" field.
func SerialLT(v string) predicate.ServerPowerSupply {
	return predicate.ServerPowerSupply(sql.FieldLT(FieldSerial, v))
}

// SerialLTE applies the LTE predicate on the "serial" field.
func SerialLTE(v string) predicate.ServerPowerSupply {
	return predicate.ServerPowerSupply(sql.FieldLTE(FieldSerial, v))
}

// SerialContains applies the Contains predicate on the "serial" field.
func SerialContains(v string) predicate.ServerPowerSupply {
	return predicate.ServerPowerSupply(sql.FieldContains(FieldSerial, v))
}

// SerialHasPrefix applies the HasPrefix predicate on the "serial" field.
func SerialHasPrefix(v string) predicate.ServerPowerSupply {
	return predicate.ServerPowerSupply(sql.FieldHasPrefix(FieldSerial, v))
}

// SerialHasSuffix applies the HasSuffix predicate on the "serial" field.
func SerialHasSuffix(v string) predicate.ServerPowerSupply {
	return predicate.ServerPowerSupply(sql.FieldHasSuffix(FieldSerial, v))
}

// SerialEqualFold applies the EqualFold predicate on the "serial" field.
func SerialEqualFold(v string) predicate.ServerPowerSupply {
	return predicate.ServerPowerSupply(sql.FieldEqualFold(FieldSerial, v))
}

// SerialContainsFold applies the ContainsFold predicate on the "serial" field.
func SerialContainsFold(v string) predicate.ServerPowerSupply {
	return predicate.ServerPowerSupply(sql.FieldContainsFold(FieldSerial, v))
}

// ServerPowerSupplyTypeIDEQ applies the EQ predicate on the "server_power_supply_type_id" field.
func ServerPowerSupplyTypeIDEQ(v gidx.PrefixedID) predicate.ServerPowerSupply {
	return predicate.ServerPowerSupply(sql.FieldEQ(FieldServerPowerSupplyTypeID, v))
}

// ServerPowerSupplyTypeIDNEQ applies the NEQ predicate on the "server_power_supply_type_id" field.
func ServerPowerSupplyTypeIDNEQ(v gidx.PrefixedID) predicate.ServerPowerSupply {
	return predicate.ServerPowerSupply(sql.FieldNEQ(FieldServerPowerSupplyTypeID, v))
}

// ServerPowerSupplyTypeIDIn applies the In predicate on the "server_power_supply_type_id" field.
func ServerPowerSupplyTypeIDIn(vs ...gidx.PrefixedID) predicate.ServerPowerSupply {
	return predicate.ServerPowerSupply(sql.FieldIn(FieldServerPowerSupplyTypeID, vs...))
}

// ServerPowerSupplyTypeIDNotIn applies the NotIn predicate on the "server_power_supply_type_id" field.
func ServerPowerSupplyTypeIDNotIn(vs ...gidx.PrefixedID) predicate.ServerPowerSupply {
	return predicate.ServerPowerSupply(sql.FieldNotIn(FieldServerPowerSupplyTypeID, vs...))
}

// ServerPowerSupplyTypeIDGT applies the GT predicate on the "server_power_supply_type_id" field.
func ServerPowerSupplyTypeIDGT(v gidx.PrefixedID) predicate.ServerPowerSupply {
	return predicate.ServerPowerSupply(sql.FieldGT(FieldServerPowerSupplyTypeID, v))
}

// ServerPowerSupplyTypeIDGTE applies the GTE predicate on the "server_power_supply_type_id" field.
func ServerPowerSupplyTypeIDGTE(v gidx.PrefixedID) predicate.ServerPowerSupply {
	return predicate.ServerPowerSupply(sql.FieldGTE(FieldServerPowerSupplyTypeID, v))
}

// ServerPowerSupplyTypeIDLT applies the LT predicate on the "server_power_supply_type_id" field.
func ServerPowerSupplyTypeIDLT(v gidx.PrefixedID) predicate.ServerPowerSupply {
	return predicate.ServerPowerSupply(sql.FieldLT(FieldServerPowerSupplyTypeID, v))
}

// ServerPowerSupplyTypeIDLTE applies the LTE predicate on the "server_power_supply_type_id" field.
func ServerPowerSupplyTypeIDLTE(v gidx.PrefixedID) predicate.ServerPowerSupply {
	return predicate.ServerPowerSupply(sql.FieldLTE(FieldServerPowerSupplyTypeID, v))
}

// ServerPowerSupplyTypeIDContains applies the Contains predicate on the "server_power_supply_type_id" field.
func ServerPowerSupplyTypeIDContains(v gidx.PrefixedID) predicate.ServerPowerSupply {
	vc := string(v)
	return predicate.ServerPowerSupply(sql.FieldContains(FieldServerPowerSupplyTypeID, vc))
}

// ServerPowerSupplyTypeIDHasPrefix applies the HasPrefix predicate on the "server_power_supply_type_id" field.
func ServerPowerSupplyTypeIDHasPrefix(v gidx.PrefixedID) predicate.ServerPowerSupply {
	vc := string(v)
	return predicate.ServerPowerSupply(sql.FieldHasPrefix(FieldServerPowerSupplyTypeID, vc))
}

// ServerPowerSupplyTypeIDHasSuffix applies the HasSuffix predicate on the "server_power_supply_type_id" field.
func ServerPowerSupplyTypeIDHasSuffix(v gidx.PrefixedID) predicate.ServerPowerSupply {
	vc := string(v)
	return predicate.ServerPowerSupply(sql.FieldHasSuffix(FieldServerPowerSupplyTypeID, vc))
}

// ServerPowerSupplyTypeIDEqualFold applies the EqualFold predicate on the "server_power_supply_type_id" field.
func ServerPowerSupplyTypeIDEqualFold(v gidx.PrefixedID) predicate.ServerPowerSupply {
	vc := string(v)
	return predicate.ServerPowerSupply(sql.FieldEqualFold(FieldServerPowerSupplyTypeID, vc))
}

// ServerPowerSupplyTypeIDContainsFold applies the ContainsFold predicate on the "server_power_supply_type_id" field.
func ServerPowerSupplyTypeIDContainsFold(v gidx.PrefixedID) predicate.ServerPowerSupply {
	vc := string(v)
	return predicate.ServerPowerSupply(sql.FieldContainsFold(FieldServerPowerSupplyTypeID, vc))
}

// ServerIDEQ applies the EQ predicate on the "server_id" field.
func ServerIDEQ(v gidx.PrefixedID) predicate.ServerPowerSupply {
	return predicate.ServerPowerSupply(sql.FieldEQ(FieldServerID, v))
}

// ServerIDNEQ applies the NEQ predicate on the "server_id" field.
func ServerIDNEQ(v gidx.PrefixedID) predicate.ServerPowerSupply {
	return predicate.ServerPowerSupply(sql.FieldNEQ(FieldServerID, v))
}

// ServerIDIn applies the In predicate on the "server_id" field.
func ServerIDIn(vs ...gidx.PrefixedID) predicate.ServerPowerSupply {
	return predicate.ServerPowerSupply(sql.FieldIn(FieldServerID, vs...))
}

// ServerIDNotIn applies the NotIn predicate on the "server_id" field.
func ServerIDNotIn(vs ...gidx.PrefixedID) predicate.ServerPowerSupply {
	return predicate.ServerPowerSupply(sql.FieldNotIn(FieldServerID, vs...))
}

// ServerIDGT applies the GT predicate on the "server_id" field.
func ServerIDGT(v gidx.PrefixedID) predicate.ServerPowerSupply {
	return predicate.ServerPowerSupply(sql.FieldGT(FieldServerID, v))
}

// ServerIDGTE applies the GTE predicate on the "server_id" field.
func ServerIDGTE(v gidx.PrefixedID) predicate.ServerPowerSupply {
	return predicate.ServerPowerSupply(sql.FieldGTE(FieldServerID, v))
}

// ServerIDLT applies the LT predicate on the "server_id" field.
func ServerIDLT(v gidx.PrefixedID) predicate.ServerPowerSupply {
	return predicate.ServerPowerSupply(sql.FieldLT(FieldServerID, v))
}

// ServerIDLTE applies the LTE predicate on the "server_id" field.
func ServerIDLTE(v gidx.PrefixedID) predicate.ServerPowerSupply {
	return predicate.ServerPowerSupply(sql.FieldLTE(FieldServerID, v))
}

// ServerIDContains applies the Contains predicate on the "server_id" field.
func ServerIDContains(v gidx.PrefixedID) predicate.ServerPowerSupply {
	vc := string(v)
	return predicate.ServerPowerSupply(sql.FieldContains(FieldServerID, vc))
}

// ServerIDHasPrefix applies the HasPrefix predicate on the "server_id" field.
func ServerIDHasPrefix(v gidx.PrefixedID) predicate.ServerPowerSupply {
	vc := string(v)
	return predicate.ServerPowerSupply(sql.FieldHasPrefix(FieldServerID, vc))
}

// ServerIDHasSuffix applies the HasSuffix predicate on the "server_id" field.
func ServerIDHasSuffix(v gidx.PrefixedID) predicate.ServerPowerSupply {
	vc := string(v)
	return predicate.ServerPowerSupply(sql.FieldHasSuffix(FieldServerID, vc))
}

// ServerIDEqualFold applies the EqualFold predicate on the "server_id" field.
func ServerIDEqualFold(v gidx.PrefixedID) predicate.ServerPowerSupply {
	vc := string(v)
	return predicate.ServerPowerSupply(sql.FieldEqualFold(FieldServerID, vc))
}

// ServerIDContainsFold applies the ContainsFold predicate on the "server_id" field.
func ServerIDContainsFold(v gidx.PrefixedID) predicate.ServerPowerSupply {
	vc := string(v)
	return predicate.ServerPowerSupply(sql.FieldContainsFold(FieldServerID, vc))
}

// HasServer applies the HasEdge predicate on the "server" edge.
func HasServer() predicate.ServerPowerSupply {
	return predicate.ServerPowerSupply(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ServerTable, ServerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasServerWith applies the HasEdge predicate on the "server" edge with a given conditions (other predicates).
func HasServerWith(preds ...predicate.Server) predicate.ServerPowerSupply {
	return predicate.ServerPowerSupply(func(s *sql.Selector) {
		step := newServerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasServerPowerSupplyType applies the HasEdge predicate on the "server_power_supply_type" edge.
func HasServerPowerSupplyType() predicate.ServerPowerSupply {
	return predicate.ServerPowerSupply(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ServerPowerSupplyTypeTable, ServerPowerSupplyTypeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasServerPowerSupplyTypeWith applies the HasEdge predicate on the "server_power_supply_type" edge with a given conditions (other predicates).
func HasServerPowerSupplyTypeWith(preds ...predicate.ServerPowerSupplyType) predicate.ServerPowerSupply {
	return predicate.ServerPowerSupply(func(s *sql.Selector) {
		step := newServerPowerSupplyTypeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ServerPowerSupply) predicate.ServerPowerSupply {
	return predicate.ServerPowerSupply(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ServerPowerSupply) predicate.ServerPowerSupply {
	return predicate.ServerPowerSupply(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ServerPowerSupply) predicate.ServerPowerSupply {
	return predicate.ServerPowerSupply(func(s *sql.Selector) {
		p(s.Not())
	})
}
