// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"go.infratographer.com/server-api/internal/ent/generated/server"
	"go.infratographer.com/server-api/internal/ent/generated/serverharddrive"
	"go.infratographer.com/server-api/internal/ent/generated/serverharddrivetype"
	"go.infratographer.com/x/gidx"
)

// ServerHardDriveCreate is the builder for creating a ServerHardDrive entity.
type ServerHardDriveCreate struct {
	config
	mutation *ServerHardDriveMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (shdc *ServerHardDriveCreate) SetCreatedAt(t time.Time) *ServerHardDriveCreate {
	shdc.mutation.SetCreatedAt(t)
	return shdc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (shdc *ServerHardDriveCreate) SetNillableCreatedAt(t *time.Time) *ServerHardDriveCreate {
	if t != nil {
		shdc.SetCreatedAt(*t)
	}
	return shdc
}

// SetUpdatedAt sets the "updated_at" field.
func (shdc *ServerHardDriveCreate) SetUpdatedAt(t time.Time) *ServerHardDriveCreate {
	shdc.mutation.SetUpdatedAt(t)
	return shdc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (shdc *ServerHardDriveCreate) SetNillableUpdatedAt(t *time.Time) *ServerHardDriveCreate {
	if t != nil {
		shdc.SetUpdatedAt(*t)
	}
	return shdc
}

// SetSerial sets the "serial" field.
func (shdc *ServerHardDriveCreate) SetSerial(s string) *ServerHardDriveCreate {
	shdc.mutation.SetSerial(s)
	return shdc
}

// SetServerID sets the "server_id" field.
func (shdc *ServerHardDriveCreate) SetServerID(gi gidx.PrefixedID) *ServerHardDriveCreate {
	shdc.mutation.SetServerID(gi)
	return shdc
}

// SetServerHardDriveTypeID sets the "server_hard_drive_type_id" field.
func (shdc *ServerHardDriveCreate) SetServerHardDriveTypeID(gi gidx.PrefixedID) *ServerHardDriveCreate {
	shdc.mutation.SetServerHardDriveTypeID(gi)
	return shdc
}

// SetID sets the "id" field.
func (shdc *ServerHardDriveCreate) SetID(gi gidx.PrefixedID) *ServerHardDriveCreate {
	shdc.mutation.SetID(gi)
	return shdc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (shdc *ServerHardDriveCreate) SetNillableID(gi *gidx.PrefixedID) *ServerHardDriveCreate {
	if gi != nil {
		shdc.SetID(*gi)
	}
	return shdc
}

// SetServer sets the "server" edge to the Server entity.
func (shdc *ServerHardDriveCreate) SetServer(s *Server) *ServerHardDriveCreate {
	return shdc.SetServerID(s.ID)
}

// SetServerHardDriveType sets the "server_hard_drive_type" edge to the ServerHardDriveType entity.
func (shdc *ServerHardDriveCreate) SetServerHardDriveType(s *ServerHardDriveType) *ServerHardDriveCreate {
	return shdc.SetServerHardDriveTypeID(s.ID)
}

// Mutation returns the ServerHardDriveMutation object of the builder.
func (shdc *ServerHardDriveCreate) Mutation() *ServerHardDriveMutation {
	return shdc.mutation
}

// Save creates the ServerHardDrive in the database.
func (shdc *ServerHardDriveCreate) Save(ctx context.Context) (*ServerHardDrive, error) {
	shdc.defaults()
	return withHooks(ctx, shdc.sqlSave, shdc.mutation, shdc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (shdc *ServerHardDriveCreate) SaveX(ctx context.Context) *ServerHardDrive {
	v, err := shdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (shdc *ServerHardDriveCreate) Exec(ctx context.Context) error {
	_, err := shdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (shdc *ServerHardDriveCreate) ExecX(ctx context.Context) {
	if err := shdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (shdc *ServerHardDriveCreate) defaults() {
	if _, ok := shdc.mutation.CreatedAt(); !ok {
		v := serverharddrive.DefaultCreatedAt()
		shdc.mutation.SetCreatedAt(v)
	}
	if _, ok := shdc.mutation.UpdatedAt(); !ok {
		v := serverharddrive.DefaultUpdatedAt()
		shdc.mutation.SetUpdatedAt(v)
	}
	if _, ok := shdc.mutation.ID(); !ok {
		v := serverharddrive.DefaultID()
		shdc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (shdc *ServerHardDriveCreate) check() error {
	if _, ok := shdc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "ServerHardDrive.created_at"`)}
	}
	if _, ok := shdc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "ServerHardDrive.updated_at"`)}
	}
	if _, ok := shdc.mutation.Serial(); !ok {
		return &ValidationError{Name: "serial", err: errors.New(`generated: missing required field "ServerHardDrive.serial"`)}
	}
	if v, ok := shdc.mutation.Serial(); ok {
		if err := serverharddrive.SerialValidator(v); err != nil {
			return &ValidationError{Name: "serial", err: fmt.Errorf(`generated: validator failed for field "ServerHardDrive.serial": %w`, err)}
		}
	}
	if _, ok := shdc.mutation.ServerID(); !ok {
		return &ValidationError{Name: "server_id", err: errors.New(`generated: missing required field "ServerHardDrive.server_id"`)}
	}
	if _, ok := shdc.mutation.ServerHardDriveTypeID(); !ok {
		return &ValidationError{Name: "server_hard_drive_type_id", err: errors.New(`generated: missing required field "ServerHardDrive.server_hard_drive_type_id"`)}
	}
	if _, ok := shdc.mutation.ServerID(); !ok {
		return &ValidationError{Name: "server", err: errors.New(`generated: missing required edge "ServerHardDrive.server"`)}
	}
	if _, ok := shdc.mutation.ServerHardDriveTypeID(); !ok {
		return &ValidationError{Name: "server_hard_drive_type", err: errors.New(`generated: missing required edge "ServerHardDrive.server_hard_drive_type"`)}
	}
	return nil
}

func (shdc *ServerHardDriveCreate) sqlSave(ctx context.Context) (*ServerHardDrive, error) {
	if err := shdc.check(); err != nil {
		return nil, err
	}
	_node, _spec := shdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, shdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*gidx.PrefixedID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	shdc.mutation.id = &_node.ID
	shdc.mutation.done = true
	return _node, nil
}

func (shdc *ServerHardDriveCreate) createSpec() (*ServerHardDrive, *sqlgraph.CreateSpec) {
	var (
		_node = &ServerHardDrive{config: shdc.config}
		_spec = sqlgraph.NewCreateSpec(serverharddrive.Table, sqlgraph.NewFieldSpec(serverharddrive.FieldID, field.TypeString))
	)
	if id, ok := shdc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := shdc.mutation.CreatedAt(); ok {
		_spec.SetField(serverharddrive.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := shdc.mutation.UpdatedAt(); ok {
		_spec.SetField(serverharddrive.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := shdc.mutation.Serial(); ok {
		_spec.SetField(serverharddrive.FieldSerial, field.TypeString, value)
		_node.Serial = value
	}
	if nodes := shdc.mutation.ServerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   serverharddrive.ServerTable,
			Columns: []string{serverharddrive.ServerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(server.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ServerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := shdc.mutation.ServerHardDriveTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   serverharddrive.ServerHardDriveTypeTable,
			Columns: []string{serverharddrive.ServerHardDriveTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serverharddrivetype.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ServerHardDriveTypeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ServerHardDriveCreateBulk is the builder for creating many ServerHardDrive entities in bulk.
type ServerHardDriveCreateBulk struct {
	config
	builders []*ServerHardDriveCreate
}

// Save creates the ServerHardDrive entities in the database.
func (shdcb *ServerHardDriveCreateBulk) Save(ctx context.Context) ([]*ServerHardDrive, error) {
	specs := make([]*sqlgraph.CreateSpec, len(shdcb.builders))
	nodes := make([]*ServerHardDrive, len(shdcb.builders))
	mutators := make([]Mutator, len(shdcb.builders))
	for i := range shdcb.builders {
		func(i int, root context.Context) {
			builder := shdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ServerHardDriveMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, shdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, shdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, shdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (shdcb *ServerHardDriveCreateBulk) SaveX(ctx context.Context) []*ServerHardDrive {
	v, err := shdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (shdcb *ServerHardDriveCreateBulk) Exec(ctx context.Context) error {
	_, err := shdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (shdcb *ServerHardDriveCreateBulk) ExecX(ctx context.Context) {
	if err := shdcb.Exec(ctx); err != nil {
		panic(err)
	}
}
