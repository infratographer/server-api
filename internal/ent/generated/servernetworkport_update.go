// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"go.infratographer.com/server-api/internal/ent/generated/predicate"
	"go.infratographer.com/server-api/internal/ent/generated/servernetworkport"
)

// ServerNetworkPortUpdate is the builder for updating ServerNetworkPort entities.
type ServerNetworkPortUpdate struct {
	config
	hooks    []Hook
	mutation *ServerNetworkPortMutation
}

// Where appends a list predicates to the ServerNetworkPortUpdate builder.
func (snpu *ServerNetworkPortUpdate) Where(ps ...predicate.ServerNetworkPort) *ServerNetworkPortUpdate {
	snpu.mutation.Where(ps...)
	return snpu
}

// SetMACAddress sets the "mac_address" field.
func (snpu *ServerNetworkPortUpdate) SetMACAddress(s string) *ServerNetworkPortUpdate {
	snpu.mutation.SetMACAddress(s)
	return snpu
}

// Mutation returns the ServerNetworkPortMutation object of the builder.
func (snpu *ServerNetworkPortUpdate) Mutation() *ServerNetworkPortMutation {
	return snpu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (snpu *ServerNetworkPortUpdate) Save(ctx context.Context) (int, error) {
	snpu.defaults()
	return withHooks(ctx, snpu.sqlSave, snpu.mutation, snpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (snpu *ServerNetworkPortUpdate) SaveX(ctx context.Context) int {
	affected, err := snpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (snpu *ServerNetworkPortUpdate) Exec(ctx context.Context) error {
	_, err := snpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (snpu *ServerNetworkPortUpdate) ExecX(ctx context.Context) {
	if err := snpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (snpu *ServerNetworkPortUpdate) defaults() {
	if _, ok := snpu.mutation.UpdatedAt(); !ok {
		v := servernetworkport.UpdateDefaultUpdatedAt()
		snpu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (snpu *ServerNetworkPortUpdate) check() error {
	if v, ok := snpu.mutation.MACAddress(); ok {
		if err := servernetworkport.MACAddressValidator(v); err != nil {
			return &ValidationError{Name: "mac_address", err: fmt.Errorf(`generated: validator failed for field "ServerNetworkPort.mac_address": %w`, err)}
		}
	}
	if _, ok := snpu.mutation.NetworkCardID(); snpu.mutation.NetworkCardCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "ServerNetworkPort.network_card"`)
	}
	return nil
}

func (snpu *ServerNetworkPortUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := snpu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(servernetworkport.Table, servernetworkport.Columns, sqlgraph.NewFieldSpec(servernetworkport.FieldID, field.TypeString))
	if ps := snpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := snpu.mutation.UpdatedAt(); ok {
		_spec.SetField(servernetworkport.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := snpu.mutation.MACAddress(); ok {
		_spec.SetField(servernetworkport.FieldMACAddress, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, snpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{servernetworkport.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	snpu.mutation.done = true
	return n, nil
}

// ServerNetworkPortUpdateOne is the builder for updating a single ServerNetworkPort entity.
type ServerNetworkPortUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ServerNetworkPortMutation
}

// SetMACAddress sets the "mac_address" field.
func (snpuo *ServerNetworkPortUpdateOne) SetMACAddress(s string) *ServerNetworkPortUpdateOne {
	snpuo.mutation.SetMACAddress(s)
	return snpuo
}

// Mutation returns the ServerNetworkPortMutation object of the builder.
func (snpuo *ServerNetworkPortUpdateOne) Mutation() *ServerNetworkPortMutation {
	return snpuo.mutation
}

// Where appends a list predicates to the ServerNetworkPortUpdate builder.
func (snpuo *ServerNetworkPortUpdateOne) Where(ps ...predicate.ServerNetworkPort) *ServerNetworkPortUpdateOne {
	snpuo.mutation.Where(ps...)
	return snpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (snpuo *ServerNetworkPortUpdateOne) Select(field string, fields ...string) *ServerNetworkPortUpdateOne {
	snpuo.fields = append([]string{field}, fields...)
	return snpuo
}

// Save executes the query and returns the updated ServerNetworkPort entity.
func (snpuo *ServerNetworkPortUpdateOne) Save(ctx context.Context) (*ServerNetworkPort, error) {
	snpuo.defaults()
	return withHooks(ctx, snpuo.sqlSave, snpuo.mutation, snpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (snpuo *ServerNetworkPortUpdateOne) SaveX(ctx context.Context) *ServerNetworkPort {
	node, err := snpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (snpuo *ServerNetworkPortUpdateOne) Exec(ctx context.Context) error {
	_, err := snpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (snpuo *ServerNetworkPortUpdateOne) ExecX(ctx context.Context) {
	if err := snpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (snpuo *ServerNetworkPortUpdateOne) defaults() {
	if _, ok := snpuo.mutation.UpdatedAt(); !ok {
		v := servernetworkport.UpdateDefaultUpdatedAt()
		snpuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (snpuo *ServerNetworkPortUpdateOne) check() error {
	if v, ok := snpuo.mutation.MACAddress(); ok {
		if err := servernetworkport.MACAddressValidator(v); err != nil {
			return &ValidationError{Name: "mac_address", err: fmt.Errorf(`generated: validator failed for field "ServerNetworkPort.mac_address": %w`, err)}
		}
	}
	if _, ok := snpuo.mutation.NetworkCardID(); snpuo.mutation.NetworkCardCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "ServerNetworkPort.network_card"`)
	}
	return nil
}

func (snpuo *ServerNetworkPortUpdateOne) sqlSave(ctx context.Context) (_node *ServerNetworkPort, err error) {
	if err := snpuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(servernetworkport.Table, servernetworkport.Columns, sqlgraph.NewFieldSpec(servernetworkport.FieldID, field.TypeString))
	id, ok := snpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "ServerNetworkPort.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := snpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, servernetworkport.FieldID)
		for _, f := range fields {
			if !servernetworkport.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != servernetworkport.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := snpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := snpuo.mutation.UpdatedAt(); ok {
		_spec.SetField(servernetworkport.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := snpuo.mutation.MACAddress(); ok {
		_spec.SetField(servernetworkport.FieldMACAddress, field.TypeString, value)
	}
	_node = &ServerNetworkPort{config: snpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, snpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{servernetworkport.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	snpuo.mutation.done = true
	return _node, nil
}
