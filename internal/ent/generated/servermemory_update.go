// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"go.infratographer.com/server-api/internal/ent/generated/predicate"
	"go.infratographer.com/server-api/internal/ent/generated/servermemory"
)

// ServerMemoryUpdate is the builder for updating ServerMemory entities.
type ServerMemoryUpdate struct {
	config
	hooks    []Hook
	mutation *ServerMemoryMutation
}

// Where appends a list predicates to the ServerMemoryUpdate builder.
func (smu *ServerMemoryUpdate) Where(ps ...predicate.ServerMemory) *ServerMemoryUpdate {
	smu.mutation.Where(ps...)
	return smu
}

// SetSerial sets the "serial" field.
func (smu *ServerMemoryUpdate) SetSerial(s string) *ServerMemoryUpdate {
	smu.mutation.SetSerial(s)
	return smu
}

// Mutation returns the ServerMemoryMutation object of the builder.
func (smu *ServerMemoryUpdate) Mutation() *ServerMemoryMutation {
	return smu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (smu *ServerMemoryUpdate) Save(ctx context.Context) (int, error) {
	smu.defaults()
	return withHooks(ctx, smu.sqlSave, smu.mutation, smu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (smu *ServerMemoryUpdate) SaveX(ctx context.Context) int {
	affected, err := smu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (smu *ServerMemoryUpdate) Exec(ctx context.Context) error {
	_, err := smu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smu *ServerMemoryUpdate) ExecX(ctx context.Context) {
	if err := smu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (smu *ServerMemoryUpdate) defaults() {
	if _, ok := smu.mutation.UpdatedAt(); !ok {
		v := servermemory.UpdateDefaultUpdatedAt()
		smu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (smu *ServerMemoryUpdate) check() error {
	if v, ok := smu.mutation.Serial(); ok {
		if err := servermemory.SerialValidator(v); err != nil {
			return &ValidationError{Name: "serial", err: fmt.Errorf(`generated: validator failed for field "ServerMemory.serial": %w`, err)}
		}
	}
	if _, ok := smu.mutation.ServerID(); smu.mutation.ServerCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "ServerMemory.server"`)
	}
	if _, ok := smu.mutation.ServerMemoryTypeID(); smu.mutation.ServerMemoryTypeCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "ServerMemory.server_memory_type"`)
	}
	return nil
}

func (smu *ServerMemoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := smu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(servermemory.Table, servermemory.Columns, sqlgraph.NewFieldSpec(servermemory.FieldID, field.TypeString))
	if ps := smu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := smu.mutation.UpdatedAt(); ok {
		_spec.SetField(servermemory.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := smu.mutation.Serial(); ok {
		_spec.SetField(servermemory.FieldSerial, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, smu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{servermemory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	smu.mutation.done = true
	return n, nil
}

// ServerMemoryUpdateOne is the builder for updating a single ServerMemory entity.
type ServerMemoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ServerMemoryMutation
}

// SetSerial sets the "serial" field.
func (smuo *ServerMemoryUpdateOne) SetSerial(s string) *ServerMemoryUpdateOne {
	smuo.mutation.SetSerial(s)
	return smuo
}

// Mutation returns the ServerMemoryMutation object of the builder.
func (smuo *ServerMemoryUpdateOne) Mutation() *ServerMemoryMutation {
	return smuo.mutation
}

// Where appends a list predicates to the ServerMemoryUpdate builder.
func (smuo *ServerMemoryUpdateOne) Where(ps ...predicate.ServerMemory) *ServerMemoryUpdateOne {
	smuo.mutation.Where(ps...)
	return smuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (smuo *ServerMemoryUpdateOne) Select(field string, fields ...string) *ServerMemoryUpdateOne {
	smuo.fields = append([]string{field}, fields...)
	return smuo
}

// Save executes the query and returns the updated ServerMemory entity.
func (smuo *ServerMemoryUpdateOne) Save(ctx context.Context) (*ServerMemory, error) {
	smuo.defaults()
	return withHooks(ctx, smuo.sqlSave, smuo.mutation, smuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (smuo *ServerMemoryUpdateOne) SaveX(ctx context.Context) *ServerMemory {
	node, err := smuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (smuo *ServerMemoryUpdateOne) Exec(ctx context.Context) error {
	_, err := smuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smuo *ServerMemoryUpdateOne) ExecX(ctx context.Context) {
	if err := smuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (smuo *ServerMemoryUpdateOne) defaults() {
	if _, ok := smuo.mutation.UpdatedAt(); !ok {
		v := servermemory.UpdateDefaultUpdatedAt()
		smuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (smuo *ServerMemoryUpdateOne) check() error {
	if v, ok := smuo.mutation.Serial(); ok {
		if err := servermemory.SerialValidator(v); err != nil {
			return &ValidationError{Name: "serial", err: fmt.Errorf(`generated: validator failed for field "ServerMemory.serial": %w`, err)}
		}
	}
	if _, ok := smuo.mutation.ServerID(); smuo.mutation.ServerCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "ServerMemory.server"`)
	}
	if _, ok := smuo.mutation.ServerMemoryTypeID(); smuo.mutation.ServerMemoryTypeCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "ServerMemory.server_memory_type"`)
	}
	return nil
}

func (smuo *ServerMemoryUpdateOne) sqlSave(ctx context.Context) (_node *ServerMemory, err error) {
	if err := smuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(servermemory.Table, servermemory.Columns, sqlgraph.NewFieldSpec(servermemory.FieldID, field.TypeString))
	id, ok := smuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "ServerMemory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := smuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, servermemory.FieldID)
		for _, f := range fields {
			if !servermemory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != servermemory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := smuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := smuo.mutation.UpdatedAt(); ok {
		_spec.SetField(servermemory.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := smuo.mutation.Serial(); ok {
		_spec.SetField(servermemory.FieldSerial, field.TypeString, value)
	}
	_node = &ServerMemory{config: smuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, smuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{servermemory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	smuo.mutation.done = true
	return _node, nil
}
