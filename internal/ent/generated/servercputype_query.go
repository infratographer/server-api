// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package generated

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"go.infratographer.com/server-api/internal/ent/generated/predicate"
	"go.infratographer.com/server-api/internal/ent/generated/servercputype"
	"go.infratographer.com/x/gidx"
)

// ServerCPUTypeQuery is the builder for querying ServerCPUType entities.
type ServerCPUTypeQuery struct {
	config
	ctx        *QueryContext
	order      []servercputype.OrderOption
	inters     []Interceptor
	predicates []predicate.ServerCPUType
	modifiers  []func(*sql.Selector)
	loadTotal  []func(context.Context, []*ServerCPUType) error
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ServerCPUTypeQuery builder.
func (sctq *ServerCPUTypeQuery) Where(ps ...predicate.ServerCPUType) *ServerCPUTypeQuery {
	sctq.predicates = append(sctq.predicates, ps...)
	return sctq
}

// Limit the number of records to be returned by this query.
func (sctq *ServerCPUTypeQuery) Limit(limit int) *ServerCPUTypeQuery {
	sctq.ctx.Limit = &limit
	return sctq
}

// Offset to start from.
func (sctq *ServerCPUTypeQuery) Offset(offset int) *ServerCPUTypeQuery {
	sctq.ctx.Offset = &offset
	return sctq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (sctq *ServerCPUTypeQuery) Unique(unique bool) *ServerCPUTypeQuery {
	sctq.ctx.Unique = &unique
	return sctq
}

// Order specifies how the records should be ordered.
func (sctq *ServerCPUTypeQuery) Order(o ...servercputype.OrderOption) *ServerCPUTypeQuery {
	sctq.order = append(sctq.order, o...)
	return sctq
}

// First returns the first ServerCPUType entity from the query.
// Returns a *NotFoundError when no ServerCPUType was found.
func (sctq *ServerCPUTypeQuery) First(ctx context.Context) (*ServerCPUType, error) {
	nodes, err := sctq.Limit(1).All(setContextOp(ctx, sctq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{servercputype.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (sctq *ServerCPUTypeQuery) FirstX(ctx context.Context) *ServerCPUType {
	node, err := sctq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ServerCPUType ID from the query.
// Returns a *NotFoundError when no ServerCPUType ID was found.
func (sctq *ServerCPUTypeQuery) FirstID(ctx context.Context) (id gidx.PrefixedID, err error) {
	var ids []gidx.PrefixedID
	if ids, err = sctq.Limit(1).IDs(setContextOp(ctx, sctq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{servercputype.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (sctq *ServerCPUTypeQuery) FirstIDX(ctx context.Context) gidx.PrefixedID {
	id, err := sctq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ServerCPUType entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ServerCPUType entity is found.
// Returns a *NotFoundError when no ServerCPUType entities are found.
func (sctq *ServerCPUTypeQuery) Only(ctx context.Context) (*ServerCPUType, error) {
	nodes, err := sctq.Limit(2).All(setContextOp(ctx, sctq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{servercputype.Label}
	default:
		return nil, &NotSingularError{servercputype.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (sctq *ServerCPUTypeQuery) OnlyX(ctx context.Context) *ServerCPUType {
	node, err := sctq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ServerCPUType ID in the query.
// Returns a *NotSingularError when more than one ServerCPUType ID is found.
// Returns a *NotFoundError when no entities are found.
func (sctq *ServerCPUTypeQuery) OnlyID(ctx context.Context) (id gidx.PrefixedID, err error) {
	var ids []gidx.PrefixedID
	if ids, err = sctq.Limit(2).IDs(setContextOp(ctx, sctq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{servercputype.Label}
	default:
		err = &NotSingularError{servercputype.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (sctq *ServerCPUTypeQuery) OnlyIDX(ctx context.Context) gidx.PrefixedID {
	id, err := sctq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ServerCPUTypes.
func (sctq *ServerCPUTypeQuery) All(ctx context.Context) ([]*ServerCPUType, error) {
	ctx = setContextOp(ctx, sctq.ctx, "All")
	if err := sctq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ServerCPUType, *ServerCPUTypeQuery]()
	return withInterceptors[[]*ServerCPUType](ctx, sctq, qr, sctq.inters)
}

// AllX is like All, but panics if an error occurs.
func (sctq *ServerCPUTypeQuery) AllX(ctx context.Context) []*ServerCPUType {
	nodes, err := sctq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ServerCPUType IDs.
func (sctq *ServerCPUTypeQuery) IDs(ctx context.Context) (ids []gidx.PrefixedID, err error) {
	if sctq.ctx.Unique == nil && sctq.path != nil {
		sctq.Unique(true)
	}
	ctx = setContextOp(ctx, sctq.ctx, "IDs")
	if err = sctq.Select(servercputype.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (sctq *ServerCPUTypeQuery) IDsX(ctx context.Context) []gidx.PrefixedID {
	ids, err := sctq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (sctq *ServerCPUTypeQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, sctq.ctx, "Count")
	if err := sctq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, sctq, querierCount[*ServerCPUTypeQuery](), sctq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (sctq *ServerCPUTypeQuery) CountX(ctx context.Context) int {
	count, err := sctq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (sctq *ServerCPUTypeQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, sctq.ctx, "Exist")
	switch _, err := sctq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("generated: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (sctq *ServerCPUTypeQuery) ExistX(ctx context.Context) bool {
	exist, err := sctq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ServerCPUTypeQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (sctq *ServerCPUTypeQuery) Clone() *ServerCPUTypeQuery {
	if sctq == nil {
		return nil
	}
	return &ServerCPUTypeQuery{
		config:     sctq.config,
		ctx:        sctq.ctx.Clone(),
		order:      append([]servercputype.OrderOption{}, sctq.order...),
		inters:     append([]Interceptor{}, sctq.inters...),
		predicates: append([]predicate.ServerCPUType{}, sctq.predicates...),
		// clone intermediate query.
		sql:  sctq.sql.Clone(),
		path: sctq.path,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ServerCPUType.Query().
//		GroupBy(servercputype.FieldCreatedAt).
//		Aggregate(generated.Count()).
//		Scan(ctx, &v)
func (sctq *ServerCPUTypeQuery) GroupBy(field string, fields ...string) *ServerCPUTypeGroupBy {
	sctq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ServerCPUTypeGroupBy{build: sctq}
	grbuild.flds = &sctq.ctx.Fields
	grbuild.label = servercputype.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.ServerCPUType.Query().
//		Select(servercputype.FieldCreatedAt).
//		Scan(ctx, &v)
func (sctq *ServerCPUTypeQuery) Select(fields ...string) *ServerCPUTypeSelect {
	sctq.ctx.Fields = append(sctq.ctx.Fields, fields...)
	sbuild := &ServerCPUTypeSelect{ServerCPUTypeQuery: sctq}
	sbuild.label = servercputype.Label
	sbuild.flds, sbuild.scan = &sctq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ServerCPUTypeSelect configured with the given aggregations.
func (sctq *ServerCPUTypeQuery) Aggregate(fns ...AggregateFunc) *ServerCPUTypeSelect {
	return sctq.Select().Aggregate(fns...)
}

func (sctq *ServerCPUTypeQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range sctq.inters {
		if inter == nil {
			return fmt.Errorf("generated: uninitialized interceptor (forgotten import generated/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, sctq); err != nil {
				return err
			}
		}
	}
	for _, f := range sctq.ctx.Fields {
		if !servercputype.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
		}
	}
	if sctq.path != nil {
		prev, err := sctq.path(ctx)
		if err != nil {
			return err
		}
		sctq.sql = prev
	}
	return nil
}

func (sctq *ServerCPUTypeQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ServerCPUType, error) {
	var (
		nodes = []*ServerCPUType{}
		_spec = sctq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ServerCPUType).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ServerCPUType{config: sctq.config}
		nodes = append(nodes, node)
		return node.assignValues(columns, values)
	}
	if len(sctq.modifiers) > 0 {
		_spec.Modifiers = sctq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, sctq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	for i := range sctq.loadTotal {
		if err := sctq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (sctq *ServerCPUTypeQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := sctq.querySpec()
	if len(sctq.modifiers) > 0 {
		_spec.Modifiers = sctq.modifiers
	}
	_spec.Node.Columns = sctq.ctx.Fields
	if len(sctq.ctx.Fields) > 0 {
		_spec.Unique = sctq.ctx.Unique != nil && *sctq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, sctq.driver, _spec)
}

func (sctq *ServerCPUTypeQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(servercputype.Table, servercputype.Columns, sqlgraph.NewFieldSpec(servercputype.FieldID, field.TypeString))
	_spec.From = sctq.sql
	if unique := sctq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if sctq.path != nil {
		_spec.Unique = true
	}
	if fields := sctq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, servercputype.FieldID)
		for i := range fields {
			if fields[i] != servercputype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := sctq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := sctq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := sctq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := sctq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (sctq *ServerCPUTypeQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(sctq.driver.Dialect())
	t1 := builder.Table(servercputype.Table)
	columns := sctq.ctx.Fields
	if len(columns) == 0 {
		columns = servercputype.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if sctq.sql != nil {
		selector = sctq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if sctq.ctx.Unique != nil && *sctq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range sctq.predicates {
		p(selector)
	}
	for _, p := range sctq.order {
		p(selector)
	}
	if offset := sctq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := sctq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ServerCPUTypeGroupBy is the group-by builder for ServerCPUType entities.
type ServerCPUTypeGroupBy struct {
	selector
	build *ServerCPUTypeQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (sctgb *ServerCPUTypeGroupBy) Aggregate(fns ...AggregateFunc) *ServerCPUTypeGroupBy {
	sctgb.fns = append(sctgb.fns, fns...)
	return sctgb
}

// Scan applies the selector query and scans the result into the given value.
func (sctgb *ServerCPUTypeGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sctgb.build.ctx, "GroupBy")
	if err := sctgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ServerCPUTypeQuery, *ServerCPUTypeGroupBy](ctx, sctgb.build, sctgb, sctgb.build.inters, v)
}

func (sctgb *ServerCPUTypeGroupBy) sqlScan(ctx context.Context, root *ServerCPUTypeQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(sctgb.fns))
	for _, fn := range sctgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*sctgb.flds)+len(sctgb.fns))
		for _, f := range *sctgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*sctgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sctgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ServerCPUTypeSelect is the builder for selecting fields of ServerCPUType entities.
type ServerCPUTypeSelect struct {
	*ServerCPUTypeQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (scts *ServerCPUTypeSelect) Aggregate(fns ...AggregateFunc) *ServerCPUTypeSelect {
	scts.fns = append(scts.fns, fns...)
	return scts
}

// Scan applies the selector query and scans the result into the given value.
func (scts *ServerCPUTypeSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, scts.ctx, "Select")
	if err := scts.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ServerCPUTypeQuery, *ServerCPUTypeSelect](ctx, scts.ServerCPUTypeQuery, scts, scts.inters, v)
}

func (scts *ServerCPUTypeSelect) sqlScan(ctx context.Context, root *ServerCPUTypeQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(scts.fns))
	for _, fn := range scts.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*scts.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := scts.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
