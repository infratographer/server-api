// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"go.infratographer.com/server-api/internal/ent/generated/serverchassistype"
	"go.infratographer.com/x/gidx"
)

// Representation of a server chassis type. ServerChassisType describes the available chassis types for a server.
type ServerChassisType struct {
	config `json:"-"`
	// ID of the ent.
	// The ID of the server chassis type.
	ID gidx.PrefixedID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// The name of the vendor for the server chassis type.
	Vendor string `json:"vendor,omitempty"`
	// The mode of the server chassis type.
	Model string `json:"model,omitempty"`
	// The height of the server chassis type.
	Height string `json:"height,omitempty"`
	// Whether the server chassis type is full depth.
	IsFullDepth bool `json:"is_full_depth,omitempty"`
	// The ID for the parent of this chassis type.
	ParentChassisTypeID gidx.PrefixedID `json:"parent_chassis_type_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ServerChassisTypeQuery when eager-loading is set.
	Edges        ServerChassisTypeEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ServerChassisTypeEdges holds the relations/edges for other nodes in the graph.
type ServerChassisTypeEdges struct {
	// Chassis holds the value of the chassis edge.
	Chassis []*ServerChassis `json:"chassis,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedChassis map[string][]*ServerChassis
}

// ChassisOrErr returns the Chassis value or an error if the edge
// was not loaded in eager-loading.
func (e ServerChassisTypeEdges) ChassisOrErr() ([]*ServerChassis, error) {
	if e.loadedTypes[0] {
		return e.Chassis, nil
	}
	return nil, &NotLoadedError{edge: "chassis"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ServerChassisType) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case serverchassistype.FieldID, serverchassistype.FieldParentChassisTypeID:
			values[i] = new(gidx.PrefixedID)
		case serverchassistype.FieldIsFullDepth:
			values[i] = new(sql.NullBool)
		case serverchassistype.FieldVendor, serverchassistype.FieldModel, serverchassistype.FieldHeight:
			values[i] = new(sql.NullString)
		case serverchassistype.FieldCreatedAt, serverchassistype.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ServerChassisType fields.
func (sct *ServerChassisType) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case serverchassistype.FieldID:
			if value, ok := values[i].(*gidx.PrefixedID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				sct.ID = *value
			}
		case serverchassistype.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sct.CreatedAt = value.Time
			}
		case serverchassistype.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sct.UpdatedAt = value.Time
			}
		case serverchassistype.FieldVendor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field vendor", values[i])
			} else if value.Valid {
				sct.Vendor = value.String
			}
		case serverchassistype.FieldModel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field model", values[i])
			} else if value.Valid {
				sct.Model = value.String
			}
		case serverchassistype.FieldHeight:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field height", values[i])
			} else if value.Valid {
				sct.Height = value.String
			}
		case serverchassistype.FieldIsFullDepth:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_full_depth", values[i])
			} else if value.Valid {
				sct.IsFullDepth = value.Bool
			}
		case serverchassistype.FieldParentChassisTypeID:
			if value, ok := values[i].(*gidx.PrefixedID); !ok {
				return fmt.Errorf("unexpected type %T for field parent_chassis_type_id", values[i])
			} else if value != nil {
				sct.ParentChassisTypeID = *value
			}
		default:
			sct.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ServerChassisType.
// This includes values selected through modifiers, order, etc.
func (sct *ServerChassisType) Value(name string) (ent.Value, error) {
	return sct.selectValues.Get(name)
}

// QueryChassis queries the "chassis" edge of the ServerChassisType entity.
func (sct *ServerChassisType) QueryChassis() *ServerChassisQuery {
	return NewServerChassisTypeClient(sct.config).QueryChassis(sct)
}

// Update returns a builder for updating this ServerChassisType.
// Note that you need to call ServerChassisType.Unwrap() before calling this method if this ServerChassisType
// was returned from a transaction, and the transaction was committed or rolled back.
func (sct *ServerChassisType) Update() *ServerChassisTypeUpdateOne {
	return NewServerChassisTypeClient(sct.config).UpdateOne(sct)
}

// Unwrap unwraps the ServerChassisType entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sct *ServerChassisType) Unwrap() *ServerChassisType {
	_tx, ok := sct.config.driver.(*txDriver)
	if !ok {
		panic("generated: ServerChassisType is not a transactional entity")
	}
	sct.config.driver = _tx.drv
	return sct
}

// String implements the fmt.Stringer.
func (sct *ServerChassisType) String() string {
	var builder strings.Builder
	builder.WriteString("ServerChassisType(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sct.ID))
	builder.WriteString("created_at=")
	builder.WriteString(sct.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(sct.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("vendor=")
	builder.WriteString(sct.Vendor)
	builder.WriteString(", ")
	builder.WriteString("model=")
	builder.WriteString(sct.Model)
	builder.WriteString(", ")
	builder.WriteString("height=")
	builder.WriteString(sct.Height)
	builder.WriteString(", ")
	builder.WriteString("is_full_depth=")
	builder.WriteString(fmt.Sprintf("%v", sct.IsFullDepth))
	builder.WriteString(", ")
	builder.WriteString("parent_chassis_type_id=")
	builder.WriteString(fmt.Sprintf("%v", sct.ParentChassisTypeID))
	builder.WriteByte(')')
	return builder.String()
}

// IsEntity implement fedruntime.Entity
func (sct ServerChassisType) IsEntity() {}

// NamedChassis returns the Chassis named value or an error if the edge was not
// loaded in eager-loading with this name.
func (sct *ServerChassisType) NamedChassis(name string) ([]*ServerChassis, error) {
	if sct.Edges.namedChassis == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := sct.Edges.namedChassis[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (sct *ServerChassisType) appendNamedChassis(name string, edges ...*ServerChassis) {
	if sct.Edges.namedChassis == nil {
		sct.Edges.namedChassis = make(map[string][]*ServerChassis)
	}
	if len(edges) == 0 {
		sct.Edges.namedChassis[name] = []*ServerChassis{}
	} else {
		sct.Edges.namedChassis[name] = append(sct.Edges.namedChassis[name], edges...)
	}
}

// ServerChassisTypes is a parsable slice of ServerChassisType.
type ServerChassisTypes []*ServerChassisType
