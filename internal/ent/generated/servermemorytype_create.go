// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"go.infratographer.com/server-api/internal/ent/generated/servermemory"
	"go.infratographer.com/server-api/internal/ent/generated/servermemorytype"
	"go.infratographer.com/x/gidx"
)

// ServerMemoryTypeCreate is the builder for creating a ServerMemoryType entity.
type ServerMemoryTypeCreate struct {
	config
	mutation *ServerMemoryTypeMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (smtc *ServerMemoryTypeCreate) SetCreatedAt(t time.Time) *ServerMemoryTypeCreate {
	smtc.mutation.SetCreatedAt(t)
	return smtc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (smtc *ServerMemoryTypeCreate) SetNillableCreatedAt(t *time.Time) *ServerMemoryTypeCreate {
	if t != nil {
		smtc.SetCreatedAt(*t)
	}
	return smtc
}

// SetUpdatedAt sets the "updated_at" field.
func (smtc *ServerMemoryTypeCreate) SetUpdatedAt(t time.Time) *ServerMemoryTypeCreate {
	smtc.mutation.SetUpdatedAt(t)
	return smtc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (smtc *ServerMemoryTypeCreate) SetNillableUpdatedAt(t *time.Time) *ServerMemoryTypeCreate {
	if t != nil {
		smtc.SetUpdatedAt(*t)
	}
	return smtc
}

// SetVendor sets the "vendor" field.
func (smtc *ServerMemoryTypeCreate) SetVendor(s string) *ServerMemoryTypeCreate {
	smtc.mutation.SetVendor(s)
	return smtc
}

// SetModel sets the "model" field.
func (smtc *ServerMemoryTypeCreate) SetModel(s string) *ServerMemoryTypeCreate {
	smtc.mutation.SetModel(s)
	return smtc
}

// SetSpeed sets the "speed" field.
func (smtc *ServerMemoryTypeCreate) SetSpeed(s string) *ServerMemoryTypeCreate {
	smtc.mutation.SetSpeed(s)
	return smtc
}

// SetSize sets the "size" field.
func (smtc *ServerMemoryTypeCreate) SetSize(s string) *ServerMemoryTypeCreate {
	smtc.mutation.SetSize(s)
	return smtc
}

// SetID sets the "id" field.
func (smtc *ServerMemoryTypeCreate) SetID(gi gidx.PrefixedID) *ServerMemoryTypeCreate {
	smtc.mutation.SetID(gi)
	return smtc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (smtc *ServerMemoryTypeCreate) SetNillableID(gi *gidx.PrefixedID) *ServerMemoryTypeCreate {
	if gi != nil {
		smtc.SetID(*gi)
	}
	return smtc
}

// AddMemoryIDs adds the "memory" edge to the ServerMemory entity by IDs.
func (smtc *ServerMemoryTypeCreate) AddMemoryIDs(ids ...gidx.PrefixedID) *ServerMemoryTypeCreate {
	smtc.mutation.AddMemoryIDs(ids...)
	return smtc
}

// AddMemory adds the "memory" edges to the ServerMemory entity.
func (smtc *ServerMemoryTypeCreate) AddMemory(s ...*ServerMemory) *ServerMemoryTypeCreate {
	ids := make([]gidx.PrefixedID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return smtc.AddMemoryIDs(ids...)
}

// Mutation returns the ServerMemoryTypeMutation object of the builder.
func (smtc *ServerMemoryTypeCreate) Mutation() *ServerMemoryTypeMutation {
	return smtc.mutation
}

// Save creates the ServerMemoryType in the database.
func (smtc *ServerMemoryTypeCreate) Save(ctx context.Context) (*ServerMemoryType, error) {
	smtc.defaults()
	return withHooks(ctx, smtc.sqlSave, smtc.mutation, smtc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (smtc *ServerMemoryTypeCreate) SaveX(ctx context.Context) *ServerMemoryType {
	v, err := smtc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (smtc *ServerMemoryTypeCreate) Exec(ctx context.Context) error {
	_, err := smtc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smtc *ServerMemoryTypeCreate) ExecX(ctx context.Context) {
	if err := smtc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (smtc *ServerMemoryTypeCreate) defaults() {
	if _, ok := smtc.mutation.CreatedAt(); !ok {
		v := servermemorytype.DefaultCreatedAt()
		smtc.mutation.SetCreatedAt(v)
	}
	if _, ok := smtc.mutation.UpdatedAt(); !ok {
		v := servermemorytype.DefaultUpdatedAt()
		smtc.mutation.SetUpdatedAt(v)
	}
	if _, ok := smtc.mutation.ID(); !ok {
		v := servermemorytype.DefaultID()
		smtc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (smtc *ServerMemoryTypeCreate) check() error {
	if _, ok := smtc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "ServerMemoryType.created_at"`)}
	}
	if _, ok := smtc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "ServerMemoryType.updated_at"`)}
	}
	if _, ok := smtc.mutation.Vendor(); !ok {
		return &ValidationError{Name: "vendor", err: errors.New(`generated: missing required field "ServerMemoryType.vendor"`)}
	}
	if v, ok := smtc.mutation.Vendor(); ok {
		if err := servermemorytype.VendorValidator(v); err != nil {
			return &ValidationError{Name: "vendor", err: fmt.Errorf(`generated: validator failed for field "ServerMemoryType.vendor": %w`, err)}
		}
	}
	if _, ok := smtc.mutation.Model(); !ok {
		return &ValidationError{Name: "model", err: errors.New(`generated: missing required field "ServerMemoryType.model"`)}
	}
	if v, ok := smtc.mutation.Model(); ok {
		if err := servermemorytype.ModelValidator(v); err != nil {
			return &ValidationError{Name: "model", err: fmt.Errorf(`generated: validator failed for field "ServerMemoryType.model": %w`, err)}
		}
	}
	if _, ok := smtc.mutation.Speed(); !ok {
		return &ValidationError{Name: "speed", err: errors.New(`generated: missing required field "ServerMemoryType.speed"`)}
	}
	if v, ok := smtc.mutation.Speed(); ok {
		if err := servermemorytype.SpeedValidator(v); err != nil {
			return &ValidationError{Name: "speed", err: fmt.Errorf(`generated: validator failed for field "ServerMemoryType.speed": %w`, err)}
		}
	}
	if _, ok := smtc.mutation.Size(); !ok {
		return &ValidationError{Name: "size", err: errors.New(`generated: missing required field "ServerMemoryType.size"`)}
	}
	if v, ok := smtc.mutation.Size(); ok {
		if err := servermemorytype.SizeValidator(v); err != nil {
			return &ValidationError{Name: "size", err: fmt.Errorf(`generated: validator failed for field "ServerMemoryType.size": %w`, err)}
		}
	}
	return nil
}

func (smtc *ServerMemoryTypeCreate) sqlSave(ctx context.Context) (*ServerMemoryType, error) {
	if err := smtc.check(); err != nil {
		return nil, err
	}
	_node, _spec := smtc.createSpec()
	if err := sqlgraph.CreateNode(ctx, smtc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*gidx.PrefixedID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	smtc.mutation.id = &_node.ID
	smtc.mutation.done = true
	return _node, nil
}

func (smtc *ServerMemoryTypeCreate) createSpec() (*ServerMemoryType, *sqlgraph.CreateSpec) {
	var (
		_node = &ServerMemoryType{config: smtc.config}
		_spec = sqlgraph.NewCreateSpec(servermemorytype.Table, sqlgraph.NewFieldSpec(servermemorytype.FieldID, field.TypeString))
	)
	if id, ok := smtc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := smtc.mutation.CreatedAt(); ok {
		_spec.SetField(servermemorytype.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := smtc.mutation.UpdatedAt(); ok {
		_spec.SetField(servermemorytype.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := smtc.mutation.Vendor(); ok {
		_spec.SetField(servermemorytype.FieldVendor, field.TypeString, value)
		_node.Vendor = value
	}
	if value, ok := smtc.mutation.Model(); ok {
		_spec.SetField(servermemorytype.FieldModel, field.TypeString, value)
		_node.Model = value
	}
	if value, ok := smtc.mutation.Speed(); ok {
		_spec.SetField(servermemorytype.FieldSpeed, field.TypeString, value)
		_node.Speed = value
	}
	if value, ok := smtc.mutation.Size(); ok {
		_spec.SetField(servermemorytype.FieldSize, field.TypeString, value)
		_node.Size = value
	}
	if nodes := smtc.mutation.MemoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   servermemorytype.MemoryTable,
			Columns: []string{servermemorytype.MemoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servermemory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ServerMemoryTypeCreateBulk is the builder for creating many ServerMemoryType entities in bulk.
type ServerMemoryTypeCreateBulk struct {
	config
	builders []*ServerMemoryTypeCreate
}

// Save creates the ServerMemoryType entities in the database.
func (smtcb *ServerMemoryTypeCreateBulk) Save(ctx context.Context) ([]*ServerMemoryType, error) {
	specs := make([]*sqlgraph.CreateSpec, len(smtcb.builders))
	nodes := make([]*ServerMemoryType, len(smtcb.builders))
	mutators := make([]Mutator, len(smtcb.builders))
	for i := range smtcb.builders {
		func(i int, root context.Context) {
			builder := smtcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ServerMemoryTypeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, smtcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, smtcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, smtcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (smtcb *ServerMemoryTypeCreateBulk) SaveX(ctx context.Context) []*ServerMemoryType {
	v, err := smtcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (smtcb *ServerMemoryTypeCreateBulk) Exec(ctx context.Context) error {
	_, err := smtcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smtcb *ServerMemoryTypeCreateBulk) ExecX(ctx context.Context) {
	if err := smtcb.Exec(ctx); err != nil {
		panic(err)
	}
}
