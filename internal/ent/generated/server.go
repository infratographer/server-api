// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"go.infratographer.com/server-api/internal/ent/generated/provider"
	"go.infratographer.com/server-api/internal/ent/generated/server"
	"go.infratographer.com/server-api/internal/ent/generated/servertype"
	"go.infratographer.com/x/gidx"
)

// Represents a server on the graph.
type Server struct {
	config `json:"-"`
	// ID of the ent.
	// The ID of the server.
	ID gidx.PrefixedID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// The name of the server.
	Name string `json:"name,omitempty"`
	// The description of the server.
	Description string `json:"description,omitempty"`
	// The ID for the owner of this server.
	OwnerID gidx.PrefixedID `json:"owner_id,omitempty"`
	// The ID for the location of this server.
	LocationID gidx.PrefixedID `json:"location_id,omitempty"`
	// The ID for the server provider for this server.
	ProviderID gidx.PrefixedID `json:"provider_id,omitempty"`
	// The ID for the server type of this server.
	ServerTypeID gidx.PrefixedID `json:"server_type_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ServerQuery when eager-loading is set.
	Edges        ServerEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ServerEdges holds the relations/edges for other nodes in the graph.
type ServerEdges struct {
	// The server provider for the server.
	Provider *Provider `json:"provider,omitempty"`
	// ServerType holds the value of the server_type edge.
	ServerType *ServerType `json:"server_type,omitempty"`
	// Components holds the value of the components edge.
	Components []*ServerComponent `json:"components,omitempty"`
	// Attributes holds the value of the attributes edge.
	Attributes []*ServerAttribute `json:"attributes,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
	// totalCount holds the count of the edges above.
	totalCount [4]map[string]int

	namedComponents map[string][]*ServerComponent
	namedAttributes map[string][]*ServerAttribute
}

// ProviderOrErr returns the Provider value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ServerEdges) ProviderOrErr() (*Provider, error) {
	if e.loadedTypes[0] {
		if e.Provider == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: provider.Label}
		}
		return e.Provider, nil
	}
	return nil, &NotLoadedError{edge: "provider"}
}

// ServerTypeOrErr returns the ServerType value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ServerEdges) ServerTypeOrErr() (*ServerType, error) {
	if e.loadedTypes[1] {
		if e.ServerType == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: servertype.Label}
		}
		return e.ServerType, nil
	}
	return nil, &NotLoadedError{edge: "server_type"}
}

// ComponentsOrErr returns the Components value or an error if the edge
// was not loaded in eager-loading.
func (e ServerEdges) ComponentsOrErr() ([]*ServerComponent, error) {
	if e.loadedTypes[2] {
		return e.Components, nil
	}
	return nil, &NotLoadedError{edge: "components"}
}

// AttributesOrErr returns the Attributes value or an error if the edge
// was not loaded in eager-loading.
func (e ServerEdges) AttributesOrErr() ([]*ServerAttribute, error) {
	if e.loadedTypes[3] {
		return e.Attributes, nil
	}
	return nil, &NotLoadedError{edge: "attributes"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Server) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case server.FieldID, server.FieldOwnerID, server.FieldLocationID, server.FieldProviderID, server.FieldServerTypeID:
			values[i] = new(gidx.PrefixedID)
		case server.FieldName, server.FieldDescription:
			values[i] = new(sql.NullString)
		case server.FieldCreatedAt, server.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Server fields.
func (s *Server) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case server.FieldID:
			if value, ok := values[i].(*gidx.PrefixedID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				s.ID = *value
			}
		case server.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		case server.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				s.UpdatedAt = value.Time
			}
		case server.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				s.Name = value.String
			}
		case server.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				s.Description = value.String
			}
		case server.FieldOwnerID:
			if value, ok := values[i].(*gidx.PrefixedID); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value != nil {
				s.OwnerID = *value
			}
		case server.FieldLocationID:
			if value, ok := values[i].(*gidx.PrefixedID); !ok {
				return fmt.Errorf("unexpected type %T for field location_id", values[i])
			} else if value != nil {
				s.LocationID = *value
			}
		case server.FieldProviderID:
			if value, ok := values[i].(*gidx.PrefixedID); !ok {
				return fmt.Errorf("unexpected type %T for field provider_id", values[i])
			} else if value != nil {
				s.ProviderID = *value
			}
		case server.FieldServerTypeID:
			if value, ok := values[i].(*gidx.PrefixedID); !ok {
				return fmt.Errorf("unexpected type %T for field server_type_id", values[i])
			} else if value != nil {
				s.ServerTypeID = *value
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Server.
// This includes values selected through modifiers, order, etc.
func (s *Server) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryProvider queries the "provider" edge of the Server entity.
func (s *Server) QueryProvider() *ProviderQuery {
	return NewServerClient(s.config).QueryProvider(s)
}

// QueryServerType queries the "server_type" edge of the Server entity.
func (s *Server) QueryServerType() *ServerTypeQuery {
	return NewServerClient(s.config).QueryServerType(s)
}

// QueryComponents queries the "components" edge of the Server entity.
func (s *Server) QueryComponents() *ServerComponentQuery {
	return NewServerClient(s.config).QueryComponents(s)
}

// QueryAttributes queries the "attributes" edge of the Server entity.
func (s *Server) QueryAttributes() *ServerAttributeQuery {
	return NewServerClient(s.config).QueryAttributes(s)
}

// Update returns a builder for updating this Server.
// Note that you need to call Server.Unwrap() before calling this method if this Server
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Server) Update() *ServerUpdateOne {
	return NewServerClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Server entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Server) Unwrap() *Server {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("generated: Server is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Server) String() string {
	var builder strings.Builder
	builder.WriteString("Server(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(s.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(s.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(s.Description)
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(fmt.Sprintf("%v", s.OwnerID))
	builder.WriteString(", ")
	builder.WriteString("location_id=")
	builder.WriteString(fmt.Sprintf("%v", s.LocationID))
	builder.WriteString(", ")
	builder.WriteString("provider_id=")
	builder.WriteString(fmt.Sprintf("%v", s.ProviderID))
	builder.WriteString(", ")
	builder.WriteString("server_type_id=")
	builder.WriteString(fmt.Sprintf("%v", s.ServerTypeID))
	builder.WriteByte(')')
	return builder.String()
}

// IsEntity implement fedruntime.Entity
func (s Server) IsEntity() {}

// IsIPAddressable implements interface for IPAddressable
func (s Server) IsIPAddressable() {}

// NamedComponents returns the Components named value or an error if the edge was not
// loaded in eager-loading with this name.
func (s *Server) NamedComponents(name string) ([]*ServerComponent, error) {
	if s.Edges.namedComponents == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := s.Edges.namedComponents[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (s *Server) appendNamedComponents(name string, edges ...*ServerComponent) {
	if s.Edges.namedComponents == nil {
		s.Edges.namedComponents = make(map[string][]*ServerComponent)
	}
	if len(edges) == 0 {
		s.Edges.namedComponents[name] = []*ServerComponent{}
	} else {
		s.Edges.namedComponents[name] = append(s.Edges.namedComponents[name], edges...)
	}
}

// NamedAttributes returns the Attributes named value or an error if the edge was not
// loaded in eager-loading with this name.
func (s *Server) NamedAttributes(name string) ([]*ServerAttribute, error) {
	if s.Edges.namedAttributes == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := s.Edges.namedAttributes[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (s *Server) appendNamedAttributes(name string, edges ...*ServerAttribute) {
	if s.Edges.namedAttributes == nil {
		s.Edges.namedAttributes = make(map[string][]*ServerAttribute)
	}
	if len(edges) == 0 {
		s.Edges.namedAttributes[name] = []*ServerAttribute{}
	} else {
		s.Edges.namedAttributes[name] = append(s.Edges.namedAttributes[name], edges...)
	}
}

// Servers is a parsable slice of Server.
type Servers []*Server
