// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"log"

	"go.infratographer.com/server-api/internal/ent/generated/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"go.infratographer.com/server-api/internal/ent/generated/provider"
	"go.infratographer.com/server-api/internal/ent/generated/server"
	"go.infratographer.com/server-api/internal/ent/generated/serverchassis"
	"go.infratographer.com/server-api/internal/ent/generated/serverchassistype"
	"go.infratographer.com/server-api/internal/ent/generated/servercomponent"
	"go.infratographer.com/server-api/internal/ent/generated/servercomponenttype"
	"go.infratographer.com/server-api/internal/ent/generated/servercpu"
	"go.infratographer.com/server-api/internal/ent/generated/servercputype"
	"go.infratographer.com/server-api/internal/ent/generated/serverharddrive"
	"go.infratographer.com/server-api/internal/ent/generated/serverharddrivetype"
	"go.infratographer.com/server-api/internal/ent/generated/servermemory"
	"go.infratographer.com/server-api/internal/ent/generated/servermemorytype"
	"go.infratographer.com/server-api/internal/ent/generated/servermotherboard"
	"go.infratographer.com/server-api/internal/ent/generated/servermotherboardtype"
	"go.infratographer.com/server-api/internal/ent/generated/servernetworkcard"
	"go.infratographer.com/server-api/internal/ent/generated/servernetworkcardtype"
	"go.infratographer.com/server-api/internal/ent/generated/servernetworkport"
	"go.infratographer.com/server-api/internal/ent/generated/serverpowersupply"
	"go.infratographer.com/server-api/internal/ent/generated/serverpowersupplytype"
	"go.infratographer.com/server-api/internal/ent/generated/servertype"
	"go.infratographer.com/x/events"
	"go.infratographer.com/x/gidx"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Provider is the client for interacting with the Provider builders.
	Provider *ProviderClient
	// Server is the client for interacting with the Server builders.
	Server *ServerClient
	// ServerCPU is the client for interacting with the ServerCPU builders.
	ServerCPU *ServerCPUClient
	// ServerCPUType is the client for interacting with the ServerCPUType builders.
	ServerCPUType *ServerCPUTypeClient
	// ServerChassis is the client for interacting with the ServerChassis builders.
	ServerChassis *ServerChassisClient
	// ServerChassisType is the client for interacting with the ServerChassisType builders.
	ServerChassisType *ServerChassisTypeClient
	// ServerComponent is the client for interacting with the ServerComponent builders.
	ServerComponent *ServerComponentClient
	// ServerComponentType is the client for interacting with the ServerComponentType builders.
	ServerComponentType *ServerComponentTypeClient
	// ServerHardDrive is the client for interacting with the ServerHardDrive builders.
	ServerHardDrive *ServerHardDriveClient
	// ServerHardDriveType is the client for interacting with the ServerHardDriveType builders.
	ServerHardDriveType *ServerHardDriveTypeClient
	// ServerMemory is the client for interacting with the ServerMemory builders.
	ServerMemory *ServerMemoryClient
	// ServerMemoryType is the client for interacting with the ServerMemoryType builders.
	ServerMemoryType *ServerMemoryTypeClient
	// ServerMotherboard is the client for interacting with the ServerMotherboard builders.
	ServerMotherboard *ServerMotherboardClient
	// ServerMotherboardType is the client for interacting with the ServerMotherboardType builders.
	ServerMotherboardType *ServerMotherboardTypeClient
	// ServerNetworkCard is the client for interacting with the ServerNetworkCard builders.
	ServerNetworkCard *ServerNetworkCardClient
	// ServerNetworkCardType is the client for interacting with the ServerNetworkCardType builders.
	ServerNetworkCardType *ServerNetworkCardTypeClient
	// ServerNetworkPort is the client for interacting with the ServerNetworkPort builders.
	ServerNetworkPort *ServerNetworkPortClient
	// ServerPowerSupply is the client for interacting with the ServerPowerSupply builders.
	ServerPowerSupply *ServerPowerSupplyClient
	// ServerPowerSupplyType is the client for interacting with the ServerPowerSupplyType builders.
	ServerPowerSupplyType *ServerPowerSupplyTypeClient
	// ServerType is the client for interacting with the ServerType builders.
	ServerType *ServerTypeClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Provider = NewProviderClient(c.config)
	c.Server = NewServerClient(c.config)
	c.ServerCPU = NewServerCPUClient(c.config)
	c.ServerCPUType = NewServerCPUTypeClient(c.config)
	c.ServerChassis = NewServerChassisClient(c.config)
	c.ServerChassisType = NewServerChassisTypeClient(c.config)
	c.ServerComponent = NewServerComponentClient(c.config)
	c.ServerComponentType = NewServerComponentTypeClient(c.config)
	c.ServerHardDrive = NewServerHardDriveClient(c.config)
	c.ServerHardDriveType = NewServerHardDriveTypeClient(c.config)
	c.ServerMemory = NewServerMemoryClient(c.config)
	c.ServerMemoryType = NewServerMemoryTypeClient(c.config)
	c.ServerMotherboard = NewServerMotherboardClient(c.config)
	c.ServerMotherboardType = NewServerMotherboardTypeClient(c.config)
	c.ServerNetworkCard = NewServerNetworkCardClient(c.config)
	c.ServerNetworkCardType = NewServerNetworkCardTypeClient(c.config)
	c.ServerNetworkPort = NewServerNetworkPortClient(c.config)
	c.ServerPowerSupply = NewServerPowerSupplyClient(c.config)
	c.ServerPowerSupplyType = NewServerPowerSupplyTypeClient(c.config)
	c.ServerType = NewServerTypeClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters          *inters
		EventsPublisher events.Connection
	}
	// Option function to configure the client.
	Option func(*config)
)

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// EventsPublisher configures the EventsPublisher.
func EventsPublisher(v events.Connection) Option {
	return func(c *config) {
		c.EventsPublisher = v
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("generated: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("generated: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                   ctx,
		config:                cfg,
		Provider:              NewProviderClient(cfg),
		Server:                NewServerClient(cfg),
		ServerCPU:             NewServerCPUClient(cfg),
		ServerCPUType:         NewServerCPUTypeClient(cfg),
		ServerChassis:         NewServerChassisClient(cfg),
		ServerChassisType:     NewServerChassisTypeClient(cfg),
		ServerComponent:       NewServerComponentClient(cfg),
		ServerComponentType:   NewServerComponentTypeClient(cfg),
		ServerHardDrive:       NewServerHardDriveClient(cfg),
		ServerHardDriveType:   NewServerHardDriveTypeClient(cfg),
		ServerMemory:          NewServerMemoryClient(cfg),
		ServerMemoryType:      NewServerMemoryTypeClient(cfg),
		ServerMotherboard:     NewServerMotherboardClient(cfg),
		ServerMotherboardType: NewServerMotherboardTypeClient(cfg),
		ServerNetworkCard:     NewServerNetworkCardClient(cfg),
		ServerNetworkCardType: NewServerNetworkCardTypeClient(cfg),
		ServerNetworkPort:     NewServerNetworkPortClient(cfg),
		ServerPowerSupply:     NewServerPowerSupplyClient(cfg),
		ServerPowerSupplyType: NewServerPowerSupplyTypeClient(cfg),
		ServerType:            NewServerTypeClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                   ctx,
		config:                cfg,
		Provider:              NewProviderClient(cfg),
		Server:                NewServerClient(cfg),
		ServerCPU:             NewServerCPUClient(cfg),
		ServerCPUType:         NewServerCPUTypeClient(cfg),
		ServerChassis:         NewServerChassisClient(cfg),
		ServerChassisType:     NewServerChassisTypeClient(cfg),
		ServerComponent:       NewServerComponentClient(cfg),
		ServerComponentType:   NewServerComponentTypeClient(cfg),
		ServerHardDrive:       NewServerHardDriveClient(cfg),
		ServerHardDriveType:   NewServerHardDriveTypeClient(cfg),
		ServerMemory:          NewServerMemoryClient(cfg),
		ServerMemoryType:      NewServerMemoryTypeClient(cfg),
		ServerMotherboard:     NewServerMotherboardClient(cfg),
		ServerMotherboardType: NewServerMotherboardTypeClient(cfg),
		ServerNetworkCard:     NewServerNetworkCardClient(cfg),
		ServerNetworkCardType: NewServerNetworkCardTypeClient(cfg),
		ServerNetworkPort:     NewServerNetworkPortClient(cfg),
		ServerPowerSupply:     NewServerPowerSupplyClient(cfg),
		ServerPowerSupplyType: NewServerPowerSupplyTypeClient(cfg),
		ServerType:            NewServerTypeClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Provider.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Provider, c.Server, c.ServerCPU, c.ServerCPUType, c.ServerChassis,
		c.ServerChassisType, c.ServerComponent, c.ServerComponentType,
		c.ServerHardDrive, c.ServerHardDriveType, c.ServerMemory, c.ServerMemoryType,
		c.ServerMotherboard, c.ServerMotherboardType, c.ServerNetworkCard,
		c.ServerNetworkCardType, c.ServerNetworkPort, c.ServerPowerSupply,
		c.ServerPowerSupplyType, c.ServerType,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Provider, c.Server, c.ServerCPU, c.ServerCPUType, c.ServerChassis,
		c.ServerChassisType, c.ServerComponent, c.ServerComponentType,
		c.ServerHardDrive, c.ServerHardDriveType, c.ServerMemory, c.ServerMemoryType,
		c.ServerMotherboard, c.ServerMotherboardType, c.ServerNetworkCard,
		c.ServerNetworkCardType, c.ServerNetworkPort, c.ServerPowerSupply,
		c.ServerPowerSupplyType, c.ServerType,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *ProviderMutation:
		return c.Provider.mutate(ctx, m)
	case *ServerMutation:
		return c.Server.mutate(ctx, m)
	case *ServerCPUMutation:
		return c.ServerCPU.mutate(ctx, m)
	case *ServerCPUTypeMutation:
		return c.ServerCPUType.mutate(ctx, m)
	case *ServerChassisMutation:
		return c.ServerChassis.mutate(ctx, m)
	case *ServerChassisTypeMutation:
		return c.ServerChassisType.mutate(ctx, m)
	case *ServerComponentMutation:
		return c.ServerComponent.mutate(ctx, m)
	case *ServerComponentTypeMutation:
		return c.ServerComponentType.mutate(ctx, m)
	case *ServerHardDriveMutation:
		return c.ServerHardDrive.mutate(ctx, m)
	case *ServerHardDriveTypeMutation:
		return c.ServerHardDriveType.mutate(ctx, m)
	case *ServerMemoryMutation:
		return c.ServerMemory.mutate(ctx, m)
	case *ServerMemoryTypeMutation:
		return c.ServerMemoryType.mutate(ctx, m)
	case *ServerMotherboardMutation:
		return c.ServerMotherboard.mutate(ctx, m)
	case *ServerMotherboardTypeMutation:
		return c.ServerMotherboardType.mutate(ctx, m)
	case *ServerNetworkCardMutation:
		return c.ServerNetworkCard.mutate(ctx, m)
	case *ServerNetworkCardTypeMutation:
		return c.ServerNetworkCardType.mutate(ctx, m)
	case *ServerNetworkPortMutation:
		return c.ServerNetworkPort.mutate(ctx, m)
	case *ServerPowerSupplyMutation:
		return c.ServerPowerSupply.mutate(ctx, m)
	case *ServerPowerSupplyTypeMutation:
		return c.ServerPowerSupplyType.mutate(ctx, m)
	case *ServerTypeMutation:
		return c.ServerType.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("generated: unknown mutation type %T", m)
	}
}

// ProviderClient is a client for the Provider schema.
type ProviderClient struct {
	config
}

// NewProviderClient returns a client for the Provider from the given config.
func NewProviderClient(c config) *ProviderClient {
	return &ProviderClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `provider.Hooks(f(g(h())))`.
func (c *ProviderClient) Use(hooks ...Hook) {
	c.hooks.Provider = append(c.hooks.Provider, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `provider.Intercept(f(g(h())))`.
func (c *ProviderClient) Intercept(interceptors ...Interceptor) {
	c.inters.Provider = append(c.inters.Provider, interceptors...)
}

// Create returns a builder for creating a Provider entity.
func (c *ProviderClient) Create() *ProviderCreate {
	mutation := newProviderMutation(c.config, OpCreate)
	return &ProviderCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Provider entities.
func (c *ProviderClient) CreateBulk(builders ...*ProviderCreate) *ProviderCreateBulk {
	return &ProviderCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Provider.
func (c *ProviderClient) Update() *ProviderUpdate {
	mutation := newProviderMutation(c.config, OpUpdate)
	return &ProviderUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProviderClient) UpdateOne(pr *Provider) *ProviderUpdateOne {
	mutation := newProviderMutation(c.config, OpUpdateOne, withProvider(pr))
	return &ProviderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProviderClient) UpdateOneID(id gidx.PrefixedID) *ProviderUpdateOne {
	mutation := newProviderMutation(c.config, OpUpdateOne, withProviderID(id))
	return &ProviderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Provider.
func (c *ProviderClient) Delete() *ProviderDelete {
	mutation := newProviderMutation(c.config, OpDelete)
	return &ProviderDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProviderClient) DeleteOne(pr *Provider) *ProviderDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProviderClient) DeleteOneID(id gidx.PrefixedID) *ProviderDeleteOne {
	builder := c.Delete().Where(provider.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProviderDeleteOne{builder}
}

// Query returns a query builder for Provider.
func (c *ProviderClient) Query() *ProviderQuery {
	return &ProviderQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProvider},
		inters: c.Interceptors(),
	}
}

// Get returns a Provider entity by its id.
func (c *ProviderClient) Get(ctx context.Context, id gidx.PrefixedID) (*Provider, error) {
	return c.Query().Where(provider.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProviderClient) GetX(ctx context.Context, id gidx.PrefixedID) *Provider {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryServers queries the servers edge of a Provider.
func (c *ProviderClient) QueryServers(pr *Provider) *ServerQuery {
	query := (&ServerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(provider.Table, provider.FieldID, id),
			sqlgraph.To(server.Table, server.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, provider.ServersTable, provider.ServersColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProviderClient) Hooks() []Hook {
	return c.hooks.Provider
}

// Interceptors returns the client interceptors.
func (c *ProviderClient) Interceptors() []Interceptor {
	return c.inters.Provider
}

func (c *ProviderClient) mutate(ctx context.Context, m *ProviderMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProviderCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProviderUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProviderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProviderDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown Provider mutation op: %q", m.Op())
	}
}

// ServerClient is a client for the Server schema.
type ServerClient struct {
	config
}

// NewServerClient returns a client for the Server from the given config.
func NewServerClient(c config) *ServerClient {
	return &ServerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `server.Hooks(f(g(h())))`.
func (c *ServerClient) Use(hooks ...Hook) {
	c.hooks.Server = append(c.hooks.Server, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `server.Intercept(f(g(h())))`.
func (c *ServerClient) Intercept(interceptors ...Interceptor) {
	c.inters.Server = append(c.inters.Server, interceptors...)
}

// Create returns a builder for creating a Server entity.
func (c *ServerClient) Create() *ServerCreate {
	mutation := newServerMutation(c.config, OpCreate)
	return &ServerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Server entities.
func (c *ServerClient) CreateBulk(builders ...*ServerCreate) *ServerCreateBulk {
	return &ServerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Server.
func (c *ServerClient) Update() *ServerUpdate {
	mutation := newServerMutation(c.config, OpUpdate)
	return &ServerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ServerClient) UpdateOne(s *Server) *ServerUpdateOne {
	mutation := newServerMutation(c.config, OpUpdateOne, withServer(s))
	return &ServerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ServerClient) UpdateOneID(id gidx.PrefixedID) *ServerUpdateOne {
	mutation := newServerMutation(c.config, OpUpdateOne, withServerID(id))
	return &ServerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Server.
func (c *ServerClient) Delete() *ServerDelete {
	mutation := newServerMutation(c.config, OpDelete)
	return &ServerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ServerClient) DeleteOne(s *Server) *ServerDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ServerClient) DeleteOneID(id gidx.PrefixedID) *ServerDeleteOne {
	builder := c.Delete().Where(server.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ServerDeleteOne{builder}
}

// Query returns a query builder for Server.
func (c *ServerClient) Query() *ServerQuery {
	return &ServerQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeServer},
		inters: c.Interceptors(),
	}
}

// Get returns a Server entity by its id.
func (c *ServerClient) Get(ctx context.Context, id gidx.PrefixedID) (*Server, error) {
	return c.Query().Where(server.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ServerClient) GetX(ctx context.Context, id gidx.PrefixedID) *Server {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProvider queries the provider edge of a Server.
func (c *ServerClient) QueryProvider(s *Server) *ProviderQuery {
	query := (&ProviderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(server.Table, server.FieldID, id),
			sqlgraph.To(provider.Table, provider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, server.ProviderTable, server.ProviderColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryServerType queries the server_type edge of a Server.
func (c *ServerClient) QueryServerType(s *Server) *ServerTypeQuery {
	query := (&ServerTypeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(server.Table, server.FieldID, id),
			sqlgraph.To(servertype.Table, servertype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, server.ServerTypeTable, server.ServerTypeColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryComponents queries the components edge of a Server.
func (c *ServerClient) QueryComponents(s *Server) *ServerComponentQuery {
	query := (&ServerComponentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(server.Table, server.FieldID, id),
			sqlgraph.To(servercomponent.Table, servercomponent.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, server.ComponentsTable, server.ComponentsColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ServerClient) Hooks() []Hook {
	return c.hooks.Server
}

// Interceptors returns the client interceptors.
func (c *ServerClient) Interceptors() []Interceptor {
	return c.inters.Server
}

func (c *ServerClient) mutate(ctx context.Context, m *ServerMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ServerCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ServerUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ServerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ServerDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown Server mutation op: %q", m.Op())
	}
}

// ServerCPUClient is a client for the ServerCPU schema.
type ServerCPUClient struct {
	config
}

// NewServerCPUClient returns a client for the ServerCPU from the given config.
func NewServerCPUClient(c config) *ServerCPUClient {
	return &ServerCPUClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `servercpu.Hooks(f(g(h())))`.
func (c *ServerCPUClient) Use(hooks ...Hook) {
	c.hooks.ServerCPU = append(c.hooks.ServerCPU, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `servercpu.Intercept(f(g(h())))`.
func (c *ServerCPUClient) Intercept(interceptors ...Interceptor) {
	c.inters.ServerCPU = append(c.inters.ServerCPU, interceptors...)
}

// Create returns a builder for creating a ServerCPU entity.
func (c *ServerCPUClient) Create() *ServerCPUCreate {
	mutation := newServerCPUMutation(c.config, OpCreate)
	return &ServerCPUCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ServerCPU entities.
func (c *ServerCPUClient) CreateBulk(builders ...*ServerCPUCreate) *ServerCPUCreateBulk {
	return &ServerCPUCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ServerCPU.
func (c *ServerCPUClient) Update() *ServerCPUUpdate {
	mutation := newServerCPUMutation(c.config, OpUpdate)
	return &ServerCPUUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ServerCPUClient) UpdateOne(sc *ServerCPU) *ServerCPUUpdateOne {
	mutation := newServerCPUMutation(c.config, OpUpdateOne, withServerCPU(sc))
	return &ServerCPUUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ServerCPUClient) UpdateOneID(id gidx.PrefixedID) *ServerCPUUpdateOne {
	mutation := newServerCPUMutation(c.config, OpUpdateOne, withServerCPUID(id))
	return &ServerCPUUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ServerCPU.
func (c *ServerCPUClient) Delete() *ServerCPUDelete {
	mutation := newServerCPUMutation(c.config, OpDelete)
	return &ServerCPUDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ServerCPUClient) DeleteOne(sc *ServerCPU) *ServerCPUDeleteOne {
	return c.DeleteOneID(sc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ServerCPUClient) DeleteOneID(id gidx.PrefixedID) *ServerCPUDeleteOne {
	builder := c.Delete().Where(servercpu.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ServerCPUDeleteOne{builder}
}

// Query returns a query builder for ServerCPU.
func (c *ServerCPUClient) Query() *ServerCPUQuery {
	return &ServerCPUQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeServerCPU},
		inters: c.Interceptors(),
	}
}

// Get returns a ServerCPU entity by its id.
func (c *ServerCPUClient) Get(ctx context.Context, id gidx.PrefixedID) (*ServerCPU, error) {
	return c.Query().Where(servercpu.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ServerCPUClient) GetX(ctx context.Context, id gidx.PrefixedID) *ServerCPU {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryServer queries the server edge of a ServerCPU.
func (c *ServerCPUClient) QueryServer(sc *ServerCPU) *ServerQuery {
	query := (&ServerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(servercpu.Table, servercpu.FieldID, id),
			sqlgraph.To(server.Table, server.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, servercpu.ServerTable, servercpu.ServerColumn),
		)
		fromV = sqlgraph.Neighbors(sc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryServerCPUType queries the server_cpu_type edge of a ServerCPU.
func (c *ServerCPUClient) QueryServerCPUType(sc *ServerCPU) *ServerCPUTypeQuery {
	query := (&ServerCPUTypeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(servercpu.Table, servercpu.FieldID, id),
			sqlgraph.To(servercputype.Table, servercputype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, servercpu.ServerCPUTypeTable, servercpu.ServerCPUTypeColumn),
		)
		fromV = sqlgraph.Neighbors(sc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ServerCPUClient) Hooks() []Hook {
	return c.hooks.ServerCPU
}

// Interceptors returns the client interceptors.
func (c *ServerCPUClient) Interceptors() []Interceptor {
	return c.inters.ServerCPU
}

func (c *ServerCPUClient) mutate(ctx context.Context, m *ServerCPUMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ServerCPUCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ServerCPUUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ServerCPUUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ServerCPUDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown ServerCPU mutation op: %q", m.Op())
	}
}

// ServerCPUTypeClient is a client for the ServerCPUType schema.
type ServerCPUTypeClient struct {
	config
}

// NewServerCPUTypeClient returns a client for the ServerCPUType from the given config.
func NewServerCPUTypeClient(c config) *ServerCPUTypeClient {
	return &ServerCPUTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `servercputype.Hooks(f(g(h())))`.
func (c *ServerCPUTypeClient) Use(hooks ...Hook) {
	c.hooks.ServerCPUType = append(c.hooks.ServerCPUType, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `servercputype.Intercept(f(g(h())))`.
func (c *ServerCPUTypeClient) Intercept(interceptors ...Interceptor) {
	c.inters.ServerCPUType = append(c.inters.ServerCPUType, interceptors...)
}

// Create returns a builder for creating a ServerCPUType entity.
func (c *ServerCPUTypeClient) Create() *ServerCPUTypeCreate {
	mutation := newServerCPUTypeMutation(c.config, OpCreate)
	return &ServerCPUTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ServerCPUType entities.
func (c *ServerCPUTypeClient) CreateBulk(builders ...*ServerCPUTypeCreate) *ServerCPUTypeCreateBulk {
	return &ServerCPUTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ServerCPUType.
func (c *ServerCPUTypeClient) Update() *ServerCPUTypeUpdate {
	mutation := newServerCPUTypeMutation(c.config, OpUpdate)
	return &ServerCPUTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ServerCPUTypeClient) UpdateOne(sct *ServerCPUType) *ServerCPUTypeUpdateOne {
	mutation := newServerCPUTypeMutation(c.config, OpUpdateOne, withServerCPUType(sct))
	return &ServerCPUTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ServerCPUTypeClient) UpdateOneID(id gidx.PrefixedID) *ServerCPUTypeUpdateOne {
	mutation := newServerCPUTypeMutation(c.config, OpUpdateOne, withServerCPUTypeID(id))
	return &ServerCPUTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ServerCPUType.
func (c *ServerCPUTypeClient) Delete() *ServerCPUTypeDelete {
	mutation := newServerCPUTypeMutation(c.config, OpDelete)
	return &ServerCPUTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ServerCPUTypeClient) DeleteOne(sct *ServerCPUType) *ServerCPUTypeDeleteOne {
	return c.DeleteOneID(sct.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ServerCPUTypeClient) DeleteOneID(id gidx.PrefixedID) *ServerCPUTypeDeleteOne {
	builder := c.Delete().Where(servercputype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ServerCPUTypeDeleteOne{builder}
}

// Query returns a query builder for ServerCPUType.
func (c *ServerCPUTypeClient) Query() *ServerCPUTypeQuery {
	return &ServerCPUTypeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeServerCPUType},
		inters: c.Interceptors(),
	}
}

// Get returns a ServerCPUType entity by its id.
func (c *ServerCPUTypeClient) Get(ctx context.Context, id gidx.PrefixedID) (*ServerCPUType, error) {
	return c.Query().Where(servercputype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ServerCPUTypeClient) GetX(ctx context.Context, id gidx.PrefixedID) *ServerCPUType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCPU queries the cpu edge of a ServerCPUType.
func (c *ServerCPUTypeClient) QueryCPU(sct *ServerCPUType) *ServerCPUQuery {
	query := (&ServerCPUClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sct.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(servercputype.Table, servercputype.FieldID, id),
			sqlgraph.To(servercpu.Table, servercpu.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, servercputype.CPUTable, servercputype.CPUColumn),
		)
		fromV = sqlgraph.Neighbors(sct.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ServerCPUTypeClient) Hooks() []Hook {
	return c.hooks.ServerCPUType
}

// Interceptors returns the client interceptors.
func (c *ServerCPUTypeClient) Interceptors() []Interceptor {
	return c.inters.ServerCPUType
}

func (c *ServerCPUTypeClient) mutate(ctx context.Context, m *ServerCPUTypeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ServerCPUTypeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ServerCPUTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ServerCPUTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ServerCPUTypeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown ServerCPUType mutation op: %q", m.Op())
	}
}

// ServerChassisClient is a client for the ServerChassis schema.
type ServerChassisClient struct {
	config
}

// NewServerChassisClient returns a client for the ServerChassis from the given config.
func NewServerChassisClient(c config) *ServerChassisClient {
	return &ServerChassisClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `serverchassis.Hooks(f(g(h())))`.
func (c *ServerChassisClient) Use(hooks ...Hook) {
	c.hooks.ServerChassis = append(c.hooks.ServerChassis, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `serverchassis.Intercept(f(g(h())))`.
func (c *ServerChassisClient) Intercept(interceptors ...Interceptor) {
	c.inters.ServerChassis = append(c.inters.ServerChassis, interceptors...)
}

// Create returns a builder for creating a ServerChassis entity.
func (c *ServerChassisClient) Create() *ServerChassisCreate {
	mutation := newServerChassisMutation(c.config, OpCreate)
	return &ServerChassisCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ServerChassis entities.
func (c *ServerChassisClient) CreateBulk(builders ...*ServerChassisCreate) *ServerChassisCreateBulk {
	return &ServerChassisCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ServerChassis.
func (c *ServerChassisClient) Update() *ServerChassisUpdate {
	mutation := newServerChassisMutation(c.config, OpUpdate)
	return &ServerChassisUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ServerChassisClient) UpdateOne(sc *ServerChassis) *ServerChassisUpdateOne {
	mutation := newServerChassisMutation(c.config, OpUpdateOne, withServerChassis(sc))
	return &ServerChassisUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ServerChassisClient) UpdateOneID(id gidx.PrefixedID) *ServerChassisUpdateOne {
	mutation := newServerChassisMutation(c.config, OpUpdateOne, withServerChassisID(id))
	return &ServerChassisUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ServerChassis.
func (c *ServerChassisClient) Delete() *ServerChassisDelete {
	mutation := newServerChassisMutation(c.config, OpDelete)
	return &ServerChassisDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ServerChassisClient) DeleteOne(sc *ServerChassis) *ServerChassisDeleteOne {
	return c.DeleteOneID(sc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ServerChassisClient) DeleteOneID(id gidx.PrefixedID) *ServerChassisDeleteOne {
	builder := c.Delete().Where(serverchassis.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ServerChassisDeleteOne{builder}
}

// Query returns a query builder for ServerChassis.
func (c *ServerChassisClient) Query() *ServerChassisQuery {
	return &ServerChassisQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeServerChassis},
		inters: c.Interceptors(),
	}
}

// Get returns a ServerChassis entity by its id.
func (c *ServerChassisClient) Get(ctx context.Context, id gidx.PrefixedID) (*ServerChassis, error) {
	return c.Query().Where(serverchassis.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ServerChassisClient) GetX(ctx context.Context, id gidx.PrefixedID) *ServerChassis {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryServer queries the server edge of a ServerChassis.
func (c *ServerChassisClient) QueryServer(sc *ServerChassis) *ServerQuery {
	query := (&ServerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(serverchassis.Table, serverchassis.FieldID, id),
			sqlgraph.To(server.Table, server.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, serverchassis.ServerTable, serverchassis.ServerColumn),
		)
		fromV = sqlgraph.Neighbors(sc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryServerChassisType queries the server_chassis_type edge of a ServerChassis.
func (c *ServerChassisClient) QueryServerChassisType(sc *ServerChassis) *ServerChassisTypeQuery {
	query := (&ServerChassisTypeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(serverchassis.Table, serverchassis.FieldID, id),
			sqlgraph.To(serverchassistype.Table, serverchassistype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, serverchassis.ServerChassisTypeTable, serverchassis.ServerChassisTypeColumn),
		)
		fromV = sqlgraph.Neighbors(sc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ServerChassisClient) Hooks() []Hook {
	return c.hooks.ServerChassis
}

// Interceptors returns the client interceptors.
func (c *ServerChassisClient) Interceptors() []Interceptor {
	return c.inters.ServerChassis
}

func (c *ServerChassisClient) mutate(ctx context.Context, m *ServerChassisMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ServerChassisCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ServerChassisUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ServerChassisUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ServerChassisDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown ServerChassis mutation op: %q", m.Op())
	}
}

// ServerChassisTypeClient is a client for the ServerChassisType schema.
type ServerChassisTypeClient struct {
	config
}

// NewServerChassisTypeClient returns a client for the ServerChassisType from the given config.
func NewServerChassisTypeClient(c config) *ServerChassisTypeClient {
	return &ServerChassisTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `serverchassistype.Hooks(f(g(h())))`.
func (c *ServerChassisTypeClient) Use(hooks ...Hook) {
	c.hooks.ServerChassisType = append(c.hooks.ServerChassisType, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `serverchassistype.Intercept(f(g(h())))`.
func (c *ServerChassisTypeClient) Intercept(interceptors ...Interceptor) {
	c.inters.ServerChassisType = append(c.inters.ServerChassisType, interceptors...)
}

// Create returns a builder for creating a ServerChassisType entity.
func (c *ServerChassisTypeClient) Create() *ServerChassisTypeCreate {
	mutation := newServerChassisTypeMutation(c.config, OpCreate)
	return &ServerChassisTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ServerChassisType entities.
func (c *ServerChassisTypeClient) CreateBulk(builders ...*ServerChassisTypeCreate) *ServerChassisTypeCreateBulk {
	return &ServerChassisTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ServerChassisType.
func (c *ServerChassisTypeClient) Update() *ServerChassisTypeUpdate {
	mutation := newServerChassisTypeMutation(c.config, OpUpdate)
	return &ServerChassisTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ServerChassisTypeClient) UpdateOne(sct *ServerChassisType) *ServerChassisTypeUpdateOne {
	mutation := newServerChassisTypeMutation(c.config, OpUpdateOne, withServerChassisType(sct))
	return &ServerChassisTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ServerChassisTypeClient) UpdateOneID(id gidx.PrefixedID) *ServerChassisTypeUpdateOne {
	mutation := newServerChassisTypeMutation(c.config, OpUpdateOne, withServerChassisTypeID(id))
	return &ServerChassisTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ServerChassisType.
func (c *ServerChassisTypeClient) Delete() *ServerChassisTypeDelete {
	mutation := newServerChassisTypeMutation(c.config, OpDelete)
	return &ServerChassisTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ServerChassisTypeClient) DeleteOne(sct *ServerChassisType) *ServerChassisTypeDeleteOne {
	return c.DeleteOneID(sct.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ServerChassisTypeClient) DeleteOneID(id gidx.PrefixedID) *ServerChassisTypeDeleteOne {
	builder := c.Delete().Where(serverchassistype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ServerChassisTypeDeleteOne{builder}
}

// Query returns a query builder for ServerChassisType.
func (c *ServerChassisTypeClient) Query() *ServerChassisTypeQuery {
	return &ServerChassisTypeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeServerChassisType},
		inters: c.Interceptors(),
	}
}

// Get returns a ServerChassisType entity by its id.
func (c *ServerChassisTypeClient) Get(ctx context.Context, id gidx.PrefixedID) (*ServerChassisType, error) {
	return c.Query().Where(serverchassistype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ServerChassisTypeClient) GetX(ctx context.Context, id gidx.PrefixedID) *ServerChassisType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryChassis queries the chassis edge of a ServerChassisType.
func (c *ServerChassisTypeClient) QueryChassis(sct *ServerChassisType) *ServerChassisQuery {
	query := (&ServerChassisClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sct.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(serverchassistype.Table, serverchassistype.FieldID, id),
			sqlgraph.To(serverchassis.Table, serverchassis.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, serverchassistype.ChassisTable, serverchassistype.ChassisColumn),
		)
		fromV = sqlgraph.Neighbors(sct.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ServerChassisTypeClient) Hooks() []Hook {
	return c.hooks.ServerChassisType
}

// Interceptors returns the client interceptors.
func (c *ServerChassisTypeClient) Interceptors() []Interceptor {
	return c.inters.ServerChassisType
}

func (c *ServerChassisTypeClient) mutate(ctx context.Context, m *ServerChassisTypeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ServerChassisTypeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ServerChassisTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ServerChassisTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ServerChassisTypeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown ServerChassisType mutation op: %q", m.Op())
	}
}

// ServerComponentClient is a client for the ServerComponent schema.
type ServerComponentClient struct {
	config
}

// NewServerComponentClient returns a client for the ServerComponent from the given config.
func NewServerComponentClient(c config) *ServerComponentClient {
	return &ServerComponentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `servercomponent.Hooks(f(g(h())))`.
func (c *ServerComponentClient) Use(hooks ...Hook) {
	c.hooks.ServerComponent = append(c.hooks.ServerComponent, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `servercomponent.Intercept(f(g(h())))`.
func (c *ServerComponentClient) Intercept(interceptors ...Interceptor) {
	c.inters.ServerComponent = append(c.inters.ServerComponent, interceptors...)
}

// Create returns a builder for creating a ServerComponent entity.
func (c *ServerComponentClient) Create() *ServerComponentCreate {
	mutation := newServerComponentMutation(c.config, OpCreate)
	return &ServerComponentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ServerComponent entities.
func (c *ServerComponentClient) CreateBulk(builders ...*ServerComponentCreate) *ServerComponentCreateBulk {
	return &ServerComponentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ServerComponent.
func (c *ServerComponentClient) Update() *ServerComponentUpdate {
	mutation := newServerComponentMutation(c.config, OpUpdate)
	return &ServerComponentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ServerComponentClient) UpdateOne(sc *ServerComponent) *ServerComponentUpdateOne {
	mutation := newServerComponentMutation(c.config, OpUpdateOne, withServerComponent(sc))
	return &ServerComponentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ServerComponentClient) UpdateOneID(id gidx.PrefixedID) *ServerComponentUpdateOne {
	mutation := newServerComponentMutation(c.config, OpUpdateOne, withServerComponentID(id))
	return &ServerComponentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ServerComponent.
func (c *ServerComponentClient) Delete() *ServerComponentDelete {
	mutation := newServerComponentMutation(c.config, OpDelete)
	return &ServerComponentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ServerComponentClient) DeleteOne(sc *ServerComponent) *ServerComponentDeleteOne {
	return c.DeleteOneID(sc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ServerComponentClient) DeleteOneID(id gidx.PrefixedID) *ServerComponentDeleteOne {
	builder := c.Delete().Where(servercomponent.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ServerComponentDeleteOne{builder}
}

// Query returns a query builder for ServerComponent.
func (c *ServerComponentClient) Query() *ServerComponentQuery {
	return &ServerComponentQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeServerComponent},
		inters: c.Interceptors(),
	}
}

// Get returns a ServerComponent entity by its id.
func (c *ServerComponentClient) Get(ctx context.Context, id gidx.PrefixedID) (*ServerComponent, error) {
	return c.Query().Where(servercomponent.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ServerComponentClient) GetX(ctx context.Context, id gidx.PrefixedID) *ServerComponent {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryComponentType queries the component_type edge of a ServerComponent.
func (c *ServerComponentClient) QueryComponentType(sc *ServerComponent) *ServerComponentTypeQuery {
	query := (&ServerComponentTypeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(servercomponent.Table, servercomponent.FieldID, id),
			sqlgraph.To(servercomponenttype.Table, servercomponenttype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, servercomponent.ComponentTypeTable, servercomponent.ComponentTypeColumn),
		)
		fromV = sqlgraph.Neighbors(sc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryServer queries the server edge of a ServerComponent.
func (c *ServerComponentClient) QueryServer(sc *ServerComponent) *ServerQuery {
	query := (&ServerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(servercomponent.Table, servercomponent.FieldID, id),
			sqlgraph.To(server.Table, server.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, servercomponent.ServerTable, servercomponent.ServerColumn),
		)
		fromV = sqlgraph.Neighbors(sc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ServerComponentClient) Hooks() []Hook {
	return c.hooks.ServerComponent
}

// Interceptors returns the client interceptors.
func (c *ServerComponentClient) Interceptors() []Interceptor {
	return c.inters.ServerComponent
}

func (c *ServerComponentClient) mutate(ctx context.Context, m *ServerComponentMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ServerComponentCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ServerComponentUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ServerComponentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ServerComponentDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown ServerComponent mutation op: %q", m.Op())
	}
}

// ServerComponentTypeClient is a client for the ServerComponentType schema.
type ServerComponentTypeClient struct {
	config
}

// NewServerComponentTypeClient returns a client for the ServerComponentType from the given config.
func NewServerComponentTypeClient(c config) *ServerComponentTypeClient {
	return &ServerComponentTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `servercomponenttype.Hooks(f(g(h())))`.
func (c *ServerComponentTypeClient) Use(hooks ...Hook) {
	c.hooks.ServerComponentType = append(c.hooks.ServerComponentType, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `servercomponenttype.Intercept(f(g(h())))`.
func (c *ServerComponentTypeClient) Intercept(interceptors ...Interceptor) {
	c.inters.ServerComponentType = append(c.inters.ServerComponentType, interceptors...)
}

// Create returns a builder for creating a ServerComponentType entity.
func (c *ServerComponentTypeClient) Create() *ServerComponentTypeCreate {
	mutation := newServerComponentTypeMutation(c.config, OpCreate)
	return &ServerComponentTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ServerComponentType entities.
func (c *ServerComponentTypeClient) CreateBulk(builders ...*ServerComponentTypeCreate) *ServerComponentTypeCreateBulk {
	return &ServerComponentTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ServerComponentType.
func (c *ServerComponentTypeClient) Update() *ServerComponentTypeUpdate {
	mutation := newServerComponentTypeMutation(c.config, OpUpdate)
	return &ServerComponentTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ServerComponentTypeClient) UpdateOne(sct *ServerComponentType) *ServerComponentTypeUpdateOne {
	mutation := newServerComponentTypeMutation(c.config, OpUpdateOne, withServerComponentType(sct))
	return &ServerComponentTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ServerComponentTypeClient) UpdateOneID(id gidx.PrefixedID) *ServerComponentTypeUpdateOne {
	mutation := newServerComponentTypeMutation(c.config, OpUpdateOne, withServerComponentTypeID(id))
	return &ServerComponentTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ServerComponentType.
func (c *ServerComponentTypeClient) Delete() *ServerComponentTypeDelete {
	mutation := newServerComponentTypeMutation(c.config, OpDelete)
	return &ServerComponentTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ServerComponentTypeClient) DeleteOne(sct *ServerComponentType) *ServerComponentTypeDeleteOne {
	return c.DeleteOneID(sct.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ServerComponentTypeClient) DeleteOneID(id gidx.PrefixedID) *ServerComponentTypeDeleteOne {
	builder := c.Delete().Where(servercomponenttype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ServerComponentTypeDeleteOne{builder}
}

// Query returns a query builder for ServerComponentType.
func (c *ServerComponentTypeClient) Query() *ServerComponentTypeQuery {
	return &ServerComponentTypeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeServerComponentType},
		inters: c.Interceptors(),
	}
}

// Get returns a ServerComponentType entity by its id.
func (c *ServerComponentTypeClient) Get(ctx context.Context, id gidx.PrefixedID) (*ServerComponentType, error) {
	return c.Query().Where(servercomponenttype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ServerComponentTypeClient) GetX(ctx context.Context, id gidx.PrefixedID) *ServerComponentType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ServerComponentTypeClient) Hooks() []Hook {
	return c.hooks.ServerComponentType
}

// Interceptors returns the client interceptors.
func (c *ServerComponentTypeClient) Interceptors() []Interceptor {
	return c.inters.ServerComponentType
}

func (c *ServerComponentTypeClient) mutate(ctx context.Context, m *ServerComponentTypeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ServerComponentTypeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ServerComponentTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ServerComponentTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ServerComponentTypeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown ServerComponentType mutation op: %q", m.Op())
	}
}

// ServerHardDriveClient is a client for the ServerHardDrive schema.
type ServerHardDriveClient struct {
	config
}

// NewServerHardDriveClient returns a client for the ServerHardDrive from the given config.
func NewServerHardDriveClient(c config) *ServerHardDriveClient {
	return &ServerHardDriveClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `serverharddrive.Hooks(f(g(h())))`.
func (c *ServerHardDriveClient) Use(hooks ...Hook) {
	c.hooks.ServerHardDrive = append(c.hooks.ServerHardDrive, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `serverharddrive.Intercept(f(g(h())))`.
func (c *ServerHardDriveClient) Intercept(interceptors ...Interceptor) {
	c.inters.ServerHardDrive = append(c.inters.ServerHardDrive, interceptors...)
}

// Create returns a builder for creating a ServerHardDrive entity.
func (c *ServerHardDriveClient) Create() *ServerHardDriveCreate {
	mutation := newServerHardDriveMutation(c.config, OpCreate)
	return &ServerHardDriveCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ServerHardDrive entities.
func (c *ServerHardDriveClient) CreateBulk(builders ...*ServerHardDriveCreate) *ServerHardDriveCreateBulk {
	return &ServerHardDriveCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ServerHardDrive.
func (c *ServerHardDriveClient) Update() *ServerHardDriveUpdate {
	mutation := newServerHardDriveMutation(c.config, OpUpdate)
	return &ServerHardDriveUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ServerHardDriveClient) UpdateOne(shd *ServerHardDrive) *ServerHardDriveUpdateOne {
	mutation := newServerHardDriveMutation(c.config, OpUpdateOne, withServerHardDrive(shd))
	return &ServerHardDriveUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ServerHardDriveClient) UpdateOneID(id gidx.PrefixedID) *ServerHardDriveUpdateOne {
	mutation := newServerHardDriveMutation(c.config, OpUpdateOne, withServerHardDriveID(id))
	return &ServerHardDriveUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ServerHardDrive.
func (c *ServerHardDriveClient) Delete() *ServerHardDriveDelete {
	mutation := newServerHardDriveMutation(c.config, OpDelete)
	return &ServerHardDriveDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ServerHardDriveClient) DeleteOne(shd *ServerHardDrive) *ServerHardDriveDeleteOne {
	return c.DeleteOneID(shd.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ServerHardDriveClient) DeleteOneID(id gidx.PrefixedID) *ServerHardDriveDeleteOne {
	builder := c.Delete().Where(serverharddrive.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ServerHardDriveDeleteOne{builder}
}

// Query returns a query builder for ServerHardDrive.
func (c *ServerHardDriveClient) Query() *ServerHardDriveQuery {
	return &ServerHardDriveQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeServerHardDrive},
		inters: c.Interceptors(),
	}
}

// Get returns a ServerHardDrive entity by its id.
func (c *ServerHardDriveClient) Get(ctx context.Context, id gidx.PrefixedID) (*ServerHardDrive, error) {
	return c.Query().Where(serverharddrive.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ServerHardDriveClient) GetX(ctx context.Context, id gidx.PrefixedID) *ServerHardDrive {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryServer queries the server edge of a ServerHardDrive.
func (c *ServerHardDriveClient) QueryServer(shd *ServerHardDrive) *ServerQuery {
	query := (&ServerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := shd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(serverharddrive.Table, serverharddrive.FieldID, id),
			sqlgraph.To(server.Table, server.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, serverharddrive.ServerTable, serverharddrive.ServerColumn),
		)
		fromV = sqlgraph.Neighbors(shd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryServerHardDriveType queries the server_hard_drive_type edge of a ServerHardDrive.
func (c *ServerHardDriveClient) QueryServerHardDriveType(shd *ServerHardDrive) *ServerHardDriveTypeQuery {
	query := (&ServerHardDriveTypeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := shd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(serverharddrive.Table, serverharddrive.FieldID, id),
			sqlgraph.To(serverharddrivetype.Table, serverharddrivetype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, serverharddrive.ServerHardDriveTypeTable, serverharddrive.ServerHardDriveTypeColumn),
		)
		fromV = sqlgraph.Neighbors(shd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ServerHardDriveClient) Hooks() []Hook {
	return c.hooks.ServerHardDrive
}

// Interceptors returns the client interceptors.
func (c *ServerHardDriveClient) Interceptors() []Interceptor {
	return c.inters.ServerHardDrive
}

func (c *ServerHardDriveClient) mutate(ctx context.Context, m *ServerHardDriveMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ServerHardDriveCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ServerHardDriveUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ServerHardDriveUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ServerHardDriveDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown ServerHardDrive mutation op: %q", m.Op())
	}
}

// ServerHardDriveTypeClient is a client for the ServerHardDriveType schema.
type ServerHardDriveTypeClient struct {
	config
}

// NewServerHardDriveTypeClient returns a client for the ServerHardDriveType from the given config.
func NewServerHardDriveTypeClient(c config) *ServerHardDriveTypeClient {
	return &ServerHardDriveTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `serverharddrivetype.Hooks(f(g(h())))`.
func (c *ServerHardDriveTypeClient) Use(hooks ...Hook) {
	c.hooks.ServerHardDriveType = append(c.hooks.ServerHardDriveType, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `serverharddrivetype.Intercept(f(g(h())))`.
func (c *ServerHardDriveTypeClient) Intercept(interceptors ...Interceptor) {
	c.inters.ServerHardDriveType = append(c.inters.ServerHardDriveType, interceptors...)
}

// Create returns a builder for creating a ServerHardDriveType entity.
func (c *ServerHardDriveTypeClient) Create() *ServerHardDriveTypeCreate {
	mutation := newServerHardDriveTypeMutation(c.config, OpCreate)
	return &ServerHardDriveTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ServerHardDriveType entities.
func (c *ServerHardDriveTypeClient) CreateBulk(builders ...*ServerHardDriveTypeCreate) *ServerHardDriveTypeCreateBulk {
	return &ServerHardDriveTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ServerHardDriveType.
func (c *ServerHardDriveTypeClient) Update() *ServerHardDriveTypeUpdate {
	mutation := newServerHardDriveTypeMutation(c.config, OpUpdate)
	return &ServerHardDriveTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ServerHardDriveTypeClient) UpdateOne(shdt *ServerHardDriveType) *ServerHardDriveTypeUpdateOne {
	mutation := newServerHardDriveTypeMutation(c.config, OpUpdateOne, withServerHardDriveType(shdt))
	return &ServerHardDriveTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ServerHardDriveTypeClient) UpdateOneID(id gidx.PrefixedID) *ServerHardDriveTypeUpdateOne {
	mutation := newServerHardDriveTypeMutation(c.config, OpUpdateOne, withServerHardDriveTypeID(id))
	return &ServerHardDriveTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ServerHardDriveType.
func (c *ServerHardDriveTypeClient) Delete() *ServerHardDriveTypeDelete {
	mutation := newServerHardDriveTypeMutation(c.config, OpDelete)
	return &ServerHardDriveTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ServerHardDriveTypeClient) DeleteOne(shdt *ServerHardDriveType) *ServerHardDriveTypeDeleteOne {
	return c.DeleteOneID(shdt.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ServerHardDriveTypeClient) DeleteOneID(id gidx.PrefixedID) *ServerHardDriveTypeDeleteOne {
	builder := c.Delete().Where(serverharddrivetype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ServerHardDriveTypeDeleteOne{builder}
}

// Query returns a query builder for ServerHardDriveType.
func (c *ServerHardDriveTypeClient) Query() *ServerHardDriveTypeQuery {
	return &ServerHardDriveTypeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeServerHardDriveType},
		inters: c.Interceptors(),
	}
}

// Get returns a ServerHardDriveType entity by its id.
func (c *ServerHardDriveTypeClient) Get(ctx context.Context, id gidx.PrefixedID) (*ServerHardDriveType, error) {
	return c.Query().Where(serverharddrivetype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ServerHardDriveTypeClient) GetX(ctx context.Context, id gidx.PrefixedID) *ServerHardDriveType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryHardDrive queries the hard_drive edge of a ServerHardDriveType.
func (c *ServerHardDriveTypeClient) QueryHardDrive(shdt *ServerHardDriveType) *ServerHardDriveQuery {
	query := (&ServerHardDriveClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := shdt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(serverharddrivetype.Table, serverharddrivetype.FieldID, id),
			sqlgraph.To(serverharddrive.Table, serverharddrive.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, serverharddrivetype.HardDriveTable, serverharddrivetype.HardDriveColumn),
		)
		fromV = sqlgraph.Neighbors(shdt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ServerHardDriveTypeClient) Hooks() []Hook {
	return c.hooks.ServerHardDriveType
}

// Interceptors returns the client interceptors.
func (c *ServerHardDriveTypeClient) Interceptors() []Interceptor {
	return c.inters.ServerHardDriveType
}

func (c *ServerHardDriveTypeClient) mutate(ctx context.Context, m *ServerHardDriveTypeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ServerHardDriveTypeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ServerHardDriveTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ServerHardDriveTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ServerHardDriveTypeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown ServerHardDriveType mutation op: %q", m.Op())
	}
}

// ServerMemoryClient is a client for the ServerMemory schema.
type ServerMemoryClient struct {
	config
}

// NewServerMemoryClient returns a client for the ServerMemory from the given config.
func NewServerMemoryClient(c config) *ServerMemoryClient {
	return &ServerMemoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `servermemory.Hooks(f(g(h())))`.
func (c *ServerMemoryClient) Use(hooks ...Hook) {
	c.hooks.ServerMemory = append(c.hooks.ServerMemory, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `servermemory.Intercept(f(g(h())))`.
func (c *ServerMemoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.ServerMemory = append(c.inters.ServerMemory, interceptors...)
}

// Create returns a builder for creating a ServerMemory entity.
func (c *ServerMemoryClient) Create() *ServerMemoryCreate {
	mutation := newServerMemoryMutation(c.config, OpCreate)
	return &ServerMemoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ServerMemory entities.
func (c *ServerMemoryClient) CreateBulk(builders ...*ServerMemoryCreate) *ServerMemoryCreateBulk {
	return &ServerMemoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ServerMemory.
func (c *ServerMemoryClient) Update() *ServerMemoryUpdate {
	mutation := newServerMemoryMutation(c.config, OpUpdate)
	return &ServerMemoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ServerMemoryClient) UpdateOne(sm *ServerMemory) *ServerMemoryUpdateOne {
	mutation := newServerMemoryMutation(c.config, OpUpdateOne, withServerMemory(sm))
	return &ServerMemoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ServerMemoryClient) UpdateOneID(id gidx.PrefixedID) *ServerMemoryUpdateOne {
	mutation := newServerMemoryMutation(c.config, OpUpdateOne, withServerMemoryID(id))
	return &ServerMemoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ServerMemory.
func (c *ServerMemoryClient) Delete() *ServerMemoryDelete {
	mutation := newServerMemoryMutation(c.config, OpDelete)
	return &ServerMemoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ServerMemoryClient) DeleteOne(sm *ServerMemory) *ServerMemoryDeleteOne {
	return c.DeleteOneID(sm.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ServerMemoryClient) DeleteOneID(id gidx.PrefixedID) *ServerMemoryDeleteOne {
	builder := c.Delete().Where(servermemory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ServerMemoryDeleteOne{builder}
}

// Query returns a query builder for ServerMemory.
func (c *ServerMemoryClient) Query() *ServerMemoryQuery {
	return &ServerMemoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeServerMemory},
		inters: c.Interceptors(),
	}
}

// Get returns a ServerMemory entity by its id.
func (c *ServerMemoryClient) Get(ctx context.Context, id gidx.PrefixedID) (*ServerMemory, error) {
	return c.Query().Where(servermemory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ServerMemoryClient) GetX(ctx context.Context, id gidx.PrefixedID) *ServerMemory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryServer queries the server edge of a ServerMemory.
func (c *ServerMemoryClient) QueryServer(sm *ServerMemory) *ServerQuery {
	query := (&ServerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(servermemory.Table, servermemory.FieldID, id),
			sqlgraph.To(server.Table, server.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, servermemory.ServerTable, servermemory.ServerColumn),
		)
		fromV = sqlgraph.Neighbors(sm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryServerMemoryType queries the server_memory_type edge of a ServerMemory.
func (c *ServerMemoryClient) QueryServerMemoryType(sm *ServerMemory) *ServerMemoryTypeQuery {
	query := (&ServerMemoryTypeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(servermemory.Table, servermemory.FieldID, id),
			sqlgraph.To(servermemorytype.Table, servermemorytype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, servermemory.ServerMemoryTypeTable, servermemory.ServerMemoryTypeColumn),
		)
		fromV = sqlgraph.Neighbors(sm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ServerMemoryClient) Hooks() []Hook {
	return c.hooks.ServerMemory
}

// Interceptors returns the client interceptors.
func (c *ServerMemoryClient) Interceptors() []Interceptor {
	return c.inters.ServerMemory
}

func (c *ServerMemoryClient) mutate(ctx context.Context, m *ServerMemoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ServerMemoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ServerMemoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ServerMemoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ServerMemoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown ServerMemory mutation op: %q", m.Op())
	}
}

// ServerMemoryTypeClient is a client for the ServerMemoryType schema.
type ServerMemoryTypeClient struct {
	config
}

// NewServerMemoryTypeClient returns a client for the ServerMemoryType from the given config.
func NewServerMemoryTypeClient(c config) *ServerMemoryTypeClient {
	return &ServerMemoryTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `servermemorytype.Hooks(f(g(h())))`.
func (c *ServerMemoryTypeClient) Use(hooks ...Hook) {
	c.hooks.ServerMemoryType = append(c.hooks.ServerMemoryType, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `servermemorytype.Intercept(f(g(h())))`.
func (c *ServerMemoryTypeClient) Intercept(interceptors ...Interceptor) {
	c.inters.ServerMemoryType = append(c.inters.ServerMemoryType, interceptors...)
}

// Create returns a builder for creating a ServerMemoryType entity.
func (c *ServerMemoryTypeClient) Create() *ServerMemoryTypeCreate {
	mutation := newServerMemoryTypeMutation(c.config, OpCreate)
	return &ServerMemoryTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ServerMemoryType entities.
func (c *ServerMemoryTypeClient) CreateBulk(builders ...*ServerMemoryTypeCreate) *ServerMemoryTypeCreateBulk {
	return &ServerMemoryTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ServerMemoryType.
func (c *ServerMemoryTypeClient) Update() *ServerMemoryTypeUpdate {
	mutation := newServerMemoryTypeMutation(c.config, OpUpdate)
	return &ServerMemoryTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ServerMemoryTypeClient) UpdateOne(smt *ServerMemoryType) *ServerMemoryTypeUpdateOne {
	mutation := newServerMemoryTypeMutation(c.config, OpUpdateOne, withServerMemoryType(smt))
	return &ServerMemoryTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ServerMemoryTypeClient) UpdateOneID(id gidx.PrefixedID) *ServerMemoryTypeUpdateOne {
	mutation := newServerMemoryTypeMutation(c.config, OpUpdateOne, withServerMemoryTypeID(id))
	return &ServerMemoryTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ServerMemoryType.
func (c *ServerMemoryTypeClient) Delete() *ServerMemoryTypeDelete {
	mutation := newServerMemoryTypeMutation(c.config, OpDelete)
	return &ServerMemoryTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ServerMemoryTypeClient) DeleteOne(smt *ServerMemoryType) *ServerMemoryTypeDeleteOne {
	return c.DeleteOneID(smt.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ServerMemoryTypeClient) DeleteOneID(id gidx.PrefixedID) *ServerMemoryTypeDeleteOne {
	builder := c.Delete().Where(servermemorytype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ServerMemoryTypeDeleteOne{builder}
}

// Query returns a query builder for ServerMemoryType.
func (c *ServerMemoryTypeClient) Query() *ServerMemoryTypeQuery {
	return &ServerMemoryTypeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeServerMemoryType},
		inters: c.Interceptors(),
	}
}

// Get returns a ServerMemoryType entity by its id.
func (c *ServerMemoryTypeClient) Get(ctx context.Context, id gidx.PrefixedID) (*ServerMemoryType, error) {
	return c.Query().Where(servermemorytype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ServerMemoryTypeClient) GetX(ctx context.Context, id gidx.PrefixedID) *ServerMemoryType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMemory queries the memory edge of a ServerMemoryType.
func (c *ServerMemoryTypeClient) QueryMemory(smt *ServerMemoryType) *ServerMemoryQuery {
	query := (&ServerMemoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := smt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(servermemorytype.Table, servermemorytype.FieldID, id),
			sqlgraph.To(servermemory.Table, servermemory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, servermemorytype.MemoryTable, servermemorytype.MemoryColumn),
		)
		fromV = sqlgraph.Neighbors(smt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ServerMemoryTypeClient) Hooks() []Hook {
	return c.hooks.ServerMemoryType
}

// Interceptors returns the client interceptors.
func (c *ServerMemoryTypeClient) Interceptors() []Interceptor {
	return c.inters.ServerMemoryType
}

func (c *ServerMemoryTypeClient) mutate(ctx context.Context, m *ServerMemoryTypeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ServerMemoryTypeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ServerMemoryTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ServerMemoryTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ServerMemoryTypeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown ServerMemoryType mutation op: %q", m.Op())
	}
}

// ServerMotherboardClient is a client for the ServerMotherboard schema.
type ServerMotherboardClient struct {
	config
}

// NewServerMotherboardClient returns a client for the ServerMotherboard from the given config.
func NewServerMotherboardClient(c config) *ServerMotherboardClient {
	return &ServerMotherboardClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `servermotherboard.Hooks(f(g(h())))`.
func (c *ServerMotherboardClient) Use(hooks ...Hook) {
	c.hooks.ServerMotherboard = append(c.hooks.ServerMotherboard, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `servermotherboard.Intercept(f(g(h())))`.
func (c *ServerMotherboardClient) Intercept(interceptors ...Interceptor) {
	c.inters.ServerMotherboard = append(c.inters.ServerMotherboard, interceptors...)
}

// Create returns a builder for creating a ServerMotherboard entity.
func (c *ServerMotherboardClient) Create() *ServerMotherboardCreate {
	mutation := newServerMotherboardMutation(c.config, OpCreate)
	return &ServerMotherboardCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ServerMotherboard entities.
func (c *ServerMotherboardClient) CreateBulk(builders ...*ServerMotherboardCreate) *ServerMotherboardCreateBulk {
	return &ServerMotherboardCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ServerMotherboard.
func (c *ServerMotherboardClient) Update() *ServerMotherboardUpdate {
	mutation := newServerMotherboardMutation(c.config, OpUpdate)
	return &ServerMotherboardUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ServerMotherboardClient) UpdateOne(sm *ServerMotherboard) *ServerMotherboardUpdateOne {
	mutation := newServerMotherboardMutation(c.config, OpUpdateOne, withServerMotherboard(sm))
	return &ServerMotherboardUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ServerMotherboardClient) UpdateOneID(id gidx.PrefixedID) *ServerMotherboardUpdateOne {
	mutation := newServerMotherboardMutation(c.config, OpUpdateOne, withServerMotherboardID(id))
	return &ServerMotherboardUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ServerMotherboard.
func (c *ServerMotherboardClient) Delete() *ServerMotherboardDelete {
	mutation := newServerMotherboardMutation(c.config, OpDelete)
	return &ServerMotherboardDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ServerMotherboardClient) DeleteOne(sm *ServerMotherboard) *ServerMotherboardDeleteOne {
	return c.DeleteOneID(sm.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ServerMotherboardClient) DeleteOneID(id gidx.PrefixedID) *ServerMotherboardDeleteOne {
	builder := c.Delete().Where(servermotherboard.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ServerMotherboardDeleteOne{builder}
}

// Query returns a query builder for ServerMotherboard.
func (c *ServerMotherboardClient) Query() *ServerMotherboardQuery {
	return &ServerMotherboardQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeServerMotherboard},
		inters: c.Interceptors(),
	}
}

// Get returns a ServerMotherboard entity by its id.
func (c *ServerMotherboardClient) Get(ctx context.Context, id gidx.PrefixedID) (*ServerMotherboard, error) {
	return c.Query().Where(servermotherboard.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ServerMotherboardClient) GetX(ctx context.Context, id gidx.PrefixedID) *ServerMotherboard {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryServer queries the server edge of a ServerMotherboard.
func (c *ServerMotherboardClient) QueryServer(sm *ServerMotherboard) *ServerQuery {
	query := (&ServerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(servermotherboard.Table, servermotherboard.FieldID, id),
			sqlgraph.To(server.Table, server.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, servermotherboard.ServerTable, servermotherboard.ServerColumn),
		)
		fromV = sqlgraph.Neighbors(sm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryServerMotherboardType queries the server_motherboard_type edge of a ServerMotherboard.
func (c *ServerMotherboardClient) QueryServerMotherboardType(sm *ServerMotherboard) *ServerMotherboardTypeQuery {
	query := (&ServerMotherboardTypeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(servermotherboard.Table, servermotherboard.FieldID, id),
			sqlgraph.To(servermotherboardtype.Table, servermotherboardtype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, servermotherboard.ServerMotherboardTypeTable, servermotherboard.ServerMotherboardTypeColumn),
		)
		fromV = sqlgraph.Neighbors(sm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ServerMotherboardClient) Hooks() []Hook {
	return c.hooks.ServerMotherboard
}

// Interceptors returns the client interceptors.
func (c *ServerMotherboardClient) Interceptors() []Interceptor {
	return c.inters.ServerMotherboard
}

func (c *ServerMotherboardClient) mutate(ctx context.Context, m *ServerMotherboardMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ServerMotherboardCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ServerMotherboardUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ServerMotherboardUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ServerMotherboardDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown ServerMotherboard mutation op: %q", m.Op())
	}
}

// ServerMotherboardTypeClient is a client for the ServerMotherboardType schema.
type ServerMotherboardTypeClient struct {
	config
}

// NewServerMotherboardTypeClient returns a client for the ServerMotherboardType from the given config.
func NewServerMotherboardTypeClient(c config) *ServerMotherboardTypeClient {
	return &ServerMotherboardTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `servermotherboardtype.Hooks(f(g(h())))`.
func (c *ServerMotherboardTypeClient) Use(hooks ...Hook) {
	c.hooks.ServerMotherboardType = append(c.hooks.ServerMotherboardType, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `servermotherboardtype.Intercept(f(g(h())))`.
func (c *ServerMotherboardTypeClient) Intercept(interceptors ...Interceptor) {
	c.inters.ServerMotherboardType = append(c.inters.ServerMotherboardType, interceptors...)
}

// Create returns a builder for creating a ServerMotherboardType entity.
func (c *ServerMotherboardTypeClient) Create() *ServerMotherboardTypeCreate {
	mutation := newServerMotherboardTypeMutation(c.config, OpCreate)
	return &ServerMotherboardTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ServerMotherboardType entities.
func (c *ServerMotherboardTypeClient) CreateBulk(builders ...*ServerMotherboardTypeCreate) *ServerMotherboardTypeCreateBulk {
	return &ServerMotherboardTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ServerMotherboardType.
func (c *ServerMotherboardTypeClient) Update() *ServerMotherboardTypeUpdate {
	mutation := newServerMotherboardTypeMutation(c.config, OpUpdate)
	return &ServerMotherboardTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ServerMotherboardTypeClient) UpdateOne(smt *ServerMotherboardType) *ServerMotherboardTypeUpdateOne {
	mutation := newServerMotherboardTypeMutation(c.config, OpUpdateOne, withServerMotherboardType(smt))
	return &ServerMotherboardTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ServerMotherboardTypeClient) UpdateOneID(id gidx.PrefixedID) *ServerMotherboardTypeUpdateOne {
	mutation := newServerMotherboardTypeMutation(c.config, OpUpdateOne, withServerMotherboardTypeID(id))
	return &ServerMotherboardTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ServerMotherboardType.
func (c *ServerMotherboardTypeClient) Delete() *ServerMotherboardTypeDelete {
	mutation := newServerMotherboardTypeMutation(c.config, OpDelete)
	return &ServerMotherboardTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ServerMotherboardTypeClient) DeleteOne(smt *ServerMotherboardType) *ServerMotherboardTypeDeleteOne {
	return c.DeleteOneID(smt.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ServerMotherboardTypeClient) DeleteOneID(id gidx.PrefixedID) *ServerMotherboardTypeDeleteOne {
	builder := c.Delete().Where(servermotherboardtype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ServerMotherboardTypeDeleteOne{builder}
}

// Query returns a query builder for ServerMotherboardType.
func (c *ServerMotherboardTypeClient) Query() *ServerMotherboardTypeQuery {
	return &ServerMotherboardTypeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeServerMotherboardType},
		inters: c.Interceptors(),
	}
}

// Get returns a ServerMotherboardType entity by its id.
func (c *ServerMotherboardTypeClient) Get(ctx context.Context, id gidx.PrefixedID) (*ServerMotherboardType, error) {
	return c.Query().Where(servermotherboardtype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ServerMotherboardTypeClient) GetX(ctx context.Context, id gidx.PrefixedID) *ServerMotherboardType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMotherboard queries the motherboard edge of a ServerMotherboardType.
func (c *ServerMotherboardTypeClient) QueryMotherboard(smt *ServerMotherboardType) *ServerMotherboardQuery {
	query := (&ServerMotherboardClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := smt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(servermotherboardtype.Table, servermotherboardtype.FieldID, id),
			sqlgraph.To(servermotherboard.Table, servermotherboard.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, servermotherboardtype.MotherboardTable, servermotherboardtype.MotherboardColumn),
		)
		fromV = sqlgraph.Neighbors(smt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ServerMotherboardTypeClient) Hooks() []Hook {
	return c.hooks.ServerMotherboardType
}

// Interceptors returns the client interceptors.
func (c *ServerMotherboardTypeClient) Interceptors() []Interceptor {
	return c.inters.ServerMotherboardType
}

func (c *ServerMotherboardTypeClient) mutate(ctx context.Context, m *ServerMotherboardTypeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ServerMotherboardTypeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ServerMotherboardTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ServerMotherboardTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ServerMotherboardTypeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown ServerMotherboardType mutation op: %q", m.Op())
	}
}

// ServerNetworkCardClient is a client for the ServerNetworkCard schema.
type ServerNetworkCardClient struct {
	config
}

// NewServerNetworkCardClient returns a client for the ServerNetworkCard from the given config.
func NewServerNetworkCardClient(c config) *ServerNetworkCardClient {
	return &ServerNetworkCardClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `servernetworkcard.Hooks(f(g(h())))`.
func (c *ServerNetworkCardClient) Use(hooks ...Hook) {
	c.hooks.ServerNetworkCard = append(c.hooks.ServerNetworkCard, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `servernetworkcard.Intercept(f(g(h())))`.
func (c *ServerNetworkCardClient) Intercept(interceptors ...Interceptor) {
	c.inters.ServerNetworkCard = append(c.inters.ServerNetworkCard, interceptors...)
}

// Create returns a builder for creating a ServerNetworkCard entity.
func (c *ServerNetworkCardClient) Create() *ServerNetworkCardCreate {
	mutation := newServerNetworkCardMutation(c.config, OpCreate)
	return &ServerNetworkCardCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ServerNetworkCard entities.
func (c *ServerNetworkCardClient) CreateBulk(builders ...*ServerNetworkCardCreate) *ServerNetworkCardCreateBulk {
	return &ServerNetworkCardCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ServerNetworkCard.
func (c *ServerNetworkCardClient) Update() *ServerNetworkCardUpdate {
	mutation := newServerNetworkCardMutation(c.config, OpUpdate)
	return &ServerNetworkCardUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ServerNetworkCardClient) UpdateOne(snc *ServerNetworkCard) *ServerNetworkCardUpdateOne {
	mutation := newServerNetworkCardMutation(c.config, OpUpdateOne, withServerNetworkCard(snc))
	return &ServerNetworkCardUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ServerNetworkCardClient) UpdateOneID(id gidx.PrefixedID) *ServerNetworkCardUpdateOne {
	mutation := newServerNetworkCardMutation(c.config, OpUpdateOne, withServerNetworkCardID(id))
	return &ServerNetworkCardUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ServerNetworkCard.
func (c *ServerNetworkCardClient) Delete() *ServerNetworkCardDelete {
	mutation := newServerNetworkCardMutation(c.config, OpDelete)
	return &ServerNetworkCardDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ServerNetworkCardClient) DeleteOne(snc *ServerNetworkCard) *ServerNetworkCardDeleteOne {
	return c.DeleteOneID(snc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ServerNetworkCardClient) DeleteOneID(id gidx.PrefixedID) *ServerNetworkCardDeleteOne {
	builder := c.Delete().Where(servernetworkcard.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ServerNetworkCardDeleteOne{builder}
}

// Query returns a query builder for ServerNetworkCard.
func (c *ServerNetworkCardClient) Query() *ServerNetworkCardQuery {
	return &ServerNetworkCardQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeServerNetworkCard},
		inters: c.Interceptors(),
	}
}

// Get returns a ServerNetworkCard entity by its id.
func (c *ServerNetworkCardClient) Get(ctx context.Context, id gidx.PrefixedID) (*ServerNetworkCard, error) {
	return c.Query().Where(servernetworkcard.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ServerNetworkCardClient) GetX(ctx context.Context, id gidx.PrefixedID) *ServerNetworkCard {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryNetworkCardType queries the network_card_type edge of a ServerNetworkCard.
func (c *ServerNetworkCardClient) QueryNetworkCardType(snc *ServerNetworkCard) *ServerNetworkCardTypeQuery {
	query := (&ServerNetworkCardTypeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := snc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(servernetworkcard.Table, servernetworkcard.FieldID, id),
			sqlgraph.To(servernetworkcardtype.Table, servernetworkcardtype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, servernetworkcard.NetworkCardTypeTable, servernetworkcard.NetworkCardTypeColumn),
		)
		fromV = sqlgraph.Neighbors(snc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryServer queries the server edge of a ServerNetworkCard.
func (c *ServerNetworkCardClient) QueryServer(snc *ServerNetworkCard) *ServerQuery {
	query := (&ServerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := snc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(servernetworkcard.Table, servernetworkcard.FieldID, id),
			sqlgraph.To(server.Table, server.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, servernetworkcard.ServerTable, servernetworkcard.ServerColumn),
		)
		fromV = sqlgraph.Neighbors(snc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNetworkPort queries the network_port edge of a ServerNetworkCard.
func (c *ServerNetworkCardClient) QueryNetworkPort(snc *ServerNetworkCard) *ServerNetworkPortQuery {
	query := (&ServerNetworkPortClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := snc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(servernetworkcard.Table, servernetworkcard.FieldID, id),
			sqlgraph.To(servernetworkport.Table, servernetworkport.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, servernetworkcard.NetworkPortTable, servernetworkcard.NetworkPortColumn),
		)
		fromV = sqlgraph.Neighbors(snc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ServerNetworkCardClient) Hooks() []Hook {
	return c.hooks.ServerNetworkCard
}

// Interceptors returns the client interceptors.
func (c *ServerNetworkCardClient) Interceptors() []Interceptor {
	return c.inters.ServerNetworkCard
}

func (c *ServerNetworkCardClient) mutate(ctx context.Context, m *ServerNetworkCardMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ServerNetworkCardCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ServerNetworkCardUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ServerNetworkCardUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ServerNetworkCardDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown ServerNetworkCard mutation op: %q", m.Op())
	}
}

// ServerNetworkCardTypeClient is a client for the ServerNetworkCardType schema.
type ServerNetworkCardTypeClient struct {
	config
}

// NewServerNetworkCardTypeClient returns a client for the ServerNetworkCardType from the given config.
func NewServerNetworkCardTypeClient(c config) *ServerNetworkCardTypeClient {
	return &ServerNetworkCardTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `servernetworkcardtype.Hooks(f(g(h())))`.
func (c *ServerNetworkCardTypeClient) Use(hooks ...Hook) {
	c.hooks.ServerNetworkCardType = append(c.hooks.ServerNetworkCardType, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `servernetworkcardtype.Intercept(f(g(h())))`.
func (c *ServerNetworkCardTypeClient) Intercept(interceptors ...Interceptor) {
	c.inters.ServerNetworkCardType = append(c.inters.ServerNetworkCardType, interceptors...)
}

// Create returns a builder for creating a ServerNetworkCardType entity.
func (c *ServerNetworkCardTypeClient) Create() *ServerNetworkCardTypeCreate {
	mutation := newServerNetworkCardTypeMutation(c.config, OpCreate)
	return &ServerNetworkCardTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ServerNetworkCardType entities.
func (c *ServerNetworkCardTypeClient) CreateBulk(builders ...*ServerNetworkCardTypeCreate) *ServerNetworkCardTypeCreateBulk {
	return &ServerNetworkCardTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ServerNetworkCardType.
func (c *ServerNetworkCardTypeClient) Update() *ServerNetworkCardTypeUpdate {
	mutation := newServerNetworkCardTypeMutation(c.config, OpUpdate)
	return &ServerNetworkCardTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ServerNetworkCardTypeClient) UpdateOne(snct *ServerNetworkCardType) *ServerNetworkCardTypeUpdateOne {
	mutation := newServerNetworkCardTypeMutation(c.config, OpUpdateOne, withServerNetworkCardType(snct))
	return &ServerNetworkCardTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ServerNetworkCardTypeClient) UpdateOneID(id gidx.PrefixedID) *ServerNetworkCardTypeUpdateOne {
	mutation := newServerNetworkCardTypeMutation(c.config, OpUpdateOne, withServerNetworkCardTypeID(id))
	return &ServerNetworkCardTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ServerNetworkCardType.
func (c *ServerNetworkCardTypeClient) Delete() *ServerNetworkCardTypeDelete {
	mutation := newServerNetworkCardTypeMutation(c.config, OpDelete)
	return &ServerNetworkCardTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ServerNetworkCardTypeClient) DeleteOne(snct *ServerNetworkCardType) *ServerNetworkCardTypeDeleteOne {
	return c.DeleteOneID(snct.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ServerNetworkCardTypeClient) DeleteOneID(id gidx.PrefixedID) *ServerNetworkCardTypeDeleteOne {
	builder := c.Delete().Where(servernetworkcardtype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ServerNetworkCardTypeDeleteOne{builder}
}

// Query returns a query builder for ServerNetworkCardType.
func (c *ServerNetworkCardTypeClient) Query() *ServerNetworkCardTypeQuery {
	return &ServerNetworkCardTypeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeServerNetworkCardType},
		inters: c.Interceptors(),
	}
}

// Get returns a ServerNetworkCardType entity by its id.
func (c *ServerNetworkCardTypeClient) Get(ctx context.Context, id gidx.PrefixedID) (*ServerNetworkCardType, error) {
	return c.Query().Where(servernetworkcardtype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ServerNetworkCardTypeClient) GetX(ctx context.Context, id gidx.PrefixedID) *ServerNetworkCardType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryNetworkCard queries the network_card edge of a ServerNetworkCardType.
func (c *ServerNetworkCardTypeClient) QueryNetworkCard(snct *ServerNetworkCardType) *ServerNetworkCardQuery {
	query := (&ServerNetworkCardClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := snct.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(servernetworkcardtype.Table, servernetworkcardtype.FieldID, id),
			sqlgraph.To(servernetworkcard.Table, servernetworkcard.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, servernetworkcardtype.NetworkCardTable, servernetworkcardtype.NetworkCardColumn),
		)
		fromV = sqlgraph.Neighbors(snct.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ServerNetworkCardTypeClient) Hooks() []Hook {
	return c.hooks.ServerNetworkCardType
}

// Interceptors returns the client interceptors.
func (c *ServerNetworkCardTypeClient) Interceptors() []Interceptor {
	return c.inters.ServerNetworkCardType
}

func (c *ServerNetworkCardTypeClient) mutate(ctx context.Context, m *ServerNetworkCardTypeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ServerNetworkCardTypeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ServerNetworkCardTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ServerNetworkCardTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ServerNetworkCardTypeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown ServerNetworkCardType mutation op: %q", m.Op())
	}
}

// ServerNetworkPortClient is a client for the ServerNetworkPort schema.
type ServerNetworkPortClient struct {
	config
}

// NewServerNetworkPortClient returns a client for the ServerNetworkPort from the given config.
func NewServerNetworkPortClient(c config) *ServerNetworkPortClient {
	return &ServerNetworkPortClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `servernetworkport.Hooks(f(g(h())))`.
func (c *ServerNetworkPortClient) Use(hooks ...Hook) {
	c.hooks.ServerNetworkPort = append(c.hooks.ServerNetworkPort, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `servernetworkport.Intercept(f(g(h())))`.
func (c *ServerNetworkPortClient) Intercept(interceptors ...Interceptor) {
	c.inters.ServerNetworkPort = append(c.inters.ServerNetworkPort, interceptors...)
}

// Create returns a builder for creating a ServerNetworkPort entity.
func (c *ServerNetworkPortClient) Create() *ServerNetworkPortCreate {
	mutation := newServerNetworkPortMutation(c.config, OpCreate)
	return &ServerNetworkPortCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ServerNetworkPort entities.
func (c *ServerNetworkPortClient) CreateBulk(builders ...*ServerNetworkPortCreate) *ServerNetworkPortCreateBulk {
	return &ServerNetworkPortCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ServerNetworkPort.
func (c *ServerNetworkPortClient) Update() *ServerNetworkPortUpdate {
	mutation := newServerNetworkPortMutation(c.config, OpUpdate)
	return &ServerNetworkPortUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ServerNetworkPortClient) UpdateOne(snp *ServerNetworkPort) *ServerNetworkPortUpdateOne {
	mutation := newServerNetworkPortMutation(c.config, OpUpdateOne, withServerNetworkPort(snp))
	return &ServerNetworkPortUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ServerNetworkPortClient) UpdateOneID(id gidx.PrefixedID) *ServerNetworkPortUpdateOne {
	mutation := newServerNetworkPortMutation(c.config, OpUpdateOne, withServerNetworkPortID(id))
	return &ServerNetworkPortUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ServerNetworkPort.
func (c *ServerNetworkPortClient) Delete() *ServerNetworkPortDelete {
	mutation := newServerNetworkPortMutation(c.config, OpDelete)
	return &ServerNetworkPortDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ServerNetworkPortClient) DeleteOne(snp *ServerNetworkPort) *ServerNetworkPortDeleteOne {
	return c.DeleteOneID(snp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ServerNetworkPortClient) DeleteOneID(id gidx.PrefixedID) *ServerNetworkPortDeleteOne {
	builder := c.Delete().Where(servernetworkport.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ServerNetworkPortDeleteOne{builder}
}

// Query returns a query builder for ServerNetworkPort.
func (c *ServerNetworkPortClient) Query() *ServerNetworkPortQuery {
	return &ServerNetworkPortQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeServerNetworkPort},
		inters: c.Interceptors(),
	}
}

// Get returns a ServerNetworkPort entity by its id.
func (c *ServerNetworkPortClient) Get(ctx context.Context, id gidx.PrefixedID) (*ServerNetworkPort, error) {
	return c.Query().Where(servernetworkport.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ServerNetworkPortClient) GetX(ctx context.Context, id gidx.PrefixedID) *ServerNetworkPort {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryNetworkCard queries the network_card edge of a ServerNetworkPort.
func (c *ServerNetworkPortClient) QueryNetworkCard(snp *ServerNetworkPort) *ServerNetworkCardQuery {
	query := (&ServerNetworkCardClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := snp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(servernetworkport.Table, servernetworkport.FieldID, id),
			sqlgraph.To(servernetworkcard.Table, servernetworkcard.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, servernetworkport.NetworkCardTable, servernetworkport.NetworkCardColumn),
		)
		fromV = sqlgraph.Neighbors(snp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ServerNetworkPortClient) Hooks() []Hook {
	return c.hooks.ServerNetworkPort
}

// Interceptors returns the client interceptors.
func (c *ServerNetworkPortClient) Interceptors() []Interceptor {
	return c.inters.ServerNetworkPort
}

func (c *ServerNetworkPortClient) mutate(ctx context.Context, m *ServerNetworkPortMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ServerNetworkPortCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ServerNetworkPortUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ServerNetworkPortUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ServerNetworkPortDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown ServerNetworkPort mutation op: %q", m.Op())
	}
}

// ServerPowerSupplyClient is a client for the ServerPowerSupply schema.
type ServerPowerSupplyClient struct {
	config
}

// NewServerPowerSupplyClient returns a client for the ServerPowerSupply from the given config.
func NewServerPowerSupplyClient(c config) *ServerPowerSupplyClient {
	return &ServerPowerSupplyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `serverpowersupply.Hooks(f(g(h())))`.
func (c *ServerPowerSupplyClient) Use(hooks ...Hook) {
	c.hooks.ServerPowerSupply = append(c.hooks.ServerPowerSupply, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `serverpowersupply.Intercept(f(g(h())))`.
func (c *ServerPowerSupplyClient) Intercept(interceptors ...Interceptor) {
	c.inters.ServerPowerSupply = append(c.inters.ServerPowerSupply, interceptors...)
}

// Create returns a builder for creating a ServerPowerSupply entity.
func (c *ServerPowerSupplyClient) Create() *ServerPowerSupplyCreate {
	mutation := newServerPowerSupplyMutation(c.config, OpCreate)
	return &ServerPowerSupplyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ServerPowerSupply entities.
func (c *ServerPowerSupplyClient) CreateBulk(builders ...*ServerPowerSupplyCreate) *ServerPowerSupplyCreateBulk {
	return &ServerPowerSupplyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ServerPowerSupply.
func (c *ServerPowerSupplyClient) Update() *ServerPowerSupplyUpdate {
	mutation := newServerPowerSupplyMutation(c.config, OpUpdate)
	return &ServerPowerSupplyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ServerPowerSupplyClient) UpdateOne(sps *ServerPowerSupply) *ServerPowerSupplyUpdateOne {
	mutation := newServerPowerSupplyMutation(c.config, OpUpdateOne, withServerPowerSupply(sps))
	return &ServerPowerSupplyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ServerPowerSupplyClient) UpdateOneID(id gidx.PrefixedID) *ServerPowerSupplyUpdateOne {
	mutation := newServerPowerSupplyMutation(c.config, OpUpdateOne, withServerPowerSupplyID(id))
	return &ServerPowerSupplyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ServerPowerSupply.
func (c *ServerPowerSupplyClient) Delete() *ServerPowerSupplyDelete {
	mutation := newServerPowerSupplyMutation(c.config, OpDelete)
	return &ServerPowerSupplyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ServerPowerSupplyClient) DeleteOne(sps *ServerPowerSupply) *ServerPowerSupplyDeleteOne {
	return c.DeleteOneID(sps.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ServerPowerSupplyClient) DeleteOneID(id gidx.PrefixedID) *ServerPowerSupplyDeleteOne {
	builder := c.Delete().Where(serverpowersupply.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ServerPowerSupplyDeleteOne{builder}
}

// Query returns a query builder for ServerPowerSupply.
func (c *ServerPowerSupplyClient) Query() *ServerPowerSupplyQuery {
	return &ServerPowerSupplyQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeServerPowerSupply},
		inters: c.Interceptors(),
	}
}

// Get returns a ServerPowerSupply entity by its id.
func (c *ServerPowerSupplyClient) Get(ctx context.Context, id gidx.PrefixedID) (*ServerPowerSupply, error) {
	return c.Query().Where(serverpowersupply.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ServerPowerSupplyClient) GetX(ctx context.Context, id gidx.PrefixedID) *ServerPowerSupply {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryServer queries the server edge of a ServerPowerSupply.
func (c *ServerPowerSupplyClient) QueryServer(sps *ServerPowerSupply) *ServerQuery {
	query := (&ServerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sps.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(serverpowersupply.Table, serverpowersupply.FieldID, id),
			sqlgraph.To(server.Table, server.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, serverpowersupply.ServerTable, serverpowersupply.ServerColumn),
		)
		fromV = sqlgraph.Neighbors(sps.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryServerPowerSupplyType queries the server_power_supply_type edge of a ServerPowerSupply.
func (c *ServerPowerSupplyClient) QueryServerPowerSupplyType(sps *ServerPowerSupply) *ServerPowerSupplyTypeQuery {
	query := (&ServerPowerSupplyTypeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sps.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(serverpowersupply.Table, serverpowersupply.FieldID, id),
			sqlgraph.To(serverpowersupplytype.Table, serverpowersupplytype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, serverpowersupply.ServerPowerSupplyTypeTable, serverpowersupply.ServerPowerSupplyTypeColumn),
		)
		fromV = sqlgraph.Neighbors(sps.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ServerPowerSupplyClient) Hooks() []Hook {
	return c.hooks.ServerPowerSupply
}

// Interceptors returns the client interceptors.
func (c *ServerPowerSupplyClient) Interceptors() []Interceptor {
	return c.inters.ServerPowerSupply
}

func (c *ServerPowerSupplyClient) mutate(ctx context.Context, m *ServerPowerSupplyMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ServerPowerSupplyCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ServerPowerSupplyUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ServerPowerSupplyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ServerPowerSupplyDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown ServerPowerSupply mutation op: %q", m.Op())
	}
}

// ServerPowerSupplyTypeClient is a client for the ServerPowerSupplyType schema.
type ServerPowerSupplyTypeClient struct {
	config
}

// NewServerPowerSupplyTypeClient returns a client for the ServerPowerSupplyType from the given config.
func NewServerPowerSupplyTypeClient(c config) *ServerPowerSupplyTypeClient {
	return &ServerPowerSupplyTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `serverpowersupplytype.Hooks(f(g(h())))`.
func (c *ServerPowerSupplyTypeClient) Use(hooks ...Hook) {
	c.hooks.ServerPowerSupplyType = append(c.hooks.ServerPowerSupplyType, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `serverpowersupplytype.Intercept(f(g(h())))`.
func (c *ServerPowerSupplyTypeClient) Intercept(interceptors ...Interceptor) {
	c.inters.ServerPowerSupplyType = append(c.inters.ServerPowerSupplyType, interceptors...)
}

// Create returns a builder for creating a ServerPowerSupplyType entity.
func (c *ServerPowerSupplyTypeClient) Create() *ServerPowerSupplyTypeCreate {
	mutation := newServerPowerSupplyTypeMutation(c.config, OpCreate)
	return &ServerPowerSupplyTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ServerPowerSupplyType entities.
func (c *ServerPowerSupplyTypeClient) CreateBulk(builders ...*ServerPowerSupplyTypeCreate) *ServerPowerSupplyTypeCreateBulk {
	return &ServerPowerSupplyTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ServerPowerSupplyType.
func (c *ServerPowerSupplyTypeClient) Update() *ServerPowerSupplyTypeUpdate {
	mutation := newServerPowerSupplyTypeMutation(c.config, OpUpdate)
	return &ServerPowerSupplyTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ServerPowerSupplyTypeClient) UpdateOne(spst *ServerPowerSupplyType) *ServerPowerSupplyTypeUpdateOne {
	mutation := newServerPowerSupplyTypeMutation(c.config, OpUpdateOne, withServerPowerSupplyType(spst))
	return &ServerPowerSupplyTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ServerPowerSupplyTypeClient) UpdateOneID(id gidx.PrefixedID) *ServerPowerSupplyTypeUpdateOne {
	mutation := newServerPowerSupplyTypeMutation(c.config, OpUpdateOne, withServerPowerSupplyTypeID(id))
	return &ServerPowerSupplyTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ServerPowerSupplyType.
func (c *ServerPowerSupplyTypeClient) Delete() *ServerPowerSupplyTypeDelete {
	mutation := newServerPowerSupplyTypeMutation(c.config, OpDelete)
	return &ServerPowerSupplyTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ServerPowerSupplyTypeClient) DeleteOne(spst *ServerPowerSupplyType) *ServerPowerSupplyTypeDeleteOne {
	return c.DeleteOneID(spst.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ServerPowerSupplyTypeClient) DeleteOneID(id gidx.PrefixedID) *ServerPowerSupplyTypeDeleteOne {
	builder := c.Delete().Where(serverpowersupplytype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ServerPowerSupplyTypeDeleteOne{builder}
}

// Query returns a query builder for ServerPowerSupplyType.
func (c *ServerPowerSupplyTypeClient) Query() *ServerPowerSupplyTypeQuery {
	return &ServerPowerSupplyTypeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeServerPowerSupplyType},
		inters: c.Interceptors(),
	}
}

// Get returns a ServerPowerSupplyType entity by its id.
func (c *ServerPowerSupplyTypeClient) Get(ctx context.Context, id gidx.PrefixedID) (*ServerPowerSupplyType, error) {
	return c.Query().Where(serverpowersupplytype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ServerPowerSupplyTypeClient) GetX(ctx context.Context, id gidx.PrefixedID) *ServerPowerSupplyType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ServerPowerSupplyTypeClient) Hooks() []Hook {
	return c.hooks.ServerPowerSupplyType
}

// Interceptors returns the client interceptors.
func (c *ServerPowerSupplyTypeClient) Interceptors() []Interceptor {
	return c.inters.ServerPowerSupplyType
}

func (c *ServerPowerSupplyTypeClient) mutate(ctx context.Context, m *ServerPowerSupplyTypeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ServerPowerSupplyTypeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ServerPowerSupplyTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ServerPowerSupplyTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ServerPowerSupplyTypeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown ServerPowerSupplyType mutation op: %q", m.Op())
	}
}

// ServerTypeClient is a client for the ServerType schema.
type ServerTypeClient struct {
	config
}

// NewServerTypeClient returns a client for the ServerType from the given config.
func NewServerTypeClient(c config) *ServerTypeClient {
	return &ServerTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `servertype.Hooks(f(g(h())))`.
func (c *ServerTypeClient) Use(hooks ...Hook) {
	c.hooks.ServerType = append(c.hooks.ServerType, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `servertype.Intercept(f(g(h())))`.
func (c *ServerTypeClient) Intercept(interceptors ...Interceptor) {
	c.inters.ServerType = append(c.inters.ServerType, interceptors...)
}

// Create returns a builder for creating a ServerType entity.
func (c *ServerTypeClient) Create() *ServerTypeCreate {
	mutation := newServerTypeMutation(c.config, OpCreate)
	return &ServerTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ServerType entities.
func (c *ServerTypeClient) CreateBulk(builders ...*ServerTypeCreate) *ServerTypeCreateBulk {
	return &ServerTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ServerType.
func (c *ServerTypeClient) Update() *ServerTypeUpdate {
	mutation := newServerTypeMutation(c.config, OpUpdate)
	return &ServerTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ServerTypeClient) UpdateOne(st *ServerType) *ServerTypeUpdateOne {
	mutation := newServerTypeMutation(c.config, OpUpdateOne, withServerType(st))
	return &ServerTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ServerTypeClient) UpdateOneID(id gidx.PrefixedID) *ServerTypeUpdateOne {
	mutation := newServerTypeMutation(c.config, OpUpdateOne, withServerTypeID(id))
	return &ServerTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ServerType.
func (c *ServerTypeClient) Delete() *ServerTypeDelete {
	mutation := newServerTypeMutation(c.config, OpDelete)
	return &ServerTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ServerTypeClient) DeleteOne(st *ServerType) *ServerTypeDeleteOne {
	return c.DeleteOneID(st.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ServerTypeClient) DeleteOneID(id gidx.PrefixedID) *ServerTypeDeleteOne {
	builder := c.Delete().Where(servertype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ServerTypeDeleteOne{builder}
}

// Query returns a query builder for ServerType.
func (c *ServerTypeClient) Query() *ServerTypeQuery {
	return &ServerTypeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeServerType},
		inters: c.Interceptors(),
	}
}

// Get returns a ServerType entity by its id.
func (c *ServerTypeClient) Get(ctx context.Context, id gidx.PrefixedID) (*ServerType, error) {
	return c.Query().Where(servertype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ServerTypeClient) GetX(ctx context.Context, id gidx.PrefixedID) *ServerType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryServers queries the servers edge of a ServerType.
func (c *ServerTypeClient) QueryServers(st *ServerType) *ServerQuery {
	query := (&ServerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := st.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(servertype.Table, servertype.FieldID, id),
			sqlgraph.To(server.Table, server.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, servertype.ServersTable, servertype.ServersColumn),
		)
		fromV = sqlgraph.Neighbors(st.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ServerTypeClient) Hooks() []Hook {
	return c.hooks.ServerType
}

// Interceptors returns the client interceptors.
func (c *ServerTypeClient) Interceptors() []Interceptor {
	return c.inters.ServerType
}

func (c *ServerTypeClient) mutate(ctx context.Context, m *ServerTypeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ServerTypeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ServerTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ServerTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ServerTypeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown ServerType mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Provider, Server, ServerCPU, ServerCPUType, ServerChassis, ServerChassisType,
		ServerComponent, ServerComponentType, ServerHardDrive, ServerHardDriveType,
		ServerMemory, ServerMemoryType, ServerMotherboard, ServerMotherboardType,
		ServerNetworkCard, ServerNetworkCardType, ServerNetworkPort, ServerPowerSupply,
		ServerPowerSupplyType, ServerType []ent.Hook
	}
	inters struct {
		Provider, Server, ServerCPU, ServerCPUType, ServerChassis, ServerChassisType,
		ServerComponent, ServerComponentType, ServerHardDrive, ServerHardDriveType,
		ServerMemory, ServerMemoryType, ServerMotherboard, ServerMotherboardType,
		ServerNetworkCard, ServerNetworkCardType, ServerNetworkPort, ServerPowerSupply,
		ServerPowerSupplyType, ServerType []ent.Interceptor
	}
)
