// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"go.infratographer.com/server-api/internal/ent/generated/server"
	"go.infratographer.com/server-api/internal/ent/generated/servernetworkcard"
	"go.infratographer.com/server-api/internal/ent/generated/servernetworkcardtype"
	"go.infratographer.com/x/gidx"
)

// Representation of a server network card type. ServerNetworkCard describes the available network card types for a server.
type ServerNetworkCard struct {
	config `json:"-"`
	// ID of the ent.
	// The ID of the server network card type.
	ID gidx.PrefixedID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// The serial number for the server network card.
	Serial string `json:"serial,omitempty"`
	// The ID for the server of this server network card.
	ServerID gidx.PrefixedID `json:"server_id,omitempty"`
	// The ID for the server of this server network card.
	NetworkCardTypeID gidx.PrefixedID `json:"network_card_type_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ServerNetworkCardQuery when eager-loading is set.
	Edges        ServerNetworkCardEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ServerNetworkCardEdges holds the relations/edges for other nodes in the graph.
type ServerNetworkCardEdges struct {
	// NetworkCardType holds the value of the network_card_type edge.
	NetworkCardType *ServerNetworkCardType `json:"network_card_type,omitempty"`
	// Server holds the value of the server edge.
	Server *Server `json:"server,omitempty"`
	// NetworkPort holds the value of the network_port edge.
	NetworkPort []*ServerNetworkPort `json:"network_port,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int

	namedNetworkPort map[string][]*ServerNetworkPort
}

// NetworkCardTypeOrErr returns the NetworkCardType value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ServerNetworkCardEdges) NetworkCardTypeOrErr() (*ServerNetworkCardType, error) {
	if e.loadedTypes[0] {
		if e.NetworkCardType == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: servernetworkcardtype.Label}
		}
		return e.NetworkCardType, nil
	}
	return nil, &NotLoadedError{edge: "network_card_type"}
}

// ServerOrErr returns the Server value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ServerNetworkCardEdges) ServerOrErr() (*Server, error) {
	if e.loadedTypes[1] {
		if e.Server == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: server.Label}
		}
		return e.Server, nil
	}
	return nil, &NotLoadedError{edge: "server"}
}

// NetworkPortOrErr returns the NetworkPort value or an error if the edge
// was not loaded in eager-loading.
func (e ServerNetworkCardEdges) NetworkPortOrErr() ([]*ServerNetworkPort, error) {
	if e.loadedTypes[2] {
		return e.NetworkPort, nil
	}
	return nil, &NotLoadedError{edge: "network_port"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ServerNetworkCard) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case servernetworkcard.FieldID, servernetworkcard.FieldServerID, servernetworkcard.FieldNetworkCardTypeID:
			values[i] = new(gidx.PrefixedID)
		case servernetworkcard.FieldSerial:
			values[i] = new(sql.NullString)
		case servernetworkcard.FieldCreatedAt, servernetworkcard.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ServerNetworkCard fields.
func (snc *ServerNetworkCard) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case servernetworkcard.FieldID:
			if value, ok := values[i].(*gidx.PrefixedID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				snc.ID = *value
			}
		case servernetworkcard.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				snc.CreatedAt = value.Time
			}
		case servernetworkcard.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				snc.UpdatedAt = value.Time
			}
		case servernetworkcard.FieldSerial:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field serial", values[i])
			} else if value.Valid {
				snc.Serial = value.String
			}
		case servernetworkcard.FieldServerID:
			if value, ok := values[i].(*gidx.PrefixedID); !ok {
				return fmt.Errorf("unexpected type %T for field server_id", values[i])
			} else if value != nil {
				snc.ServerID = *value
			}
		case servernetworkcard.FieldNetworkCardTypeID:
			if value, ok := values[i].(*gidx.PrefixedID); !ok {
				return fmt.Errorf("unexpected type %T for field network_card_type_id", values[i])
			} else if value != nil {
				snc.NetworkCardTypeID = *value
			}
		default:
			snc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ServerNetworkCard.
// This includes values selected through modifiers, order, etc.
func (snc *ServerNetworkCard) Value(name string) (ent.Value, error) {
	return snc.selectValues.Get(name)
}

// QueryNetworkCardType queries the "network_card_type" edge of the ServerNetworkCard entity.
func (snc *ServerNetworkCard) QueryNetworkCardType() *ServerNetworkCardTypeQuery {
	return NewServerNetworkCardClient(snc.config).QueryNetworkCardType(snc)
}

// QueryServer queries the "server" edge of the ServerNetworkCard entity.
func (snc *ServerNetworkCard) QueryServer() *ServerQuery {
	return NewServerNetworkCardClient(snc.config).QueryServer(snc)
}

// QueryNetworkPort queries the "network_port" edge of the ServerNetworkCard entity.
func (snc *ServerNetworkCard) QueryNetworkPort() *ServerNetworkPortQuery {
	return NewServerNetworkCardClient(snc.config).QueryNetworkPort(snc)
}

// Update returns a builder for updating this ServerNetworkCard.
// Note that you need to call ServerNetworkCard.Unwrap() before calling this method if this ServerNetworkCard
// was returned from a transaction, and the transaction was committed or rolled back.
func (snc *ServerNetworkCard) Update() *ServerNetworkCardUpdateOne {
	return NewServerNetworkCardClient(snc.config).UpdateOne(snc)
}

// Unwrap unwraps the ServerNetworkCard entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (snc *ServerNetworkCard) Unwrap() *ServerNetworkCard {
	_tx, ok := snc.config.driver.(*txDriver)
	if !ok {
		panic("generated: ServerNetworkCard is not a transactional entity")
	}
	snc.config.driver = _tx.drv
	return snc
}

// String implements the fmt.Stringer.
func (snc *ServerNetworkCard) String() string {
	var builder strings.Builder
	builder.WriteString("ServerNetworkCard(")
	builder.WriteString(fmt.Sprintf("id=%v, ", snc.ID))
	builder.WriteString("created_at=")
	builder.WriteString(snc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(snc.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("serial=")
	builder.WriteString(snc.Serial)
	builder.WriteString(", ")
	builder.WriteString("server_id=")
	builder.WriteString(fmt.Sprintf("%v", snc.ServerID))
	builder.WriteString(", ")
	builder.WriteString("network_card_type_id=")
	builder.WriteString(fmt.Sprintf("%v", snc.NetworkCardTypeID))
	builder.WriteByte(')')
	return builder.String()
}

// IsEntity implement fedruntime.Entity
func (snc ServerNetworkCard) IsEntity() {}

// NamedNetworkPort returns the NetworkPort named value or an error if the edge was not
// loaded in eager-loading with this name.
func (snc *ServerNetworkCard) NamedNetworkPort(name string) ([]*ServerNetworkPort, error) {
	if snc.Edges.namedNetworkPort == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := snc.Edges.namedNetworkPort[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (snc *ServerNetworkCard) appendNamedNetworkPort(name string, edges ...*ServerNetworkPort) {
	if snc.Edges.namedNetworkPort == nil {
		snc.Edges.namedNetworkPort = make(map[string][]*ServerNetworkPort)
	}
	if len(edges) == 0 {
		snc.Edges.namedNetworkPort[name] = []*ServerNetworkPort{}
	} else {
		snc.Edges.namedNetworkPort[name] = append(snc.Edges.namedNetworkPort[name], edges...)
	}
}

// ServerNetworkCards is a parsable slice of ServerNetworkCard.
type ServerNetworkCards []*ServerNetworkCard
