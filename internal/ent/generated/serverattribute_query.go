// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package generated

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"go.infratographer.com/server-api/internal/ent/generated/predicate"
	"go.infratographer.com/server-api/internal/ent/generated/serverattribute"
	"go.infratographer.com/x/gidx"
)

// ServerAttributeQuery is the builder for querying ServerAttribute entities.
type ServerAttributeQuery struct {
	config
	ctx        *QueryContext
	order      []serverattribute.OrderOption
	inters     []Interceptor
	predicates []predicate.ServerAttribute
	modifiers  []func(*sql.Selector)
	loadTotal  []func(context.Context, []*ServerAttribute) error
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ServerAttributeQuery builder.
func (saq *ServerAttributeQuery) Where(ps ...predicate.ServerAttribute) *ServerAttributeQuery {
	saq.predicates = append(saq.predicates, ps...)
	return saq
}

// Limit the number of records to be returned by this query.
func (saq *ServerAttributeQuery) Limit(limit int) *ServerAttributeQuery {
	saq.ctx.Limit = &limit
	return saq
}

// Offset to start from.
func (saq *ServerAttributeQuery) Offset(offset int) *ServerAttributeQuery {
	saq.ctx.Offset = &offset
	return saq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (saq *ServerAttributeQuery) Unique(unique bool) *ServerAttributeQuery {
	saq.ctx.Unique = &unique
	return saq
}

// Order specifies how the records should be ordered.
func (saq *ServerAttributeQuery) Order(o ...serverattribute.OrderOption) *ServerAttributeQuery {
	saq.order = append(saq.order, o...)
	return saq
}

// First returns the first ServerAttribute entity from the query.
// Returns a *NotFoundError when no ServerAttribute was found.
func (saq *ServerAttributeQuery) First(ctx context.Context) (*ServerAttribute, error) {
	nodes, err := saq.Limit(1).All(setContextOp(ctx, saq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{serverattribute.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (saq *ServerAttributeQuery) FirstX(ctx context.Context) *ServerAttribute {
	node, err := saq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ServerAttribute ID from the query.
// Returns a *NotFoundError when no ServerAttribute ID was found.
func (saq *ServerAttributeQuery) FirstID(ctx context.Context) (id gidx.PrefixedID, err error) {
	var ids []gidx.PrefixedID
	if ids, err = saq.Limit(1).IDs(setContextOp(ctx, saq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{serverattribute.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (saq *ServerAttributeQuery) FirstIDX(ctx context.Context) gidx.PrefixedID {
	id, err := saq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ServerAttribute entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ServerAttribute entity is found.
// Returns a *NotFoundError when no ServerAttribute entities are found.
func (saq *ServerAttributeQuery) Only(ctx context.Context) (*ServerAttribute, error) {
	nodes, err := saq.Limit(2).All(setContextOp(ctx, saq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{serverattribute.Label}
	default:
		return nil, &NotSingularError{serverattribute.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (saq *ServerAttributeQuery) OnlyX(ctx context.Context) *ServerAttribute {
	node, err := saq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ServerAttribute ID in the query.
// Returns a *NotSingularError when more than one ServerAttribute ID is found.
// Returns a *NotFoundError when no entities are found.
func (saq *ServerAttributeQuery) OnlyID(ctx context.Context) (id gidx.PrefixedID, err error) {
	var ids []gidx.PrefixedID
	if ids, err = saq.Limit(2).IDs(setContextOp(ctx, saq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{serverattribute.Label}
	default:
		err = &NotSingularError{serverattribute.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (saq *ServerAttributeQuery) OnlyIDX(ctx context.Context) gidx.PrefixedID {
	id, err := saq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ServerAttributes.
func (saq *ServerAttributeQuery) All(ctx context.Context) ([]*ServerAttribute, error) {
	ctx = setContextOp(ctx, saq.ctx, "All")
	if err := saq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ServerAttribute, *ServerAttributeQuery]()
	return withInterceptors[[]*ServerAttribute](ctx, saq, qr, saq.inters)
}

// AllX is like All, but panics if an error occurs.
func (saq *ServerAttributeQuery) AllX(ctx context.Context) []*ServerAttribute {
	nodes, err := saq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ServerAttribute IDs.
func (saq *ServerAttributeQuery) IDs(ctx context.Context) (ids []gidx.PrefixedID, err error) {
	if saq.ctx.Unique == nil && saq.path != nil {
		saq.Unique(true)
	}
	ctx = setContextOp(ctx, saq.ctx, "IDs")
	if err = saq.Select(serverattribute.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (saq *ServerAttributeQuery) IDsX(ctx context.Context) []gidx.PrefixedID {
	ids, err := saq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (saq *ServerAttributeQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, saq.ctx, "Count")
	if err := saq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, saq, querierCount[*ServerAttributeQuery](), saq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (saq *ServerAttributeQuery) CountX(ctx context.Context) int {
	count, err := saq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (saq *ServerAttributeQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, saq.ctx, "Exist")
	switch _, err := saq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("generated: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (saq *ServerAttributeQuery) ExistX(ctx context.Context) bool {
	exist, err := saq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ServerAttributeQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (saq *ServerAttributeQuery) Clone() *ServerAttributeQuery {
	if saq == nil {
		return nil
	}
	return &ServerAttributeQuery{
		config:     saq.config,
		ctx:        saq.ctx.Clone(),
		order:      append([]serverattribute.OrderOption{}, saq.order...),
		inters:     append([]Interceptor{}, saq.inters...),
		predicates: append([]predicate.ServerAttribute{}, saq.predicates...),
		// clone intermediate query.
		sql:  saq.sql.Clone(),
		path: saq.path,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ServerAttribute.Query().
//		GroupBy(serverattribute.FieldCreatedAt).
//		Aggregate(generated.Count()).
//		Scan(ctx, &v)
func (saq *ServerAttributeQuery) GroupBy(field string, fields ...string) *ServerAttributeGroupBy {
	saq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ServerAttributeGroupBy{build: saq}
	grbuild.flds = &saq.ctx.Fields
	grbuild.label = serverattribute.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.ServerAttribute.Query().
//		Select(serverattribute.FieldCreatedAt).
//		Scan(ctx, &v)
func (saq *ServerAttributeQuery) Select(fields ...string) *ServerAttributeSelect {
	saq.ctx.Fields = append(saq.ctx.Fields, fields...)
	sbuild := &ServerAttributeSelect{ServerAttributeQuery: saq}
	sbuild.label = serverattribute.Label
	sbuild.flds, sbuild.scan = &saq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ServerAttributeSelect configured with the given aggregations.
func (saq *ServerAttributeQuery) Aggregate(fns ...AggregateFunc) *ServerAttributeSelect {
	return saq.Select().Aggregate(fns...)
}

func (saq *ServerAttributeQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range saq.inters {
		if inter == nil {
			return fmt.Errorf("generated: uninitialized interceptor (forgotten import generated/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, saq); err != nil {
				return err
			}
		}
	}
	for _, f := range saq.ctx.Fields {
		if !serverattribute.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
		}
	}
	if saq.path != nil {
		prev, err := saq.path(ctx)
		if err != nil {
			return err
		}
		saq.sql = prev
	}
	return nil
}

func (saq *ServerAttributeQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ServerAttribute, error) {
	var (
		nodes = []*ServerAttribute{}
		_spec = saq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ServerAttribute).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ServerAttribute{config: saq.config}
		nodes = append(nodes, node)
		return node.assignValues(columns, values)
	}
	if len(saq.modifiers) > 0 {
		_spec.Modifiers = saq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, saq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	for i := range saq.loadTotal {
		if err := saq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (saq *ServerAttributeQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := saq.querySpec()
	if len(saq.modifiers) > 0 {
		_spec.Modifiers = saq.modifiers
	}
	_spec.Node.Columns = saq.ctx.Fields
	if len(saq.ctx.Fields) > 0 {
		_spec.Unique = saq.ctx.Unique != nil && *saq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, saq.driver, _spec)
}

func (saq *ServerAttributeQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(serverattribute.Table, serverattribute.Columns, sqlgraph.NewFieldSpec(serverattribute.FieldID, field.TypeString))
	_spec.From = saq.sql
	if unique := saq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if saq.path != nil {
		_spec.Unique = true
	}
	if fields := saq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, serverattribute.FieldID)
		for i := range fields {
			if fields[i] != serverattribute.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := saq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := saq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := saq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := saq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (saq *ServerAttributeQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(saq.driver.Dialect())
	t1 := builder.Table(serverattribute.Table)
	columns := saq.ctx.Fields
	if len(columns) == 0 {
		columns = serverattribute.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if saq.sql != nil {
		selector = saq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if saq.ctx.Unique != nil && *saq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range saq.predicates {
		p(selector)
	}
	for _, p := range saq.order {
		p(selector)
	}
	if offset := saq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := saq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ServerAttributeGroupBy is the group-by builder for ServerAttribute entities.
type ServerAttributeGroupBy struct {
	selector
	build *ServerAttributeQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (sagb *ServerAttributeGroupBy) Aggregate(fns ...AggregateFunc) *ServerAttributeGroupBy {
	sagb.fns = append(sagb.fns, fns...)
	return sagb
}

// Scan applies the selector query and scans the result into the given value.
func (sagb *ServerAttributeGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sagb.build.ctx, "GroupBy")
	if err := sagb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ServerAttributeQuery, *ServerAttributeGroupBy](ctx, sagb.build, sagb, sagb.build.inters, v)
}

func (sagb *ServerAttributeGroupBy) sqlScan(ctx context.Context, root *ServerAttributeQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(sagb.fns))
	for _, fn := range sagb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*sagb.flds)+len(sagb.fns))
		for _, f := range *sagb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*sagb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sagb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ServerAttributeSelect is the builder for selecting fields of ServerAttribute entities.
type ServerAttributeSelect struct {
	*ServerAttributeQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (sas *ServerAttributeSelect) Aggregate(fns ...AggregateFunc) *ServerAttributeSelect {
	sas.fns = append(sas.fns, fns...)
	return sas
}

// Scan applies the selector query and scans the result into the given value.
func (sas *ServerAttributeSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sas.ctx, "Select")
	if err := sas.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ServerAttributeQuery, *ServerAttributeSelect](ctx, sas.ServerAttributeQuery, sas, sas.inters, v)
}

func (sas *ServerAttributeSelect) sqlScan(ctx context.Context, root *ServerAttributeQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(sas.fns))
	for _, fn := range sas.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*sas.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sas.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
