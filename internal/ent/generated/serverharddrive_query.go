// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package generated

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"go.infratographer.com/server-api/internal/ent/generated/predicate"
	"go.infratographer.com/server-api/internal/ent/generated/server"
	"go.infratographer.com/server-api/internal/ent/generated/serverharddrive"
	"go.infratographer.com/server-api/internal/ent/generated/serverharddrivetype"
	"go.infratographer.com/x/gidx"
)

// ServerHardDriveQuery is the builder for querying ServerHardDrive entities.
type ServerHardDriveQuery struct {
	config
	ctx               *QueryContext
	order             []serverharddrive.OrderOption
	inters            []Interceptor
	predicates        []predicate.ServerHardDrive
	withServer        *ServerQuery
	withHardDriveType *ServerHardDriveTypeQuery
	modifiers         []func(*sql.Selector)
	loadTotal         []func(context.Context, []*ServerHardDrive) error
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ServerHardDriveQuery builder.
func (shdq *ServerHardDriveQuery) Where(ps ...predicate.ServerHardDrive) *ServerHardDriveQuery {
	shdq.predicates = append(shdq.predicates, ps...)
	return shdq
}

// Limit the number of records to be returned by this query.
func (shdq *ServerHardDriveQuery) Limit(limit int) *ServerHardDriveQuery {
	shdq.ctx.Limit = &limit
	return shdq
}

// Offset to start from.
func (shdq *ServerHardDriveQuery) Offset(offset int) *ServerHardDriveQuery {
	shdq.ctx.Offset = &offset
	return shdq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (shdq *ServerHardDriveQuery) Unique(unique bool) *ServerHardDriveQuery {
	shdq.ctx.Unique = &unique
	return shdq
}

// Order specifies how the records should be ordered.
func (shdq *ServerHardDriveQuery) Order(o ...serverharddrive.OrderOption) *ServerHardDriveQuery {
	shdq.order = append(shdq.order, o...)
	return shdq
}

// QueryServer chains the current query on the "server" edge.
func (shdq *ServerHardDriveQuery) QueryServer() *ServerQuery {
	query := (&ServerClient{config: shdq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := shdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := shdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(serverharddrive.Table, serverharddrive.FieldID, selector),
			sqlgraph.To(server.Table, server.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, serverharddrive.ServerTable, serverharddrive.ServerColumn),
		)
		fromU = sqlgraph.SetNeighbors(shdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryHardDriveType chains the current query on the "hard_drive_type" edge.
func (shdq *ServerHardDriveQuery) QueryHardDriveType() *ServerHardDriveTypeQuery {
	query := (&ServerHardDriveTypeClient{config: shdq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := shdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := shdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(serverharddrive.Table, serverharddrive.FieldID, selector),
			sqlgraph.To(serverharddrivetype.Table, serverharddrivetype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, serverharddrive.HardDriveTypeTable, serverharddrive.HardDriveTypeColumn),
		)
		fromU = sqlgraph.SetNeighbors(shdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ServerHardDrive entity from the query.
// Returns a *NotFoundError when no ServerHardDrive was found.
func (shdq *ServerHardDriveQuery) First(ctx context.Context) (*ServerHardDrive, error) {
	nodes, err := shdq.Limit(1).All(setContextOp(ctx, shdq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{serverharddrive.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (shdq *ServerHardDriveQuery) FirstX(ctx context.Context) *ServerHardDrive {
	node, err := shdq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ServerHardDrive ID from the query.
// Returns a *NotFoundError when no ServerHardDrive ID was found.
func (shdq *ServerHardDriveQuery) FirstID(ctx context.Context) (id gidx.PrefixedID, err error) {
	var ids []gidx.PrefixedID
	if ids, err = shdq.Limit(1).IDs(setContextOp(ctx, shdq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{serverharddrive.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (shdq *ServerHardDriveQuery) FirstIDX(ctx context.Context) gidx.PrefixedID {
	id, err := shdq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ServerHardDrive entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ServerHardDrive entity is found.
// Returns a *NotFoundError when no ServerHardDrive entities are found.
func (shdq *ServerHardDriveQuery) Only(ctx context.Context) (*ServerHardDrive, error) {
	nodes, err := shdq.Limit(2).All(setContextOp(ctx, shdq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{serverharddrive.Label}
	default:
		return nil, &NotSingularError{serverharddrive.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (shdq *ServerHardDriveQuery) OnlyX(ctx context.Context) *ServerHardDrive {
	node, err := shdq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ServerHardDrive ID in the query.
// Returns a *NotSingularError when more than one ServerHardDrive ID is found.
// Returns a *NotFoundError when no entities are found.
func (shdq *ServerHardDriveQuery) OnlyID(ctx context.Context) (id gidx.PrefixedID, err error) {
	var ids []gidx.PrefixedID
	if ids, err = shdq.Limit(2).IDs(setContextOp(ctx, shdq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{serverharddrive.Label}
	default:
		err = &NotSingularError{serverharddrive.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (shdq *ServerHardDriveQuery) OnlyIDX(ctx context.Context) gidx.PrefixedID {
	id, err := shdq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ServerHardDrives.
func (shdq *ServerHardDriveQuery) All(ctx context.Context) ([]*ServerHardDrive, error) {
	ctx = setContextOp(ctx, shdq.ctx, "All")
	if err := shdq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ServerHardDrive, *ServerHardDriveQuery]()
	return withInterceptors[[]*ServerHardDrive](ctx, shdq, qr, shdq.inters)
}

// AllX is like All, but panics if an error occurs.
func (shdq *ServerHardDriveQuery) AllX(ctx context.Context) []*ServerHardDrive {
	nodes, err := shdq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ServerHardDrive IDs.
func (shdq *ServerHardDriveQuery) IDs(ctx context.Context) (ids []gidx.PrefixedID, err error) {
	if shdq.ctx.Unique == nil && shdq.path != nil {
		shdq.Unique(true)
	}
	ctx = setContextOp(ctx, shdq.ctx, "IDs")
	if err = shdq.Select(serverharddrive.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (shdq *ServerHardDriveQuery) IDsX(ctx context.Context) []gidx.PrefixedID {
	ids, err := shdq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (shdq *ServerHardDriveQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, shdq.ctx, "Count")
	if err := shdq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, shdq, querierCount[*ServerHardDriveQuery](), shdq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (shdq *ServerHardDriveQuery) CountX(ctx context.Context) int {
	count, err := shdq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (shdq *ServerHardDriveQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, shdq.ctx, "Exist")
	switch _, err := shdq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("generated: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (shdq *ServerHardDriveQuery) ExistX(ctx context.Context) bool {
	exist, err := shdq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ServerHardDriveQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (shdq *ServerHardDriveQuery) Clone() *ServerHardDriveQuery {
	if shdq == nil {
		return nil
	}
	return &ServerHardDriveQuery{
		config:            shdq.config,
		ctx:               shdq.ctx.Clone(),
		order:             append([]serverharddrive.OrderOption{}, shdq.order...),
		inters:            append([]Interceptor{}, shdq.inters...),
		predicates:        append([]predicate.ServerHardDrive{}, shdq.predicates...),
		withServer:        shdq.withServer.Clone(),
		withHardDriveType: shdq.withHardDriveType.Clone(),
		// clone intermediate query.
		sql:  shdq.sql.Clone(),
		path: shdq.path,
	}
}

// WithServer tells the query-builder to eager-load the nodes that are connected to
// the "server" edge. The optional arguments are used to configure the query builder of the edge.
func (shdq *ServerHardDriveQuery) WithServer(opts ...func(*ServerQuery)) *ServerHardDriveQuery {
	query := (&ServerClient{config: shdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	shdq.withServer = query
	return shdq
}

// WithHardDriveType tells the query-builder to eager-load the nodes that are connected to
// the "hard_drive_type" edge. The optional arguments are used to configure the query builder of the edge.
func (shdq *ServerHardDriveQuery) WithHardDriveType(opts ...func(*ServerHardDriveTypeQuery)) *ServerHardDriveQuery {
	query := (&ServerHardDriveTypeClient{config: shdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	shdq.withHardDriveType = query
	return shdq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ServerHardDrive.Query().
//		GroupBy(serverharddrive.FieldCreatedAt).
//		Aggregate(generated.Count()).
//		Scan(ctx, &v)
func (shdq *ServerHardDriveQuery) GroupBy(field string, fields ...string) *ServerHardDriveGroupBy {
	shdq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ServerHardDriveGroupBy{build: shdq}
	grbuild.flds = &shdq.ctx.Fields
	grbuild.label = serverharddrive.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.ServerHardDrive.Query().
//		Select(serverharddrive.FieldCreatedAt).
//		Scan(ctx, &v)
func (shdq *ServerHardDriveQuery) Select(fields ...string) *ServerHardDriveSelect {
	shdq.ctx.Fields = append(shdq.ctx.Fields, fields...)
	sbuild := &ServerHardDriveSelect{ServerHardDriveQuery: shdq}
	sbuild.label = serverharddrive.Label
	sbuild.flds, sbuild.scan = &shdq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ServerHardDriveSelect configured with the given aggregations.
func (shdq *ServerHardDriveQuery) Aggregate(fns ...AggregateFunc) *ServerHardDriveSelect {
	return shdq.Select().Aggregate(fns...)
}

func (shdq *ServerHardDriveQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range shdq.inters {
		if inter == nil {
			return fmt.Errorf("generated: uninitialized interceptor (forgotten import generated/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, shdq); err != nil {
				return err
			}
		}
	}
	for _, f := range shdq.ctx.Fields {
		if !serverharddrive.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
		}
	}
	if shdq.path != nil {
		prev, err := shdq.path(ctx)
		if err != nil {
			return err
		}
		shdq.sql = prev
	}
	return nil
}

func (shdq *ServerHardDriveQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ServerHardDrive, error) {
	var (
		nodes       = []*ServerHardDrive{}
		_spec       = shdq.querySpec()
		loadedTypes = [2]bool{
			shdq.withServer != nil,
			shdq.withHardDriveType != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ServerHardDrive).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ServerHardDrive{config: shdq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(shdq.modifiers) > 0 {
		_spec.Modifiers = shdq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, shdq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := shdq.withServer; query != nil {
		if err := shdq.loadServer(ctx, query, nodes, nil,
			func(n *ServerHardDrive, e *Server) { n.Edges.Server = e }); err != nil {
			return nil, err
		}
	}
	if query := shdq.withHardDriveType; query != nil {
		if err := shdq.loadHardDriveType(ctx, query, nodes, nil,
			func(n *ServerHardDrive, e *ServerHardDriveType) { n.Edges.HardDriveType = e }); err != nil {
			return nil, err
		}
	}
	for i := range shdq.loadTotal {
		if err := shdq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (shdq *ServerHardDriveQuery) loadServer(ctx context.Context, query *ServerQuery, nodes []*ServerHardDrive, init func(*ServerHardDrive), assign func(*ServerHardDrive, *Server)) error {
	ids := make([]gidx.PrefixedID, 0, len(nodes))
	nodeids := make(map[gidx.PrefixedID][]*ServerHardDrive)
	for i := range nodes {
		fk := nodes[i].ServerID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(server.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "server_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (shdq *ServerHardDriveQuery) loadHardDriveType(ctx context.Context, query *ServerHardDriveTypeQuery, nodes []*ServerHardDrive, init func(*ServerHardDrive), assign func(*ServerHardDrive, *ServerHardDriveType)) error {
	ids := make([]gidx.PrefixedID, 0, len(nodes))
	nodeids := make(map[gidx.PrefixedID][]*ServerHardDrive)
	for i := range nodes {
		fk := nodes[i].ServerHardDriveTypeID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(serverharddrivetype.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "server_hard_drive_type_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (shdq *ServerHardDriveQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := shdq.querySpec()
	if len(shdq.modifiers) > 0 {
		_spec.Modifiers = shdq.modifiers
	}
	_spec.Node.Columns = shdq.ctx.Fields
	if len(shdq.ctx.Fields) > 0 {
		_spec.Unique = shdq.ctx.Unique != nil && *shdq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, shdq.driver, _spec)
}

func (shdq *ServerHardDriveQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(serverharddrive.Table, serverharddrive.Columns, sqlgraph.NewFieldSpec(serverharddrive.FieldID, field.TypeString))
	_spec.From = shdq.sql
	if unique := shdq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if shdq.path != nil {
		_spec.Unique = true
	}
	if fields := shdq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, serverharddrive.FieldID)
		for i := range fields {
			if fields[i] != serverharddrive.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if shdq.withServer != nil {
			_spec.Node.AddColumnOnce(serverharddrive.FieldServerID)
		}
		if shdq.withHardDriveType != nil {
			_spec.Node.AddColumnOnce(serverharddrive.FieldServerHardDriveTypeID)
		}
	}
	if ps := shdq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := shdq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := shdq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := shdq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (shdq *ServerHardDriveQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(shdq.driver.Dialect())
	t1 := builder.Table(serverharddrive.Table)
	columns := shdq.ctx.Fields
	if len(columns) == 0 {
		columns = serverharddrive.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if shdq.sql != nil {
		selector = shdq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if shdq.ctx.Unique != nil && *shdq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range shdq.predicates {
		p(selector)
	}
	for _, p := range shdq.order {
		p(selector)
	}
	if offset := shdq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := shdq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ServerHardDriveGroupBy is the group-by builder for ServerHardDrive entities.
type ServerHardDriveGroupBy struct {
	selector
	build *ServerHardDriveQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (shdgb *ServerHardDriveGroupBy) Aggregate(fns ...AggregateFunc) *ServerHardDriveGroupBy {
	shdgb.fns = append(shdgb.fns, fns...)
	return shdgb
}

// Scan applies the selector query and scans the result into the given value.
func (shdgb *ServerHardDriveGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, shdgb.build.ctx, "GroupBy")
	if err := shdgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ServerHardDriveQuery, *ServerHardDriveGroupBy](ctx, shdgb.build, shdgb, shdgb.build.inters, v)
}

func (shdgb *ServerHardDriveGroupBy) sqlScan(ctx context.Context, root *ServerHardDriveQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(shdgb.fns))
	for _, fn := range shdgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*shdgb.flds)+len(shdgb.fns))
		for _, f := range *shdgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*shdgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := shdgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ServerHardDriveSelect is the builder for selecting fields of ServerHardDrive entities.
type ServerHardDriveSelect struct {
	*ServerHardDriveQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (shds *ServerHardDriveSelect) Aggregate(fns ...AggregateFunc) *ServerHardDriveSelect {
	shds.fns = append(shds.fns, fns...)
	return shds
}

// Scan applies the selector query and scans the result into the given value.
func (shds *ServerHardDriveSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, shds.ctx, "Select")
	if err := shds.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ServerHardDriveQuery, *ServerHardDriveSelect](ctx, shds.ServerHardDriveQuery, shds, shds.inters, v)
}

func (shds *ServerHardDriveSelect) sqlScan(ctx context.Context, root *ServerHardDriveQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(shds.fns))
	for _, fn := range shds.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*shds.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := shds.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
