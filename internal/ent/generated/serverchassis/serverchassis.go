// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package serverchassis

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"go.infratographer.com/x/gidx"
)

const (
	// Label holds the string label denoting the serverchassis type in the database.
	Label = "server_chassis"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldServerChassisTypeID holds the string denoting the server_chassis_type_id field in the database.
	FieldServerChassisTypeID = "server_chassis_type_id"
	// FieldParentChassisID holds the string denoting the parent_chassis_id field in the database.
	FieldParentChassisID = "parent_chassis_id"
	// FieldServerID holds the string denoting the server_id field in the database.
	FieldServerID = "server_id"
	// FieldSerial holds the string denoting the serial field in the database.
	FieldSerial = "serial"
	// Table holds the table name of the serverchassis in the database.
	Table = "server_chasses"
)

// Columns holds all SQL columns for serverchassis fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldServerChassisTypeID,
	FieldParentChassisID,
	FieldServerID,
	FieldSerial,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// SerialValidator is a validator for the "serial" field. It is called by the builders before save.
	SerialValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() gidx.PrefixedID
)

// OrderOption defines the ordering options for the ServerChassis queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByServerChassisTypeID orders the results by the server_chassis_type_id field.
func ByServerChassisTypeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldServerChassisTypeID, opts...).ToFunc()
}

// ByParentChassisID orders the results by the parent_chassis_id field.
func ByParentChassisID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldParentChassisID, opts...).ToFunc()
}

// ByServerID orders the results by the server_id field.
func ByServerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldServerID, opts...).ToFunc()
}

// BySerial orders the results by the serial field.
func BySerial(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSerial, opts...).ToFunc()
}
