// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"go.infratographer.com/server-api/internal/ent/generated/predicate"
	"go.infratographer.com/server-api/internal/ent/generated/serverpowersupplytype"
)

// ServerPowerSupplyTypeUpdate is the builder for updating ServerPowerSupplyType entities.
type ServerPowerSupplyTypeUpdate struct {
	config
	hooks    []Hook
	mutation *ServerPowerSupplyTypeMutation
}

// Where appends a list predicates to the ServerPowerSupplyTypeUpdate builder.
func (spstu *ServerPowerSupplyTypeUpdate) Where(ps ...predicate.ServerPowerSupplyType) *ServerPowerSupplyTypeUpdate {
	spstu.mutation.Where(ps...)
	return spstu
}

// SetVendor sets the "vendor" field.
func (spstu *ServerPowerSupplyTypeUpdate) SetVendor(s string) *ServerPowerSupplyTypeUpdate {
	spstu.mutation.SetVendor(s)
	return spstu
}

// SetModel sets the "model" field.
func (spstu *ServerPowerSupplyTypeUpdate) SetModel(s string) *ServerPowerSupplyTypeUpdate {
	spstu.mutation.SetModel(s)
	return spstu
}

// SetWatts sets the "watts" field.
func (spstu *ServerPowerSupplyTypeUpdate) SetWatts(s string) *ServerPowerSupplyTypeUpdate {
	spstu.mutation.SetWatts(s)
	return spstu
}

// Mutation returns the ServerPowerSupplyTypeMutation object of the builder.
func (spstu *ServerPowerSupplyTypeUpdate) Mutation() *ServerPowerSupplyTypeMutation {
	return spstu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (spstu *ServerPowerSupplyTypeUpdate) Save(ctx context.Context) (int, error) {
	spstu.defaults()
	return withHooks(ctx, spstu.sqlSave, spstu.mutation, spstu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (spstu *ServerPowerSupplyTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := spstu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (spstu *ServerPowerSupplyTypeUpdate) Exec(ctx context.Context) error {
	_, err := spstu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spstu *ServerPowerSupplyTypeUpdate) ExecX(ctx context.Context) {
	if err := spstu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (spstu *ServerPowerSupplyTypeUpdate) defaults() {
	if _, ok := spstu.mutation.UpdatedAt(); !ok {
		v := serverpowersupplytype.UpdateDefaultUpdatedAt()
		spstu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (spstu *ServerPowerSupplyTypeUpdate) check() error {
	if v, ok := spstu.mutation.Vendor(); ok {
		if err := serverpowersupplytype.VendorValidator(v); err != nil {
			return &ValidationError{Name: "vendor", err: fmt.Errorf(`generated: validator failed for field "ServerPowerSupplyType.vendor": %w`, err)}
		}
	}
	if v, ok := spstu.mutation.Model(); ok {
		if err := serverpowersupplytype.ModelValidator(v); err != nil {
			return &ValidationError{Name: "model", err: fmt.Errorf(`generated: validator failed for field "ServerPowerSupplyType.model": %w`, err)}
		}
	}
	if v, ok := spstu.mutation.Watts(); ok {
		if err := serverpowersupplytype.WattsValidator(v); err != nil {
			return &ValidationError{Name: "watts", err: fmt.Errorf(`generated: validator failed for field "ServerPowerSupplyType.watts": %w`, err)}
		}
	}
	return nil
}

func (spstu *ServerPowerSupplyTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := spstu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(serverpowersupplytype.Table, serverpowersupplytype.Columns, sqlgraph.NewFieldSpec(serverpowersupplytype.FieldID, field.TypeString))
	if ps := spstu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := spstu.mutation.UpdatedAt(); ok {
		_spec.SetField(serverpowersupplytype.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := spstu.mutation.Vendor(); ok {
		_spec.SetField(serverpowersupplytype.FieldVendor, field.TypeString, value)
	}
	if value, ok := spstu.mutation.Model(); ok {
		_spec.SetField(serverpowersupplytype.FieldModel, field.TypeString, value)
	}
	if value, ok := spstu.mutation.Watts(); ok {
		_spec.SetField(serverpowersupplytype.FieldWatts, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, spstu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{serverpowersupplytype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	spstu.mutation.done = true
	return n, nil
}

// ServerPowerSupplyTypeUpdateOne is the builder for updating a single ServerPowerSupplyType entity.
type ServerPowerSupplyTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ServerPowerSupplyTypeMutation
}

// SetVendor sets the "vendor" field.
func (spstuo *ServerPowerSupplyTypeUpdateOne) SetVendor(s string) *ServerPowerSupplyTypeUpdateOne {
	spstuo.mutation.SetVendor(s)
	return spstuo
}

// SetModel sets the "model" field.
func (spstuo *ServerPowerSupplyTypeUpdateOne) SetModel(s string) *ServerPowerSupplyTypeUpdateOne {
	spstuo.mutation.SetModel(s)
	return spstuo
}

// SetWatts sets the "watts" field.
func (spstuo *ServerPowerSupplyTypeUpdateOne) SetWatts(s string) *ServerPowerSupplyTypeUpdateOne {
	spstuo.mutation.SetWatts(s)
	return spstuo
}

// Mutation returns the ServerPowerSupplyTypeMutation object of the builder.
func (spstuo *ServerPowerSupplyTypeUpdateOne) Mutation() *ServerPowerSupplyTypeMutation {
	return spstuo.mutation
}

// Where appends a list predicates to the ServerPowerSupplyTypeUpdate builder.
func (spstuo *ServerPowerSupplyTypeUpdateOne) Where(ps ...predicate.ServerPowerSupplyType) *ServerPowerSupplyTypeUpdateOne {
	spstuo.mutation.Where(ps...)
	return spstuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (spstuo *ServerPowerSupplyTypeUpdateOne) Select(field string, fields ...string) *ServerPowerSupplyTypeUpdateOne {
	spstuo.fields = append([]string{field}, fields...)
	return spstuo
}

// Save executes the query and returns the updated ServerPowerSupplyType entity.
func (spstuo *ServerPowerSupplyTypeUpdateOne) Save(ctx context.Context) (*ServerPowerSupplyType, error) {
	spstuo.defaults()
	return withHooks(ctx, spstuo.sqlSave, spstuo.mutation, spstuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (spstuo *ServerPowerSupplyTypeUpdateOne) SaveX(ctx context.Context) *ServerPowerSupplyType {
	node, err := spstuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (spstuo *ServerPowerSupplyTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := spstuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spstuo *ServerPowerSupplyTypeUpdateOne) ExecX(ctx context.Context) {
	if err := spstuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (spstuo *ServerPowerSupplyTypeUpdateOne) defaults() {
	if _, ok := spstuo.mutation.UpdatedAt(); !ok {
		v := serverpowersupplytype.UpdateDefaultUpdatedAt()
		spstuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (spstuo *ServerPowerSupplyTypeUpdateOne) check() error {
	if v, ok := spstuo.mutation.Vendor(); ok {
		if err := serverpowersupplytype.VendorValidator(v); err != nil {
			return &ValidationError{Name: "vendor", err: fmt.Errorf(`generated: validator failed for field "ServerPowerSupplyType.vendor": %w`, err)}
		}
	}
	if v, ok := spstuo.mutation.Model(); ok {
		if err := serverpowersupplytype.ModelValidator(v); err != nil {
			return &ValidationError{Name: "model", err: fmt.Errorf(`generated: validator failed for field "ServerPowerSupplyType.model": %w`, err)}
		}
	}
	if v, ok := spstuo.mutation.Watts(); ok {
		if err := serverpowersupplytype.WattsValidator(v); err != nil {
			return &ValidationError{Name: "watts", err: fmt.Errorf(`generated: validator failed for field "ServerPowerSupplyType.watts": %w`, err)}
		}
	}
	return nil
}

func (spstuo *ServerPowerSupplyTypeUpdateOne) sqlSave(ctx context.Context) (_node *ServerPowerSupplyType, err error) {
	if err := spstuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(serverpowersupplytype.Table, serverpowersupplytype.Columns, sqlgraph.NewFieldSpec(serverpowersupplytype.FieldID, field.TypeString))
	id, ok := spstuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "ServerPowerSupplyType.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := spstuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, serverpowersupplytype.FieldID)
		for _, f := range fields {
			if !serverpowersupplytype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != serverpowersupplytype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := spstuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := spstuo.mutation.UpdatedAt(); ok {
		_spec.SetField(serverpowersupplytype.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := spstuo.mutation.Vendor(); ok {
		_spec.SetField(serverpowersupplytype.FieldVendor, field.TypeString, value)
	}
	if value, ok := spstuo.mutation.Model(); ok {
		_spec.SetField(serverpowersupplytype.FieldModel, field.TypeString, value)
	}
	if value, ok := spstuo.mutation.Watts(); ok {
		_spec.SetField(serverpowersupplytype.FieldWatts, field.TypeString, value)
	}
	_node = &ServerPowerSupplyType{config: spstuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, spstuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{serverpowersupplytype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	spstuo.mutation.done = true
	return _node, nil
}
