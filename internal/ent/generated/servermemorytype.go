// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"go.infratographer.com/server-api/internal/ent/generated/servermemorytype"
	"go.infratographer.com/x/gidx"
)

// Representation of a server memory type. ServerMemoryType describes the available memory types for a server.
type ServerMemoryType struct {
	config `json:"-"`
	// ID of the ent.
	// The ID of the server memory type.
	ID gidx.PrefixedID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// The name of the vendor for the server chassis type.
	Vendor string `json:"vendor,omitempty"`
	// The mode of the server chassis type.
	Model string `json:"model,omitempty"`
	// The speed of the server memory type.
	Speed string `json:"speed,omitempty"`
	// The size of the server memory type.
	Size string `json:"size,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ServerMemoryTypeQuery when eager-loading is set.
	Edges        ServerMemoryTypeEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ServerMemoryTypeEdges holds the relations/edges for other nodes in the graph.
type ServerMemoryTypeEdges struct {
	// Memory holds the value of the memory edge.
	Memory []*ServerMemory `json:"memory,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedMemory map[string][]*ServerMemory
}

// MemoryOrErr returns the Memory value or an error if the edge
// was not loaded in eager-loading.
func (e ServerMemoryTypeEdges) MemoryOrErr() ([]*ServerMemory, error) {
	if e.loadedTypes[0] {
		return e.Memory, nil
	}
	return nil, &NotLoadedError{edge: "memory"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ServerMemoryType) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case servermemorytype.FieldID:
			values[i] = new(gidx.PrefixedID)
		case servermemorytype.FieldVendor, servermemorytype.FieldModel, servermemorytype.FieldSpeed, servermemorytype.FieldSize:
			values[i] = new(sql.NullString)
		case servermemorytype.FieldCreatedAt, servermemorytype.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ServerMemoryType fields.
func (smt *ServerMemoryType) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case servermemorytype.FieldID:
			if value, ok := values[i].(*gidx.PrefixedID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				smt.ID = *value
			}
		case servermemorytype.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				smt.CreatedAt = value.Time
			}
		case servermemorytype.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				smt.UpdatedAt = value.Time
			}
		case servermemorytype.FieldVendor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field vendor", values[i])
			} else if value.Valid {
				smt.Vendor = value.String
			}
		case servermemorytype.FieldModel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field model", values[i])
			} else if value.Valid {
				smt.Model = value.String
			}
		case servermemorytype.FieldSpeed:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field speed", values[i])
			} else if value.Valid {
				smt.Speed = value.String
			}
		case servermemorytype.FieldSize:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field size", values[i])
			} else if value.Valid {
				smt.Size = value.String
			}
		default:
			smt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ServerMemoryType.
// This includes values selected through modifiers, order, etc.
func (smt *ServerMemoryType) Value(name string) (ent.Value, error) {
	return smt.selectValues.Get(name)
}

// QueryMemory queries the "memory" edge of the ServerMemoryType entity.
func (smt *ServerMemoryType) QueryMemory() *ServerMemoryQuery {
	return NewServerMemoryTypeClient(smt.config).QueryMemory(smt)
}

// Update returns a builder for updating this ServerMemoryType.
// Note that you need to call ServerMemoryType.Unwrap() before calling this method if this ServerMemoryType
// was returned from a transaction, and the transaction was committed or rolled back.
func (smt *ServerMemoryType) Update() *ServerMemoryTypeUpdateOne {
	return NewServerMemoryTypeClient(smt.config).UpdateOne(smt)
}

// Unwrap unwraps the ServerMemoryType entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (smt *ServerMemoryType) Unwrap() *ServerMemoryType {
	_tx, ok := smt.config.driver.(*txDriver)
	if !ok {
		panic("generated: ServerMemoryType is not a transactional entity")
	}
	smt.config.driver = _tx.drv
	return smt
}

// String implements the fmt.Stringer.
func (smt *ServerMemoryType) String() string {
	var builder strings.Builder
	builder.WriteString("ServerMemoryType(")
	builder.WriteString(fmt.Sprintf("id=%v, ", smt.ID))
	builder.WriteString("created_at=")
	builder.WriteString(smt.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(smt.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("vendor=")
	builder.WriteString(smt.Vendor)
	builder.WriteString(", ")
	builder.WriteString("model=")
	builder.WriteString(smt.Model)
	builder.WriteString(", ")
	builder.WriteString("speed=")
	builder.WriteString(smt.Speed)
	builder.WriteString(", ")
	builder.WriteString("size=")
	builder.WriteString(smt.Size)
	builder.WriteByte(')')
	return builder.String()
}

// IsEntity implement fedruntime.Entity
func (smt ServerMemoryType) IsEntity() {}

// NamedMemory returns the Memory named value or an error if the edge was not
// loaded in eager-loading with this name.
func (smt *ServerMemoryType) NamedMemory(name string) ([]*ServerMemory, error) {
	if smt.Edges.namedMemory == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := smt.Edges.namedMemory[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (smt *ServerMemoryType) appendNamedMemory(name string, edges ...*ServerMemory) {
	if smt.Edges.namedMemory == nil {
		smt.Edges.namedMemory = make(map[string][]*ServerMemory)
	}
	if len(edges) == 0 {
		smt.Edges.namedMemory[name] = []*ServerMemory{}
	} else {
		smt.Edges.namedMemory[name] = append(smt.Edges.namedMemory[name], edges...)
	}
}

// ServerMemoryTypes is a parsable slice of ServerMemoryType.
type ServerMemoryTypes []*ServerMemoryType
