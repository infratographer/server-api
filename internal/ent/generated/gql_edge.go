// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package generated

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (pr *Provider) Servers(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy *ServerOrder, where *ServerWhereInput,
) (*ServerConnection, error) {
	opts := []ServerPaginateOption{
		WithServerOrder(orderBy),
		WithServerFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := pr.Edges.totalCount[0][alias]
	if nodes, err := pr.NamedServers(alias); err == nil || hasTotalCount {
		pager, err := newServerPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ServerConnection{Edges: []*ServerEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return pr.QueryServers().Paginate(ctx, after, first, before, last, opts...)
}

func (s *Server) Provider(ctx context.Context) (*Provider, error) {
	result, err := s.Edges.ProviderOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryProvider().Only(ctx)
	}
	return result, err
}

func (s *Server) ServerType(ctx context.Context) (*ServerType, error) {
	result, err := s.Edges.ServerTypeOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryServerType().Only(ctx)
	}
	return result, err
}

func (s *Server) Components(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy *ServerComponentOrder, where *ServerComponentWhereInput,
) (*ServerComponentConnection, error) {
	opts := []ServerComponentPaginateOption{
		WithServerComponentOrder(orderBy),
		WithServerComponentFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := s.Edges.totalCount[2][alias]
	if nodes, err := s.NamedComponents(alias); err == nil || hasTotalCount {
		pager, err := newServerComponentPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ServerComponentConnection{Edges: []*ServerComponentEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return s.QueryComponents().Paginate(ctx, after, first, before, last, opts...)
}

func (sc *ServerComponent) ComponentType(ctx context.Context) (*ServerComponentType, error) {
	result, err := sc.Edges.ComponentTypeOrErr()
	if IsNotLoaded(err) {
		result, err = sc.QueryComponentType().Only(ctx)
	}
	return result, err
}

func (sc *ServerComponent) Server(ctx context.Context) (*Server, error) {
	result, err := sc.Edges.ServerOrErr()
	if IsNotLoaded(err) {
		result, err = sc.QueryServer().Only(ctx)
	}
	return result, err
}

func (st *ServerType) Servers(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy *ServerOrder, where *ServerWhereInput,
) (*ServerConnection, error) {
	opts := []ServerPaginateOption{
		WithServerOrder(orderBy),
		WithServerFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := st.Edges.totalCount[0][alias]
	if nodes, err := st.NamedServers(alias); err == nil || hasTotalCount {
		pager, err := newServerPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ServerConnection{Edges: []*ServerEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return st.QueryServers().Paginate(ctx, after, first, before, last, opts...)
}
