// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"go.infratographer.com/server-api/internal/ent/generated/serverattribute"
	"go.infratographer.com/x/gidx"
)

// ServerAttributeCreate is the builder for creating a ServerAttribute entity.
type ServerAttributeCreate struct {
	config
	mutation *ServerAttributeMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (sac *ServerAttributeCreate) SetCreatedAt(t time.Time) *ServerAttributeCreate {
	sac.mutation.SetCreatedAt(t)
	return sac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sac *ServerAttributeCreate) SetNillableCreatedAt(t *time.Time) *ServerAttributeCreate {
	if t != nil {
		sac.SetCreatedAt(*t)
	}
	return sac
}

// SetUpdatedAt sets the "updated_at" field.
func (sac *ServerAttributeCreate) SetUpdatedAt(t time.Time) *ServerAttributeCreate {
	sac.mutation.SetUpdatedAt(t)
	return sac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sac *ServerAttributeCreate) SetNillableUpdatedAt(t *time.Time) *ServerAttributeCreate {
	if t != nil {
		sac.SetUpdatedAt(*t)
	}
	return sac
}

// SetName sets the "name" field.
func (sac *ServerAttributeCreate) SetName(s string) *ServerAttributeCreate {
	sac.mutation.SetName(s)
	return sac
}

// SetServerID sets the "server_id" field.
func (sac *ServerAttributeCreate) SetServerID(gi gidx.PrefixedID) *ServerAttributeCreate {
	sac.mutation.SetServerID(gi)
	return sac
}

// SetID sets the "id" field.
func (sac *ServerAttributeCreate) SetID(gi gidx.PrefixedID) *ServerAttributeCreate {
	sac.mutation.SetID(gi)
	return sac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sac *ServerAttributeCreate) SetNillableID(gi *gidx.PrefixedID) *ServerAttributeCreate {
	if gi != nil {
		sac.SetID(*gi)
	}
	return sac
}

// Mutation returns the ServerAttributeMutation object of the builder.
func (sac *ServerAttributeCreate) Mutation() *ServerAttributeMutation {
	return sac.mutation
}

// Save creates the ServerAttribute in the database.
func (sac *ServerAttributeCreate) Save(ctx context.Context) (*ServerAttribute, error) {
	sac.defaults()
	return withHooks(ctx, sac.sqlSave, sac.mutation, sac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sac *ServerAttributeCreate) SaveX(ctx context.Context) *ServerAttribute {
	v, err := sac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sac *ServerAttributeCreate) Exec(ctx context.Context) error {
	_, err := sac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sac *ServerAttributeCreate) ExecX(ctx context.Context) {
	if err := sac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sac *ServerAttributeCreate) defaults() {
	if _, ok := sac.mutation.CreatedAt(); !ok {
		v := serverattribute.DefaultCreatedAt()
		sac.mutation.SetCreatedAt(v)
	}
	if _, ok := sac.mutation.UpdatedAt(); !ok {
		v := serverattribute.DefaultUpdatedAt()
		sac.mutation.SetUpdatedAt(v)
	}
	if _, ok := sac.mutation.ID(); !ok {
		v := serverattribute.DefaultID()
		sac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sac *ServerAttributeCreate) check() error {
	if _, ok := sac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "ServerAttribute.created_at"`)}
	}
	if _, ok := sac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "ServerAttribute.updated_at"`)}
	}
	if _, ok := sac.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`generated: missing required field "ServerAttribute.name"`)}
	}
	if v, ok := sac.mutation.Name(); ok {
		if err := serverattribute.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "ServerAttribute.name": %w`, err)}
		}
	}
	if _, ok := sac.mutation.ServerID(); !ok {
		return &ValidationError{Name: "server_id", err: errors.New(`generated: missing required field "ServerAttribute.server_id"`)}
	}
	if v, ok := sac.mutation.ServerID(); ok {
		if err := serverattribute.ServerIDValidator(string(v)); err != nil {
			return &ValidationError{Name: "server_id", err: fmt.Errorf(`generated: validator failed for field "ServerAttribute.server_id": %w`, err)}
		}
	}
	return nil
}

func (sac *ServerAttributeCreate) sqlSave(ctx context.Context) (*ServerAttribute, error) {
	if err := sac.check(); err != nil {
		return nil, err
	}
	_node, _spec := sac.createSpec()
	if err := sqlgraph.CreateNode(ctx, sac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*gidx.PrefixedID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	sac.mutation.id = &_node.ID
	sac.mutation.done = true
	return _node, nil
}

func (sac *ServerAttributeCreate) createSpec() (*ServerAttribute, *sqlgraph.CreateSpec) {
	var (
		_node = &ServerAttribute{config: sac.config}
		_spec = sqlgraph.NewCreateSpec(serverattribute.Table, sqlgraph.NewFieldSpec(serverattribute.FieldID, field.TypeString))
	)
	if id, ok := sac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := sac.mutation.CreatedAt(); ok {
		_spec.SetField(serverattribute.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sac.mutation.UpdatedAt(); ok {
		_spec.SetField(serverattribute.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := sac.mutation.Name(); ok {
		_spec.SetField(serverattribute.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := sac.mutation.ServerID(); ok {
		_spec.SetField(serverattribute.FieldServerID, field.TypeString, value)
		_node.ServerID = value
	}
	return _node, _spec
}

// ServerAttributeCreateBulk is the builder for creating many ServerAttribute entities in bulk.
type ServerAttributeCreateBulk struct {
	config
	builders []*ServerAttributeCreate
}

// Save creates the ServerAttribute entities in the database.
func (sacb *ServerAttributeCreateBulk) Save(ctx context.Context) ([]*ServerAttribute, error) {
	specs := make([]*sqlgraph.CreateSpec, len(sacb.builders))
	nodes := make([]*ServerAttribute, len(sacb.builders))
	mutators := make([]Mutator, len(sacb.builders))
	for i := range sacb.builders {
		func(i int, root context.Context) {
			builder := sacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ServerAttributeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sacb *ServerAttributeCreateBulk) SaveX(ctx context.Context) []*ServerAttribute {
	v, err := sacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sacb *ServerAttributeCreateBulk) Exec(ctx context.Context) error {
	_, err := sacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sacb *ServerAttributeCreateBulk) ExecX(ctx context.Context) {
	if err := sacb.Exec(ctx); err != nil {
		panic(err)
	}
}
