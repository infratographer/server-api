// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"io"
	"strconv"

	"entgo.io/contrib/entgql"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/errcode"
	"github.com/vektah/gqlparser/v2/gqlerror"
	"go.infratographer.com/server-api/internal/ent/generated/provider"
	"go.infratographer.com/server-api/internal/ent/generated/server"
	"go.infratographer.com/server-api/internal/ent/generated/serverchassis"
	"go.infratographer.com/server-api/internal/ent/generated/serverchassistype"
	"go.infratographer.com/server-api/internal/ent/generated/servercomponent"
	"go.infratographer.com/server-api/internal/ent/generated/servercomponenttype"
	"go.infratographer.com/server-api/internal/ent/generated/servercpu"
	"go.infratographer.com/server-api/internal/ent/generated/servercputype"
	"go.infratographer.com/server-api/internal/ent/generated/serverharddrive"
	"go.infratographer.com/server-api/internal/ent/generated/serverharddrivetype"
	"go.infratographer.com/server-api/internal/ent/generated/servermemory"
	"go.infratographer.com/server-api/internal/ent/generated/servermemorytype"
	"go.infratographer.com/server-api/internal/ent/generated/servermotherboard"
	"go.infratographer.com/server-api/internal/ent/generated/servermotherboardtype"
	"go.infratographer.com/server-api/internal/ent/generated/serverpowersupply"
	"go.infratographer.com/server-api/internal/ent/generated/serverpowersupplytype"
	"go.infratographer.com/server-api/internal/ent/generated/servertype"
	"go.infratographer.com/x/gidx"
)

// Common entgql types.
type (
	Cursor         = entgql.Cursor[gidx.PrefixedID]
	PageInfo       = entgql.PageInfo[gidx.PrefixedID]
	OrderDirection = entgql.OrderDirection
)

func orderFunc(o OrderDirection, field string) func(*sql.Selector) {
	if o == entgql.OrderDirectionDesc {
		return Desc(field)
	}
	return Asc(field)
}

const errInvalidPagination = "INVALID_PAGINATION"

func validateFirstLast(first, last *int) (err *gqlerror.Error) {
	switch {
	case first != nil && last != nil:
		err = &gqlerror.Error{
			Message: "Passing both `first` and `last` to paginate a connection is not supported.",
		}
	case first != nil && *first < 0:
		err = &gqlerror.Error{
			Message: "`first` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	case last != nil && *last < 0:
		err = &gqlerror.Error{
			Message: "`last` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	}
	return err
}

func collectedField(ctx context.Context, path ...string) *graphql.CollectedField {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	field := fc.Field
	oc := graphql.GetOperationContext(ctx)
walk:
	for _, name := range path {
		for _, f := range graphql.CollectFields(oc, field.Selections, nil) {
			if f.Alias == name {
				field = f
				continue walk
			}
		}
		return nil
	}
	return &field
}

func hasCollectedField(ctx context.Context, path ...string) bool {
	if graphql.GetFieldContext(ctx) == nil {
		return true
	}
	return collectedField(ctx, path...) != nil
}

const (
	edgesField      = "edges"
	nodeField       = "node"
	pageInfoField   = "pageInfo"
	totalCountField = "totalCount"
)

func paginateLimit(first, last *int) int {
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	return limit
}

// ServerProvider is the type alias for Provider.
type ServerProvider = Provider

// ServerProviderEdge is the edge representation of ServerProvider.
type ServerProviderEdge struct {
	Node   *ServerProvider `json:"node"`
	Cursor Cursor          `json:"cursor"`
}

// ServerProviderConnection is the connection containing edges to ServerProvider.
type ServerProviderConnection struct {
	Edges      []*ServerProviderEdge `json:"edges"`
	PageInfo   PageInfo              `json:"pageInfo"`
	TotalCount int                   `json:"totalCount"`
}

func (c *ServerProviderConnection) build(nodes []*ServerProvider, pager *serverproviderPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *ServerProvider
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *ServerProvider {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *ServerProvider {
			return nodes[i]
		}
	}
	c.Edges = make([]*ServerProviderEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &ServerProviderEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// ServerProviderPaginateOption enables pagination customization.
type ServerProviderPaginateOption func(*serverproviderPager) error

// WithServerProviderOrder configures pagination ordering.
func WithServerProviderOrder(order *ServerProviderOrder) ServerProviderPaginateOption {
	if order == nil {
		order = DefaultServerProviderOrder
	}
	o := *order
	return func(pager *serverproviderPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultServerProviderOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithServerProviderFilter configures pagination filter.
func WithServerProviderFilter(filter func(*ProviderQuery) (*ProviderQuery, error)) ServerProviderPaginateOption {
	return func(pager *serverproviderPager) error {
		if filter == nil {
			return errors.New("ProviderQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type serverproviderPager struct {
	reverse bool
	order   *ServerProviderOrder
	filter  func(*ProviderQuery) (*ProviderQuery, error)
}

func newServerProviderPager(opts []ServerProviderPaginateOption, reverse bool) (*serverproviderPager, error) {
	pager := &serverproviderPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultServerProviderOrder
	}
	return pager, nil
}

func (p *serverproviderPager) applyFilter(query *ProviderQuery) (*ProviderQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *serverproviderPager) toCursor(pr *ServerProvider) Cursor {
	return p.order.Field.toCursor(pr)
}

func (p *serverproviderPager) applyCursors(query *ProviderQuery, after, before *Cursor) (*ProviderQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultServerProviderOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *serverproviderPager) applyOrder(query *ProviderQuery) *ProviderQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultServerProviderOrder.Field {
		query = query.Order(DefaultServerProviderOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *serverproviderPager) orderExpr(query *ProviderQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultServerProviderOrder.Field {
			b.Comma().Ident(DefaultServerProviderOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to ServerProvider.
func (pr *ProviderQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ServerProviderPaginateOption,
) (*ServerProviderConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newServerProviderPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if pr, err = pager.applyFilter(pr); err != nil {
		return nil, err
	}
	conn := &ServerProviderConnection{Edges: []*ServerProviderEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = pr.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if pr, err = pager.applyCursors(pr, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		pr.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := pr.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	pr = pager.applyOrder(pr)
	nodes, err := pr.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// ProviderOrderFieldID orders Provider by id.
	ProviderOrderFieldID = &ServerProviderOrderField{
		Value: func(pr *ServerProvider) (ent.Value, error) {
			return pr.ID, nil
		},
		column: provider.FieldID,
		toTerm: provider.ByID,
		toCursor: func(pr *ServerProvider) Cursor {
			return Cursor{
				ID:    pr.ID,
				Value: pr.ID,
			}
		},
	}
	// ProviderOrderFieldCreatedAt orders Provider by created_at.
	ProviderOrderFieldCreatedAt = &ServerProviderOrderField{
		Value: func(pr *ServerProvider) (ent.Value, error) {
			return pr.CreatedAt, nil
		},
		column: provider.FieldCreatedAt,
		toTerm: provider.ByCreatedAt,
		toCursor: func(pr *ServerProvider) Cursor {
			return Cursor{
				ID:    pr.ID,
				Value: pr.CreatedAt,
			}
		},
	}
	// ProviderOrderFieldUpdatedAt orders Provider by updated_at.
	ProviderOrderFieldUpdatedAt = &ServerProviderOrderField{
		Value: func(pr *ServerProvider) (ent.Value, error) {
			return pr.UpdatedAt, nil
		},
		column: provider.FieldUpdatedAt,
		toTerm: provider.ByUpdatedAt,
		toCursor: func(pr *ServerProvider) Cursor {
			return Cursor{
				ID:    pr.ID,
				Value: pr.UpdatedAt,
			}
		},
	}
	// ProviderOrderFieldName orders Provider by name.
	ProviderOrderFieldName = &ServerProviderOrderField{
		Value: func(pr *ServerProvider) (ent.Value, error) {
			return pr.Name, nil
		},
		column: provider.FieldName,
		toTerm: provider.ByName,
		toCursor: func(pr *ServerProvider) Cursor {
			return Cursor{
				ID:    pr.ID,
				Value: pr.Name,
			}
		},
	}
	// ProviderOrderFieldResourceProviderID orders Provider by resource_provider_id.
	ProviderOrderFieldResourceProviderID = &ServerProviderOrderField{
		Value: func(pr *ServerProvider) (ent.Value, error) {
			return pr.ResourceProviderID, nil
		},
		column: provider.FieldResourceProviderID,
		toTerm: provider.ByResourceProviderID,
		toCursor: func(pr *ServerProvider) Cursor {
			return Cursor{
				ID:    pr.ID,
				Value: pr.ResourceProviderID,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f ServerProviderOrderField) String() string {
	var str string
	switch f.column {
	case ProviderOrderFieldID.column:
		str = "ID"
	case ProviderOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	case ProviderOrderFieldUpdatedAt.column:
		str = "UPDATED_AT"
	case ProviderOrderFieldName.column:
		str = "NAME"
	case ProviderOrderFieldResourceProviderID.column:
		str = "RESOURCE_PROVIDER"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f ServerProviderOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *ServerProviderOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("ServerProviderOrderField %T must be a string", v)
	}
	switch str {
	case "ID":
		*f = *ProviderOrderFieldID
	case "CREATED_AT":
		*f = *ProviderOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *ProviderOrderFieldUpdatedAt
	case "NAME":
		*f = *ProviderOrderFieldName
	case "RESOURCE_PROVIDER":
		*f = *ProviderOrderFieldResourceProviderID
	default:
		return fmt.Errorf("%s is not a valid ServerProviderOrderField", str)
	}
	return nil
}

// ServerProviderOrderField defines the ordering field of Provider.
type ServerProviderOrderField struct {
	// Value extracts the ordering value from the given Provider.
	Value    func(*ServerProvider) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) provider.OrderOption
	toCursor func(*ServerProvider) Cursor
}

// ServerProviderOrder defines the ordering of Provider.
type ServerProviderOrder struct {
	Direction OrderDirection            `json:"direction"`
	Field     *ServerProviderOrderField `json:"field"`
}

// DefaultServerProviderOrder is the default ordering of Provider.
var DefaultServerProviderOrder = &ServerProviderOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &ServerProviderOrderField{
		Value: func(pr *ServerProvider) (ent.Value, error) {
			return pr.ID, nil
		},
		column: provider.FieldID,
		toTerm: provider.ByID,
		toCursor: func(pr *ServerProvider) Cursor {
			return Cursor{ID: pr.ID}
		},
	},
}

// ToEdge converts ServerProvider into ServerProviderEdge.
func (pr *ServerProvider) ToEdge(order *ServerProviderOrder) *ServerProviderEdge {
	if order == nil {
		order = DefaultServerProviderOrder
	}
	return &ServerProviderEdge{
		Node:   pr,
		Cursor: order.Field.toCursor(pr),
	}
}

// ServerEdge is the edge representation of Server.
type ServerEdge struct {
	Node   *Server `json:"node"`
	Cursor Cursor  `json:"cursor"`
}

// ServerConnection is the connection containing edges to Server.
type ServerConnection struct {
	Edges      []*ServerEdge `json:"edges"`
	PageInfo   PageInfo      `json:"pageInfo"`
	TotalCount int           `json:"totalCount"`
}

func (c *ServerConnection) build(nodes []*Server, pager *serverPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Server
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Server {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Server {
			return nodes[i]
		}
	}
	c.Edges = make([]*ServerEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &ServerEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// ServerPaginateOption enables pagination customization.
type ServerPaginateOption func(*serverPager) error

// WithServerOrder configures pagination ordering.
func WithServerOrder(order *ServerOrder) ServerPaginateOption {
	if order == nil {
		order = DefaultServerOrder
	}
	o := *order
	return func(pager *serverPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultServerOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithServerFilter configures pagination filter.
func WithServerFilter(filter func(*ServerQuery) (*ServerQuery, error)) ServerPaginateOption {
	return func(pager *serverPager) error {
		if filter == nil {
			return errors.New("ServerQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type serverPager struct {
	reverse bool
	order   *ServerOrder
	filter  func(*ServerQuery) (*ServerQuery, error)
}

func newServerPager(opts []ServerPaginateOption, reverse bool) (*serverPager, error) {
	pager := &serverPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultServerOrder
	}
	return pager, nil
}

func (p *serverPager) applyFilter(query *ServerQuery) (*ServerQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *serverPager) toCursor(s *Server) Cursor {
	return p.order.Field.toCursor(s)
}

func (p *serverPager) applyCursors(query *ServerQuery, after, before *Cursor) (*ServerQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultServerOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *serverPager) applyOrder(query *ServerQuery) *ServerQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultServerOrder.Field {
		query = query.Order(DefaultServerOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *serverPager) orderExpr(query *ServerQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultServerOrder.Field {
			b.Comma().Ident(DefaultServerOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Server.
func (s *ServerQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ServerPaginateOption,
) (*ServerConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newServerPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if s, err = pager.applyFilter(s); err != nil {
		return nil, err
	}
	conn := &ServerConnection{Edges: []*ServerEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = s.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if s, err = pager.applyCursors(s, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		s.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := s.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	s = pager.applyOrder(s)
	nodes, err := s.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// ServerOrderFieldID orders Server by id.
	ServerOrderFieldID = &ServerOrderField{
		Value: func(s *Server) (ent.Value, error) {
			return s.ID, nil
		},
		column: server.FieldID,
		toTerm: server.ByID,
		toCursor: func(s *Server) Cursor {
			return Cursor{
				ID:    s.ID,
				Value: s.ID,
			}
		},
	}
	// ServerOrderFieldCreatedAt orders Server by created_at.
	ServerOrderFieldCreatedAt = &ServerOrderField{
		Value: func(s *Server) (ent.Value, error) {
			return s.CreatedAt, nil
		},
		column: server.FieldCreatedAt,
		toTerm: server.ByCreatedAt,
		toCursor: func(s *Server) Cursor {
			return Cursor{
				ID:    s.ID,
				Value: s.CreatedAt,
			}
		},
	}
	// ServerOrderFieldUpdatedAt orders Server by updated_at.
	ServerOrderFieldUpdatedAt = &ServerOrderField{
		Value: func(s *Server) (ent.Value, error) {
			return s.UpdatedAt, nil
		},
		column: server.FieldUpdatedAt,
		toTerm: server.ByUpdatedAt,
		toCursor: func(s *Server) Cursor {
			return Cursor{
				ID:    s.ID,
				Value: s.UpdatedAt,
			}
		},
	}
	// ServerOrderFieldName orders Server by name.
	ServerOrderFieldName = &ServerOrderField{
		Value: func(s *Server) (ent.Value, error) {
			return s.Name, nil
		},
		column: server.FieldName,
		toTerm: server.ByName,
		toCursor: func(s *Server) Cursor {
			return Cursor{
				ID:    s.ID,
				Value: s.Name,
			}
		},
	}
	// ServerOrderFieldDescription orders Server by description.
	ServerOrderFieldDescription = &ServerOrderField{
		Value: func(s *Server) (ent.Value, error) {
			return s.Description, nil
		},
		column: server.FieldDescription,
		toTerm: server.ByDescription,
		toCursor: func(s *Server) Cursor {
			return Cursor{
				ID:    s.ID,
				Value: s.Description,
			}
		},
	}
	// ServerOrderFieldOwnerID orders Server by owner_id.
	ServerOrderFieldOwnerID = &ServerOrderField{
		Value: func(s *Server) (ent.Value, error) {
			return s.OwnerID, nil
		},
		column: server.FieldOwnerID,
		toTerm: server.ByOwnerID,
		toCursor: func(s *Server) Cursor {
			return Cursor{
				ID:    s.ID,
				Value: s.OwnerID,
			}
		},
	}
	// ServerOrderFieldServerTypeID orders Server by server_type_id.
	ServerOrderFieldServerTypeID = &ServerOrderField{
		Value: func(s *Server) (ent.Value, error) {
			return s.ServerTypeID, nil
		},
		column: server.FieldServerTypeID,
		toTerm: server.ByServerTypeID,
		toCursor: func(s *Server) Cursor {
			return Cursor{
				ID:    s.ID,
				Value: s.ServerTypeID,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f ServerOrderField) String() string {
	var str string
	switch f.column {
	case ServerOrderFieldID.column:
		str = "ID"
	case ServerOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	case ServerOrderFieldUpdatedAt.column:
		str = "UPDATED_AT"
	case ServerOrderFieldName.column:
		str = "NAME"
	case ServerOrderFieldDescription.column:
		str = "DESCRIPTION"
	case ServerOrderFieldOwnerID.column:
		str = "OWNER"
	case ServerOrderFieldServerTypeID.column:
		str = "SERVER_TYPE"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f ServerOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *ServerOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("ServerOrderField %T must be a string", v)
	}
	switch str {
	case "ID":
		*f = *ServerOrderFieldID
	case "CREATED_AT":
		*f = *ServerOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *ServerOrderFieldUpdatedAt
	case "NAME":
		*f = *ServerOrderFieldName
	case "DESCRIPTION":
		*f = *ServerOrderFieldDescription
	case "OWNER":
		*f = *ServerOrderFieldOwnerID
	case "SERVER_TYPE":
		*f = *ServerOrderFieldServerTypeID
	default:
		return fmt.Errorf("%s is not a valid ServerOrderField", str)
	}
	return nil
}

// ServerOrderField defines the ordering field of Server.
type ServerOrderField struct {
	// Value extracts the ordering value from the given Server.
	Value    func(*Server) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) server.OrderOption
	toCursor func(*Server) Cursor
}

// ServerOrder defines the ordering of Server.
type ServerOrder struct {
	Direction OrderDirection    `json:"direction"`
	Field     *ServerOrderField `json:"field"`
}

// DefaultServerOrder is the default ordering of Server.
var DefaultServerOrder = &ServerOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &ServerOrderField{
		Value: func(s *Server) (ent.Value, error) {
			return s.ID, nil
		},
		column: server.FieldID,
		toTerm: server.ByID,
		toCursor: func(s *Server) Cursor {
			return Cursor{ID: s.ID}
		},
	},
}

// ToEdge converts Server into ServerEdge.
func (s *Server) ToEdge(order *ServerOrder) *ServerEdge {
	if order == nil {
		order = DefaultServerOrder
	}
	return &ServerEdge{
		Node:   s,
		Cursor: order.Field.toCursor(s),
	}
}

// ServerCPUEdge is the edge representation of ServerCPU.
type ServerCPUEdge struct {
	Node   *ServerCPU `json:"node"`
	Cursor Cursor     `json:"cursor"`
}

// ServerCPUConnection is the connection containing edges to ServerCPU.
type ServerCPUConnection struct {
	Edges      []*ServerCPUEdge `json:"edges"`
	PageInfo   PageInfo         `json:"pageInfo"`
	TotalCount int              `json:"totalCount"`
}

func (c *ServerCPUConnection) build(nodes []*ServerCPU, pager *servercpuPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *ServerCPU
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *ServerCPU {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *ServerCPU {
			return nodes[i]
		}
	}
	c.Edges = make([]*ServerCPUEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &ServerCPUEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// ServerCPUPaginateOption enables pagination customization.
type ServerCPUPaginateOption func(*servercpuPager) error

// WithServerCPUOrder configures pagination ordering.
func WithServerCPUOrder(order *ServerCPUOrder) ServerCPUPaginateOption {
	if order == nil {
		order = DefaultServerCPUOrder
	}
	o := *order
	return func(pager *servercpuPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultServerCPUOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithServerCPUFilter configures pagination filter.
func WithServerCPUFilter(filter func(*ServerCPUQuery) (*ServerCPUQuery, error)) ServerCPUPaginateOption {
	return func(pager *servercpuPager) error {
		if filter == nil {
			return errors.New("ServerCPUQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type servercpuPager struct {
	reverse bool
	order   *ServerCPUOrder
	filter  func(*ServerCPUQuery) (*ServerCPUQuery, error)
}

func newServerCPUPager(opts []ServerCPUPaginateOption, reverse bool) (*servercpuPager, error) {
	pager := &servercpuPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultServerCPUOrder
	}
	return pager, nil
}

func (p *servercpuPager) applyFilter(query *ServerCPUQuery) (*ServerCPUQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *servercpuPager) toCursor(sc *ServerCPU) Cursor {
	return p.order.Field.toCursor(sc)
}

func (p *servercpuPager) applyCursors(query *ServerCPUQuery, after, before *Cursor) (*ServerCPUQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultServerCPUOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *servercpuPager) applyOrder(query *ServerCPUQuery) *ServerCPUQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultServerCPUOrder.Field {
		query = query.Order(DefaultServerCPUOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *servercpuPager) orderExpr(query *ServerCPUQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultServerCPUOrder.Field {
			b.Comma().Ident(DefaultServerCPUOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to ServerCPU.
func (sc *ServerCPUQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ServerCPUPaginateOption,
) (*ServerCPUConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newServerCPUPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if sc, err = pager.applyFilter(sc); err != nil {
		return nil, err
	}
	conn := &ServerCPUConnection{Edges: []*ServerCPUEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = sc.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if sc, err = pager.applyCursors(sc, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		sc.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := sc.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	sc = pager.applyOrder(sc)
	nodes, err := sc.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// ServerCPUOrderFieldID orders ServerCPU by id.
	ServerCPUOrderFieldID = &ServerCPUOrderField{
		Value: func(sc *ServerCPU) (ent.Value, error) {
			return sc.ID, nil
		},
		column: servercpu.FieldID,
		toTerm: servercpu.ByID,
		toCursor: func(sc *ServerCPU) Cursor {
			return Cursor{
				ID:    sc.ID,
				Value: sc.ID,
			}
		},
	}
	// ServerCPUOrderFieldCreatedAt orders ServerCPU by created_at.
	ServerCPUOrderFieldCreatedAt = &ServerCPUOrderField{
		Value: func(sc *ServerCPU) (ent.Value, error) {
			return sc.CreatedAt, nil
		},
		column: servercpu.FieldCreatedAt,
		toTerm: servercpu.ByCreatedAt,
		toCursor: func(sc *ServerCPU) Cursor {
			return Cursor{
				ID:    sc.ID,
				Value: sc.CreatedAt,
			}
		},
	}
	// ServerCPUOrderFieldUpdatedAt orders ServerCPU by updated_at.
	ServerCPUOrderFieldUpdatedAt = &ServerCPUOrderField{
		Value: func(sc *ServerCPU) (ent.Value, error) {
			return sc.UpdatedAt, nil
		},
		column: servercpu.FieldUpdatedAt,
		toTerm: servercpu.ByUpdatedAt,
		toCursor: func(sc *ServerCPU) Cursor {
			return Cursor{
				ID:    sc.ID,
				Value: sc.UpdatedAt,
			}
		},
	}
	// ServerCPUOrderFieldServerCPUTypeID orders ServerCPU by server_cpu_type_id.
	ServerCPUOrderFieldServerCPUTypeID = &ServerCPUOrderField{
		Value: func(sc *ServerCPU) (ent.Value, error) {
			return sc.ServerCPUTypeID, nil
		},
		column: servercpu.FieldServerCPUTypeID,
		toTerm: servercpu.ByServerCPUTypeID,
		toCursor: func(sc *ServerCPU) Cursor {
			return Cursor{
				ID:    sc.ID,
				Value: sc.ServerCPUTypeID,
			}
		},
	}
	// ServerCPUOrderFieldServerID orders ServerCPU by server_id.
	ServerCPUOrderFieldServerID = &ServerCPUOrderField{
		Value: func(sc *ServerCPU) (ent.Value, error) {
			return sc.ServerID, nil
		},
		column: servercpu.FieldServerID,
		toTerm: servercpu.ByServerID,
		toCursor: func(sc *ServerCPU) Cursor {
			return Cursor{
				ID:    sc.ID,
				Value: sc.ServerID,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f ServerCPUOrderField) String() string {
	var str string
	switch f.column {
	case ServerCPUOrderFieldID.column:
		str = "ID"
	case ServerCPUOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	case ServerCPUOrderFieldUpdatedAt.column:
		str = "UPDATED_AT"
	case ServerCPUOrderFieldServerCPUTypeID.column:
		str = "SERVER_CPU_TYPE"
	case ServerCPUOrderFieldServerID.column:
		str = "SERVER"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f ServerCPUOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *ServerCPUOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("ServerCPUOrderField %T must be a string", v)
	}
	switch str {
	case "ID":
		*f = *ServerCPUOrderFieldID
	case "CREATED_AT":
		*f = *ServerCPUOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *ServerCPUOrderFieldUpdatedAt
	case "SERVER_CPU_TYPE":
		*f = *ServerCPUOrderFieldServerCPUTypeID
	case "SERVER":
		*f = *ServerCPUOrderFieldServerID
	default:
		return fmt.Errorf("%s is not a valid ServerCPUOrderField", str)
	}
	return nil
}

// ServerCPUOrderField defines the ordering field of ServerCPU.
type ServerCPUOrderField struct {
	// Value extracts the ordering value from the given ServerCPU.
	Value    func(*ServerCPU) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) servercpu.OrderOption
	toCursor func(*ServerCPU) Cursor
}

// ServerCPUOrder defines the ordering of ServerCPU.
type ServerCPUOrder struct {
	Direction OrderDirection       `json:"direction"`
	Field     *ServerCPUOrderField `json:"field"`
}

// DefaultServerCPUOrder is the default ordering of ServerCPU.
var DefaultServerCPUOrder = &ServerCPUOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &ServerCPUOrderField{
		Value: func(sc *ServerCPU) (ent.Value, error) {
			return sc.ID, nil
		},
		column: servercpu.FieldID,
		toTerm: servercpu.ByID,
		toCursor: func(sc *ServerCPU) Cursor {
			return Cursor{ID: sc.ID}
		},
	},
}

// ToEdge converts ServerCPU into ServerCPUEdge.
func (sc *ServerCPU) ToEdge(order *ServerCPUOrder) *ServerCPUEdge {
	if order == nil {
		order = DefaultServerCPUOrder
	}
	return &ServerCPUEdge{
		Node:   sc,
		Cursor: order.Field.toCursor(sc),
	}
}

// ServerCPUTypeEdge is the edge representation of ServerCPUType.
type ServerCPUTypeEdge struct {
	Node   *ServerCPUType `json:"node"`
	Cursor Cursor         `json:"cursor"`
}

// ServerCPUTypeConnection is the connection containing edges to ServerCPUType.
type ServerCPUTypeConnection struct {
	Edges      []*ServerCPUTypeEdge `json:"edges"`
	PageInfo   PageInfo             `json:"pageInfo"`
	TotalCount int                  `json:"totalCount"`
}

func (c *ServerCPUTypeConnection) build(nodes []*ServerCPUType, pager *servercputypePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *ServerCPUType
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *ServerCPUType {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *ServerCPUType {
			return nodes[i]
		}
	}
	c.Edges = make([]*ServerCPUTypeEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &ServerCPUTypeEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// ServerCPUTypePaginateOption enables pagination customization.
type ServerCPUTypePaginateOption func(*servercputypePager) error

// WithServerCPUTypeOrder configures pagination ordering.
func WithServerCPUTypeOrder(order *ServerCPUTypeOrder) ServerCPUTypePaginateOption {
	if order == nil {
		order = DefaultServerCPUTypeOrder
	}
	o := *order
	return func(pager *servercputypePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultServerCPUTypeOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithServerCPUTypeFilter configures pagination filter.
func WithServerCPUTypeFilter(filter func(*ServerCPUTypeQuery) (*ServerCPUTypeQuery, error)) ServerCPUTypePaginateOption {
	return func(pager *servercputypePager) error {
		if filter == nil {
			return errors.New("ServerCPUTypeQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type servercputypePager struct {
	reverse bool
	order   *ServerCPUTypeOrder
	filter  func(*ServerCPUTypeQuery) (*ServerCPUTypeQuery, error)
}

func newServerCPUTypePager(opts []ServerCPUTypePaginateOption, reverse bool) (*servercputypePager, error) {
	pager := &servercputypePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultServerCPUTypeOrder
	}
	return pager, nil
}

func (p *servercputypePager) applyFilter(query *ServerCPUTypeQuery) (*ServerCPUTypeQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *servercputypePager) toCursor(sct *ServerCPUType) Cursor {
	return p.order.Field.toCursor(sct)
}

func (p *servercputypePager) applyCursors(query *ServerCPUTypeQuery, after, before *Cursor) (*ServerCPUTypeQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultServerCPUTypeOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *servercputypePager) applyOrder(query *ServerCPUTypeQuery) *ServerCPUTypeQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultServerCPUTypeOrder.Field {
		query = query.Order(DefaultServerCPUTypeOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *servercputypePager) orderExpr(query *ServerCPUTypeQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultServerCPUTypeOrder.Field {
			b.Comma().Ident(DefaultServerCPUTypeOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to ServerCPUType.
func (sct *ServerCPUTypeQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ServerCPUTypePaginateOption,
) (*ServerCPUTypeConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newServerCPUTypePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if sct, err = pager.applyFilter(sct); err != nil {
		return nil, err
	}
	conn := &ServerCPUTypeConnection{Edges: []*ServerCPUTypeEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = sct.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if sct, err = pager.applyCursors(sct, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		sct.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := sct.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	sct = pager.applyOrder(sct)
	nodes, err := sct.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// ServerCPUTypeOrderFieldID orders ServerCPUType by id.
	ServerCPUTypeOrderFieldID = &ServerCPUTypeOrderField{
		Value: func(sct *ServerCPUType) (ent.Value, error) {
			return sct.ID, nil
		},
		column: servercputype.FieldID,
		toTerm: servercputype.ByID,
		toCursor: func(sct *ServerCPUType) Cursor {
			return Cursor{
				ID:    sct.ID,
				Value: sct.ID,
			}
		},
	}
	// ServerCPUTypeOrderFieldCreatedAt orders ServerCPUType by created_at.
	ServerCPUTypeOrderFieldCreatedAt = &ServerCPUTypeOrderField{
		Value: func(sct *ServerCPUType) (ent.Value, error) {
			return sct.CreatedAt, nil
		},
		column: servercputype.FieldCreatedAt,
		toTerm: servercputype.ByCreatedAt,
		toCursor: func(sct *ServerCPUType) Cursor {
			return Cursor{
				ID:    sct.ID,
				Value: sct.CreatedAt,
			}
		},
	}
	// ServerCPUTypeOrderFieldUpdatedAt orders ServerCPUType by updated_at.
	ServerCPUTypeOrderFieldUpdatedAt = &ServerCPUTypeOrderField{
		Value: func(sct *ServerCPUType) (ent.Value, error) {
			return sct.UpdatedAt, nil
		},
		column: servercputype.FieldUpdatedAt,
		toTerm: servercputype.ByUpdatedAt,
		toCursor: func(sct *ServerCPUType) Cursor {
			return Cursor{
				ID:    sct.ID,
				Value: sct.UpdatedAt,
			}
		},
	}
	// ServerCPUTypeOrderFieldVendor orders ServerCPUType by vendor.
	ServerCPUTypeOrderFieldVendor = &ServerCPUTypeOrderField{
		Value: func(sct *ServerCPUType) (ent.Value, error) {
			return sct.Vendor, nil
		},
		column: servercputype.FieldVendor,
		toTerm: servercputype.ByVendor,
		toCursor: func(sct *ServerCPUType) Cursor {
			return Cursor{
				ID:    sct.ID,
				Value: sct.Vendor,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f ServerCPUTypeOrderField) String() string {
	var str string
	switch f.column {
	case ServerCPUTypeOrderFieldID.column:
		str = "ID"
	case ServerCPUTypeOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	case ServerCPUTypeOrderFieldUpdatedAt.column:
		str = "UPDATED_AT"
	case ServerCPUTypeOrderFieldVendor.column:
		str = "NAME"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f ServerCPUTypeOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *ServerCPUTypeOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("ServerCPUTypeOrderField %T must be a string", v)
	}
	switch str {
	case "ID":
		*f = *ServerCPUTypeOrderFieldID
	case "CREATED_AT":
		*f = *ServerCPUTypeOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *ServerCPUTypeOrderFieldUpdatedAt
	case "NAME":
		*f = *ServerCPUTypeOrderFieldVendor
	default:
		return fmt.Errorf("%s is not a valid ServerCPUTypeOrderField", str)
	}
	return nil
}

// ServerCPUTypeOrderField defines the ordering field of ServerCPUType.
type ServerCPUTypeOrderField struct {
	// Value extracts the ordering value from the given ServerCPUType.
	Value    func(*ServerCPUType) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) servercputype.OrderOption
	toCursor func(*ServerCPUType) Cursor
}

// ServerCPUTypeOrder defines the ordering of ServerCPUType.
type ServerCPUTypeOrder struct {
	Direction OrderDirection           `json:"direction"`
	Field     *ServerCPUTypeOrderField `json:"field"`
}

// DefaultServerCPUTypeOrder is the default ordering of ServerCPUType.
var DefaultServerCPUTypeOrder = &ServerCPUTypeOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &ServerCPUTypeOrderField{
		Value: func(sct *ServerCPUType) (ent.Value, error) {
			return sct.ID, nil
		},
		column: servercputype.FieldID,
		toTerm: servercputype.ByID,
		toCursor: func(sct *ServerCPUType) Cursor {
			return Cursor{ID: sct.ID}
		},
	},
}

// ToEdge converts ServerCPUType into ServerCPUTypeEdge.
func (sct *ServerCPUType) ToEdge(order *ServerCPUTypeOrder) *ServerCPUTypeEdge {
	if order == nil {
		order = DefaultServerCPUTypeOrder
	}
	return &ServerCPUTypeEdge{
		Node:   sct,
		Cursor: order.Field.toCursor(sct),
	}
}

// ServerChassisEdge is the edge representation of ServerChassis.
type ServerChassisEdge struct {
	Node   *ServerChassis `json:"node"`
	Cursor Cursor         `json:"cursor"`
}

// ServerChassisConnection is the connection containing edges to ServerChassis.
type ServerChassisConnection struct {
	Edges      []*ServerChassisEdge `json:"edges"`
	PageInfo   PageInfo             `json:"pageInfo"`
	TotalCount int                  `json:"totalCount"`
}

func (c *ServerChassisConnection) build(nodes []*ServerChassis, pager *serverchassisPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *ServerChassis
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *ServerChassis {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *ServerChassis {
			return nodes[i]
		}
	}
	c.Edges = make([]*ServerChassisEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &ServerChassisEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// ServerChassisPaginateOption enables pagination customization.
type ServerChassisPaginateOption func(*serverchassisPager) error

// WithServerChassisOrder configures pagination ordering.
func WithServerChassisOrder(order *ServerChassisOrder) ServerChassisPaginateOption {
	if order == nil {
		order = DefaultServerChassisOrder
	}
	o := *order
	return func(pager *serverchassisPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultServerChassisOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithServerChassisFilter configures pagination filter.
func WithServerChassisFilter(filter func(*ServerChassisQuery) (*ServerChassisQuery, error)) ServerChassisPaginateOption {
	return func(pager *serverchassisPager) error {
		if filter == nil {
			return errors.New("ServerChassisQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type serverchassisPager struct {
	reverse bool
	order   *ServerChassisOrder
	filter  func(*ServerChassisQuery) (*ServerChassisQuery, error)
}

func newServerChassisPager(opts []ServerChassisPaginateOption, reverse bool) (*serverchassisPager, error) {
	pager := &serverchassisPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultServerChassisOrder
	}
	return pager, nil
}

func (p *serverchassisPager) applyFilter(query *ServerChassisQuery) (*ServerChassisQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *serverchassisPager) toCursor(sc *ServerChassis) Cursor {
	return p.order.Field.toCursor(sc)
}

func (p *serverchassisPager) applyCursors(query *ServerChassisQuery, after, before *Cursor) (*ServerChassisQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultServerChassisOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *serverchassisPager) applyOrder(query *ServerChassisQuery) *ServerChassisQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultServerChassisOrder.Field {
		query = query.Order(DefaultServerChassisOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *serverchassisPager) orderExpr(query *ServerChassisQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultServerChassisOrder.Field {
			b.Comma().Ident(DefaultServerChassisOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to ServerChassis.
func (sc *ServerChassisQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ServerChassisPaginateOption,
) (*ServerChassisConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newServerChassisPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if sc, err = pager.applyFilter(sc); err != nil {
		return nil, err
	}
	conn := &ServerChassisConnection{Edges: []*ServerChassisEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = sc.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if sc, err = pager.applyCursors(sc, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		sc.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := sc.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	sc = pager.applyOrder(sc)
	nodes, err := sc.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// ServerChassisOrderFieldID orders ServerChassis by id.
	ServerChassisOrderFieldID = &ServerChassisOrderField{
		Value: func(sc *ServerChassis) (ent.Value, error) {
			return sc.ID, nil
		},
		column: serverchassis.FieldID,
		toTerm: serverchassis.ByID,
		toCursor: func(sc *ServerChassis) Cursor {
			return Cursor{
				ID:    sc.ID,
				Value: sc.ID,
			}
		},
	}
	// ServerChassisOrderFieldCreatedAt orders ServerChassis by created_at.
	ServerChassisOrderFieldCreatedAt = &ServerChassisOrderField{
		Value: func(sc *ServerChassis) (ent.Value, error) {
			return sc.CreatedAt, nil
		},
		column: serverchassis.FieldCreatedAt,
		toTerm: serverchassis.ByCreatedAt,
		toCursor: func(sc *ServerChassis) Cursor {
			return Cursor{
				ID:    sc.ID,
				Value: sc.CreatedAt,
			}
		},
	}
	// ServerChassisOrderFieldUpdatedAt orders ServerChassis by updated_at.
	ServerChassisOrderFieldUpdatedAt = &ServerChassisOrderField{
		Value: func(sc *ServerChassis) (ent.Value, error) {
			return sc.UpdatedAt, nil
		},
		column: serverchassis.FieldUpdatedAt,
		toTerm: serverchassis.ByUpdatedAt,
		toCursor: func(sc *ServerChassis) Cursor {
			return Cursor{
				ID:    sc.ID,
				Value: sc.UpdatedAt,
			}
		},
	}
	// ServerChassisOrderFieldServerChassisTypeID orders ServerChassis by server_chassis_type_id.
	ServerChassisOrderFieldServerChassisTypeID = &ServerChassisOrderField{
		Value: func(sc *ServerChassis) (ent.Value, error) {
			return sc.ServerChassisTypeID, nil
		},
		column: serverchassis.FieldServerChassisTypeID,
		toTerm: serverchassis.ByServerChassisTypeID,
		toCursor: func(sc *ServerChassis) Cursor {
			return Cursor{
				ID:    sc.ID,
				Value: sc.ServerChassisTypeID,
			}
		},
	}
	// ServerChassisOrderFieldParentChassisID orders ServerChassis by parent_chassis_id.
	ServerChassisOrderFieldParentChassisID = &ServerChassisOrderField{
		Value: func(sc *ServerChassis) (ent.Value, error) {
			return sc.ParentChassisID, nil
		},
		column: serverchassis.FieldParentChassisID,
		toTerm: serverchassis.ByParentChassisID,
		toCursor: func(sc *ServerChassis) Cursor {
			return Cursor{
				ID:    sc.ID,
				Value: sc.ParentChassisID,
			}
		},
	}
	// ServerChassisOrderFieldServerID orders ServerChassis by server_id.
	ServerChassisOrderFieldServerID = &ServerChassisOrderField{
		Value: func(sc *ServerChassis) (ent.Value, error) {
			return sc.ServerID, nil
		},
		column: serverchassis.FieldServerID,
		toTerm: serverchassis.ByServerID,
		toCursor: func(sc *ServerChassis) Cursor {
			return Cursor{
				ID:    sc.ID,
				Value: sc.ServerID,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f ServerChassisOrderField) String() string {
	var str string
	switch f.column {
	case ServerChassisOrderFieldID.column:
		str = "ID"
	case ServerChassisOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	case ServerChassisOrderFieldUpdatedAt.column:
		str = "UPDATED_AT"
	case ServerChassisOrderFieldServerChassisTypeID.column:
		str = "SERVER_CHASSIS_TYPE"
	case ServerChassisOrderFieldParentChassisID.column:
		str = "PARENT_CHASSIS"
	case ServerChassisOrderFieldServerID.column:
		str = "SERVER"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f ServerChassisOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *ServerChassisOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("ServerChassisOrderField %T must be a string", v)
	}
	switch str {
	case "ID":
		*f = *ServerChassisOrderFieldID
	case "CREATED_AT":
		*f = *ServerChassisOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *ServerChassisOrderFieldUpdatedAt
	case "SERVER_CHASSIS_TYPE":
		*f = *ServerChassisOrderFieldServerChassisTypeID
	case "PARENT_CHASSIS":
		*f = *ServerChassisOrderFieldParentChassisID
	case "SERVER":
		*f = *ServerChassisOrderFieldServerID
	default:
		return fmt.Errorf("%s is not a valid ServerChassisOrderField", str)
	}
	return nil
}

// ServerChassisOrderField defines the ordering field of ServerChassis.
type ServerChassisOrderField struct {
	// Value extracts the ordering value from the given ServerChassis.
	Value    func(*ServerChassis) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) serverchassis.OrderOption
	toCursor func(*ServerChassis) Cursor
}

// ServerChassisOrder defines the ordering of ServerChassis.
type ServerChassisOrder struct {
	Direction OrderDirection           `json:"direction"`
	Field     *ServerChassisOrderField `json:"field"`
}

// DefaultServerChassisOrder is the default ordering of ServerChassis.
var DefaultServerChassisOrder = &ServerChassisOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &ServerChassisOrderField{
		Value: func(sc *ServerChassis) (ent.Value, error) {
			return sc.ID, nil
		},
		column: serverchassis.FieldID,
		toTerm: serverchassis.ByID,
		toCursor: func(sc *ServerChassis) Cursor {
			return Cursor{ID: sc.ID}
		},
	},
}

// ToEdge converts ServerChassis into ServerChassisEdge.
func (sc *ServerChassis) ToEdge(order *ServerChassisOrder) *ServerChassisEdge {
	if order == nil {
		order = DefaultServerChassisOrder
	}
	return &ServerChassisEdge{
		Node:   sc,
		Cursor: order.Field.toCursor(sc),
	}
}

// ServerChassisTypeEdge is the edge representation of ServerChassisType.
type ServerChassisTypeEdge struct {
	Node   *ServerChassisType `json:"node"`
	Cursor Cursor             `json:"cursor"`
}

// ServerChassisTypeConnection is the connection containing edges to ServerChassisType.
type ServerChassisTypeConnection struct {
	Edges      []*ServerChassisTypeEdge `json:"edges"`
	PageInfo   PageInfo                 `json:"pageInfo"`
	TotalCount int                      `json:"totalCount"`
}

func (c *ServerChassisTypeConnection) build(nodes []*ServerChassisType, pager *serverchassistypePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *ServerChassisType
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *ServerChassisType {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *ServerChassisType {
			return nodes[i]
		}
	}
	c.Edges = make([]*ServerChassisTypeEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &ServerChassisTypeEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// ServerChassisTypePaginateOption enables pagination customization.
type ServerChassisTypePaginateOption func(*serverchassistypePager) error

// WithServerChassisTypeOrder configures pagination ordering.
func WithServerChassisTypeOrder(order *ServerChassisTypeOrder) ServerChassisTypePaginateOption {
	if order == nil {
		order = DefaultServerChassisTypeOrder
	}
	o := *order
	return func(pager *serverchassistypePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultServerChassisTypeOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithServerChassisTypeFilter configures pagination filter.
func WithServerChassisTypeFilter(filter func(*ServerChassisTypeQuery) (*ServerChassisTypeQuery, error)) ServerChassisTypePaginateOption {
	return func(pager *serverchassistypePager) error {
		if filter == nil {
			return errors.New("ServerChassisTypeQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type serverchassistypePager struct {
	reverse bool
	order   *ServerChassisTypeOrder
	filter  func(*ServerChassisTypeQuery) (*ServerChassisTypeQuery, error)
}

func newServerChassisTypePager(opts []ServerChassisTypePaginateOption, reverse bool) (*serverchassistypePager, error) {
	pager := &serverchassistypePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultServerChassisTypeOrder
	}
	return pager, nil
}

func (p *serverchassistypePager) applyFilter(query *ServerChassisTypeQuery) (*ServerChassisTypeQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *serverchassistypePager) toCursor(sct *ServerChassisType) Cursor {
	return p.order.Field.toCursor(sct)
}

func (p *serverchassistypePager) applyCursors(query *ServerChassisTypeQuery, after, before *Cursor) (*ServerChassisTypeQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultServerChassisTypeOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *serverchassistypePager) applyOrder(query *ServerChassisTypeQuery) *ServerChassisTypeQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultServerChassisTypeOrder.Field {
		query = query.Order(DefaultServerChassisTypeOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *serverchassistypePager) orderExpr(query *ServerChassisTypeQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultServerChassisTypeOrder.Field {
			b.Comma().Ident(DefaultServerChassisTypeOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to ServerChassisType.
func (sct *ServerChassisTypeQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ServerChassisTypePaginateOption,
) (*ServerChassisTypeConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newServerChassisTypePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if sct, err = pager.applyFilter(sct); err != nil {
		return nil, err
	}
	conn := &ServerChassisTypeConnection{Edges: []*ServerChassisTypeEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = sct.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if sct, err = pager.applyCursors(sct, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		sct.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := sct.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	sct = pager.applyOrder(sct)
	nodes, err := sct.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// ServerChassisTypeOrderFieldID orders ServerChassisType by id.
	ServerChassisTypeOrderFieldID = &ServerChassisTypeOrderField{
		Value: func(sct *ServerChassisType) (ent.Value, error) {
			return sct.ID, nil
		},
		column: serverchassistype.FieldID,
		toTerm: serverchassistype.ByID,
		toCursor: func(sct *ServerChassisType) Cursor {
			return Cursor{
				ID:    sct.ID,
				Value: sct.ID,
			}
		},
	}
	// ServerChassisTypeOrderFieldCreatedAt orders ServerChassisType by created_at.
	ServerChassisTypeOrderFieldCreatedAt = &ServerChassisTypeOrderField{
		Value: func(sct *ServerChassisType) (ent.Value, error) {
			return sct.CreatedAt, nil
		},
		column: serverchassistype.FieldCreatedAt,
		toTerm: serverchassistype.ByCreatedAt,
		toCursor: func(sct *ServerChassisType) Cursor {
			return Cursor{
				ID:    sct.ID,
				Value: sct.CreatedAt,
			}
		},
	}
	// ServerChassisTypeOrderFieldUpdatedAt orders ServerChassisType by updated_at.
	ServerChassisTypeOrderFieldUpdatedAt = &ServerChassisTypeOrderField{
		Value: func(sct *ServerChassisType) (ent.Value, error) {
			return sct.UpdatedAt, nil
		},
		column: serverchassistype.FieldUpdatedAt,
		toTerm: serverchassistype.ByUpdatedAt,
		toCursor: func(sct *ServerChassisType) Cursor {
			return Cursor{
				ID:    sct.ID,
				Value: sct.UpdatedAt,
			}
		},
	}
	// ServerChassisTypeOrderFieldVendor orders ServerChassisType by vendor.
	ServerChassisTypeOrderFieldVendor = &ServerChassisTypeOrderField{
		Value: func(sct *ServerChassisType) (ent.Value, error) {
			return sct.Vendor, nil
		},
		column: serverchassistype.FieldVendor,
		toTerm: serverchassistype.ByVendor,
		toCursor: func(sct *ServerChassisType) Cursor {
			return Cursor{
				ID:    sct.ID,
				Value: sct.Vendor,
			}
		},
	}
	// ServerChassisTypeOrderFieldParentChassisTypeID orders ServerChassisType by parent_chassis_type_id.
	ServerChassisTypeOrderFieldParentChassisTypeID = &ServerChassisTypeOrderField{
		Value: func(sct *ServerChassisType) (ent.Value, error) {
			return sct.ParentChassisTypeID, nil
		},
		column: serverchassistype.FieldParentChassisTypeID,
		toTerm: serverchassistype.ByParentChassisTypeID,
		toCursor: func(sct *ServerChassisType) Cursor {
			return Cursor{
				ID:    sct.ID,
				Value: sct.ParentChassisTypeID,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f ServerChassisTypeOrderField) String() string {
	var str string
	switch f.column {
	case ServerChassisTypeOrderFieldID.column:
		str = "ID"
	case ServerChassisTypeOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	case ServerChassisTypeOrderFieldUpdatedAt.column:
		str = "UPDATED_AT"
	case ServerChassisTypeOrderFieldVendor.column:
		str = "NAME"
	case ServerChassisTypeOrderFieldParentChassisTypeID.column:
		str = "PARENT_CHASSIS_TYPE"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f ServerChassisTypeOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *ServerChassisTypeOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("ServerChassisTypeOrderField %T must be a string", v)
	}
	switch str {
	case "ID":
		*f = *ServerChassisTypeOrderFieldID
	case "CREATED_AT":
		*f = *ServerChassisTypeOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *ServerChassisTypeOrderFieldUpdatedAt
	case "NAME":
		*f = *ServerChassisTypeOrderFieldVendor
	case "PARENT_CHASSIS_TYPE":
		*f = *ServerChassisTypeOrderFieldParentChassisTypeID
	default:
		return fmt.Errorf("%s is not a valid ServerChassisTypeOrderField", str)
	}
	return nil
}

// ServerChassisTypeOrderField defines the ordering field of ServerChassisType.
type ServerChassisTypeOrderField struct {
	// Value extracts the ordering value from the given ServerChassisType.
	Value    func(*ServerChassisType) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) serverchassistype.OrderOption
	toCursor func(*ServerChassisType) Cursor
}

// ServerChassisTypeOrder defines the ordering of ServerChassisType.
type ServerChassisTypeOrder struct {
	Direction OrderDirection               `json:"direction"`
	Field     *ServerChassisTypeOrderField `json:"field"`
}

// DefaultServerChassisTypeOrder is the default ordering of ServerChassisType.
var DefaultServerChassisTypeOrder = &ServerChassisTypeOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &ServerChassisTypeOrderField{
		Value: func(sct *ServerChassisType) (ent.Value, error) {
			return sct.ID, nil
		},
		column: serverchassistype.FieldID,
		toTerm: serverchassistype.ByID,
		toCursor: func(sct *ServerChassisType) Cursor {
			return Cursor{ID: sct.ID}
		},
	},
}

// ToEdge converts ServerChassisType into ServerChassisTypeEdge.
func (sct *ServerChassisType) ToEdge(order *ServerChassisTypeOrder) *ServerChassisTypeEdge {
	if order == nil {
		order = DefaultServerChassisTypeOrder
	}
	return &ServerChassisTypeEdge{
		Node:   sct,
		Cursor: order.Field.toCursor(sct),
	}
}

// ServerComponentEdge is the edge representation of ServerComponent.
type ServerComponentEdge struct {
	Node   *ServerComponent `json:"node"`
	Cursor Cursor           `json:"cursor"`
}

// ServerComponentConnection is the connection containing edges to ServerComponent.
type ServerComponentConnection struct {
	Edges      []*ServerComponentEdge `json:"edges"`
	PageInfo   PageInfo               `json:"pageInfo"`
	TotalCount int                    `json:"totalCount"`
}

func (c *ServerComponentConnection) build(nodes []*ServerComponent, pager *servercomponentPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *ServerComponent
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *ServerComponent {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *ServerComponent {
			return nodes[i]
		}
	}
	c.Edges = make([]*ServerComponentEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &ServerComponentEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// ServerComponentPaginateOption enables pagination customization.
type ServerComponentPaginateOption func(*servercomponentPager) error

// WithServerComponentOrder configures pagination ordering.
func WithServerComponentOrder(order *ServerComponentOrder) ServerComponentPaginateOption {
	if order == nil {
		order = DefaultServerComponentOrder
	}
	o := *order
	return func(pager *servercomponentPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultServerComponentOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithServerComponentFilter configures pagination filter.
func WithServerComponentFilter(filter func(*ServerComponentQuery) (*ServerComponentQuery, error)) ServerComponentPaginateOption {
	return func(pager *servercomponentPager) error {
		if filter == nil {
			return errors.New("ServerComponentQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type servercomponentPager struct {
	reverse bool
	order   *ServerComponentOrder
	filter  func(*ServerComponentQuery) (*ServerComponentQuery, error)
}

func newServerComponentPager(opts []ServerComponentPaginateOption, reverse bool) (*servercomponentPager, error) {
	pager := &servercomponentPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultServerComponentOrder
	}
	return pager, nil
}

func (p *servercomponentPager) applyFilter(query *ServerComponentQuery) (*ServerComponentQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *servercomponentPager) toCursor(sc *ServerComponent) Cursor {
	return p.order.Field.toCursor(sc)
}

func (p *servercomponentPager) applyCursors(query *ServerComponentQuery, after, before *Cursor) (*ServerComponentQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultServerComponentOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *servercomponentPager) applyOrder(query *ServerComponentQuery) *ServerComponentQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultServerComponentOrder.Field {
		query = query.Order(DefaultServerComponentOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *servercomponentPager) orderExpr(query *ServerComponentQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultServerComponentOrder.Field {
			b.Comma().Ident(DefaultServerComponentOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to ServerComponent.
func (sc *ServerComponentQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ServerComponentPaginateOption,
) (*ServerComponentConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newServerComponentPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if sc, err = pager.applyFilter(sc); err != nil {
		return nil, err
	}
	conn := &ServerComponentConnection{Edges: []*ServerComponentEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = sc.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if sc, err = pager.applyCursors(sc, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		sc.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := sc.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	sc = pager.applyOrder(sc)
	nodes, err := sc.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// ServerComponentOrderFieldID orders ServerComponent by id.
	ServerComponentOrderFieldID = &ServerComponentOrderField{
		Value: func(sc *ServerComponent) (ent.Value, error) {
			return sc.ID, nil
		},
		column: servercomponent.FieldID,
		toTerm: servercomponent.ByID,
		toCursor: func(sc *ServerComponent) Cursor {
			return Cursor{
				ID:    sc.ID,
				Value: sc.ID,
			}
		},
	}
	// ServerComponentOrderFieldCreatedAt orders ServerComponent by created_at.
	ServerComponentOrderFieldCreatedAt = &ServerComponentOrderField{
		Value: func(sc *ServerComponent) (ent.Value, error) {
			return sc.CreatedAt, nil
		},
		column: servercomponent.FieldCreatedAt,
		toTerm: servercomponent.ByCreatedAt,
		toCursor: func(sc *ServerComponent) Cursor {
			return Cursor{
				ID:    sc.ID,
				Value: sc.CreatedAt,
			}
		},
	}
	// ServerComponentOrderFieldUpdatedAt orders ServerComponent by updated_at.
	ServerComponentOrderFieldUpdatedAt = &ServerComponentOrderField{
		Value: func(sc *ServerComponent) (ent.Value, error) {
			return sc.UpdatedAt, nil
		},
		column: servercomponent.FieldUpdatedAt,
		toTerm: servercomponent.ByUpdatedAt,
		toCursor: func(sc *ServerComponent) Cursor {
			return Cursor{
				ID:    sc.ID,
				Value: sc.UpdatedAt,
			}
		},
	}
	// ServerComponentOrderFieldName orders ServerComponent by name.
	ServerComponentOrderFieldName = &ServerComponentOrderField{
		Value: func(sc *ServerComponent) (ent.Value, error) {
			return sc.Name, nil
		},
		column: servercomponent.FieldName,
		toTerm: servercomponent.ByName,
		toCursor: func(sc *ServerComponent) Cursor {
			return Cursor{
				ID:    sc.ID,
				Value: sc.Name,
			}
		},
	}
	// ServerComponentOrderFieldVendor orders ServerComponent by vendor.
	ServerComponentOrderFieldVendor = &ServerComponentOrderField{
		Value: func(sc *ServerComponent) (ent.Value, error) {
			return sc.Vendor, nil
		},
		column: servercomponent.FieldVendor,
		toTerm: servercomponent.ByVendor,
		toCursor: func(sc *ServerComponent) Cursor {
			return Cursor{
				ID:    sc.ID,
				Value: sc.Vendor,
			}
		},
	}
	// ServerComponentOrderFieldModel orders ServerComponent by model.
	ServerComponentOrderFieldModel = &ServerComponentOrderField{
		Value: func(sc *ServerComponent) (ent.Value, error) {
			return sc.Model, nil
		},
		column: servercomponent.FieldModel,
		toTerm: servercomponent.ByModel,
		toCursor: func(sc *ServerComponent) Cursor {
			return Cursor{
				ID:    sc.ID,
				Value: sc.Model,
			}
		},
	}
	// ServerComponentOrderFieldSerial orders ServerComponent by serial.
	ServerComponentOrderFieldSerial = &ServerComponentOrderField{
		Value: func(sc *ServerComponent) (ent.Value, error) {
			return sc.Serial, nil
		},
		column: servercomponent.FieldSerial,
		toTerm: servercomponent.BySerial,
		toCursor: func(sc *ServerComponent) Cursor {
			return Cursor{
				ID:    sc.ID,
				Value: sc.Serial,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f ServerComponentOrderField) String() string {
	var str string
	switch f.column {
	case ServerComponentOrderFieldID.column:
		str = "ID"
	case ServerComponentOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	case ServerComponentOrderFieldUpdatedAt.column:
		str = "UPDATED_AT"
	case ServerComponentOrderFieldName.column:
		str = "NAME"
	case ServerComponentOrderFieldVendor.column:
		str = "VENDOR"
	case ServerComponentOrderFieldModel.column:
		str = "MODEL"
	case ServerComponentOrderFieldSerial.column:
		str = "SERIAL"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f ServerComponentOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *ServerComponentOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("ServerComponentOrderField %T must be a string", v)
	}
	switch str {
	case "ID":
		*f = *ServerComponentOrderFieldID
	case "CREATED_AT":
		*f = *ServerComponentOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *ServerComponentOrderFieldUpdatedAt
	case "NAME":
		*f = *ServerComponentOrderFieldName
	case "VENDOR":
		*f = *ServerComponentOrderFieldVendor
	case "MODEL":
		*f = *ServerComponentOrderFieldModel
	case "SERIAL":
		*f = *ServerComponentOrderFieldSerial
	default:
		return fmt.Errorf("%s is not a valid ServerComponentOrderField", str)
	}
	return nil
}

// ServerComponentOrderField defines the ordering field of ServerComponent.
type ServerComponentOrderField struct {
	// Value extracts the ordering value from the given ServerComponent.
	Value    func(*ServerComponent) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) servercomponent.OrderOption
	toCursor func(*ServerComponent) Cursor
}

// ServerComponentOrder defines the ordering of ServerComponent.
type ServerComponentOrder struct {
	Direction OrderDirection             `json:"direction"`
	Field     *ServerComponentOrderField `json:"field"`
}

// DefaultServerComponentOrder is the default ordering of ServerComponent.
var DefaultServerComponentOrder = &ServerComponentOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &ServerComponentOrderField{
		Value: func(sc *ServerComponent) (ent.Value, error) {
			return sc.ID, nil
		},
		column: servercomponent.FieldID,
		toTerm: servercomponent.ByID,
		toCursor: func(sc *ServerComponent) Cursor {
			return Cursor{ID: sc.ID}
		},
	},
}

// ToEdge converts ServerComponent into ServerComponentEdge.
func (sc *ServerComponent) ToEdge(order *ServerComponentOrder) *ServerComponentEdge {
	if order == nil {
		order = DefaultServerComponentOrder
	}
	return &ServerComponentEdge{
		Node:   sc,
		Cursor: order.Field.toCursor(sc),
	}
}

// ServerComponentTypeEdge is the edge representation of ServerComponentType.
type ServerComponentTypeEdge struct {
	Node   *ServerComponentType `json:"node"`
	Cursor Cursor               `json:"cursor"`
}

// ServerComponentTypeConnection is the connection containing edges to ServerComponentType.
type ServerComponentTypeConnection struct {
	Edges      []*ServerComponentTypeEdge `json:"edges"`
	PageInfo   PageInfo                   `json:"pageInfo"`
	TotalCount int                        `json:"totalCount"`
}

func (c *ServerComponentTypeConnection) build(nodes []*ServerComponentType, pager *servercomponenttypePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *ServerComponentType
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *ServerComponentType {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *ServerComponentType {
			return nodes[i]
		}
	}
	c.Edges = make([]*ServerComponentTypeEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &ServerComponentTypeEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// ServerComponentTypePaginateOption enables pagination customization.
type ServerComponentTypePaginateOption func(*servercomponenttypePager) error

// WithServerComponentTypeOrder configures pagination ordering.
func WithServerComponentTypeOrder(order *ServerComponentTypeOrder) ServerComponentTypePaginateOption {
	if order == nil {
		order = DefaultServerComponentTypeOrder
	}
	o := *order
	return func(pager *servercomponenttypePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultServerComponentTypeOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithServerComponentTypeFilter configures pagination filter.
func WithServerComponentTypeFilter(filter func(*ServerComponentTypeQuery) (*ServerComponentTypeQuery, error)) ServerComponentTypePaginateOption {
	return func(pager *servercomponenttypePager) error {
		if filter == nil {
			return errors.New("ServerComponentTypeQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type servercomponenttypePager struct {
	reverse bool
	order   *ServerComponentTypeOrder
	filter  func(*ServerComponentTypeQuery) (*ServerComponentTypeQuery, error)
}

func newServerComponentTypePager(opts []ServerComponentTypePaginateOption, reverse bool) (*servercomponenttypePager, error) {
	pager := &servercomponenttypePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultServerComponentTypeOrder
	}
	return pager, nil
}

func (p *servercomponenttypePager) applyFilter(query *ServerComponentTypeQuery) (*ServerComponentTypeQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *servercomponenttypePager) toCursor(sct *ServerComponentType) Cursor {
	return p.order.Field.toCursor(sct)
}

func (p *servercomponenttypePager) applyCursors(query *ServerComponentTypeQuery, after, before *Cursor) (*ServerComponentTypeQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultServerComponentTypeOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *servercomponenttypePager) applyOrder(query *ServerComponentTypeQuery) *ServerComponentTypeQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultServerComponentTypeOrder.Field {
		query = query.Order(DefaultServerComponentTypeOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *servercomponenttypePager) orderExpr(query *ServerComponentTypeQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultServerComponentTypeOrder.Field {
			b.Comma().Ident(DefaultServerComponentTypeOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to ServerComponentType.
func (sct *ServerComponentTypeQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ServerComponentTypePaginateOption,
) (*ServerComponentTypeConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newServerComponentTypePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if sct, err = pager.applyFilter(sct); err != nil {
		return nil, err
	}
	conn := &ServerComponentTypeConnection{Edges: []*ServerComponentTypeEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = sct.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if sct, err = pager.applyCursors(sct, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		sct.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := sct.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	sct = pager.applyOrder(sct)
	nodes, err := sct.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// ServerComponentTypeOrderFieldID orders ServerComponentType by id.
	ServerComponentTypeOrderFieldID = &ServerComponentTypeOrderField{
		Value: func(sct *ServerComponentType) (ent.Value, error) {
			return sct.ID, nil
		},
		column: servercomponenttype.FieldID,
		toTerm: servercomponenttype.ByID,
		toCursor: func(sct *ServerComponentType) Cursor {
			return Cursor{
				ID:    sct.ID,
				Value: sct.ID,
			}
		},
	}
	// ServerComponentTypeOrderFieldCreatedAt orders ServerComponentType by created_at.
	ServerComponentTypeOrderFieldCreatedAt = &ServerComponentTypeOrderField{
		Value: func(sct *ServerComponentType) (ent.Value, error) {
			return sct.CreatedAt, nil
		},
		column: servercomponenttype.FieldCreatedAt,
		toTerm: servercomponenttype.ByCreatedAt,
		toCursor: func(sct *ServerComponentType) Cursor {
			return Cursor{
				ID:    sct.ID,
				Value: sct.CreatedAt,
			}
		},
	}
	// ServerComponentTypeOrderFieldUpdatedAt orders ServerComponentType by updated_at.
	ServerComponentTypeOrderFieldUpdatedAt = &ServerComponentTypeOrderField{
		Value: func(sct *ServerComponentType) (ent.Value, error) {
			return sct.UpdatedAt, nil
		},
		column: servercomponenttype.FieldUpdatedAt,
		toTerm: servercomponenttype.ByUpdatedAt,
		toCursor: func(sct *ServerComponentType) Cursor {
			return Cursor{
				ID:    sct.ID,
				Value: sct.UpdatedAt,
			}
		},
	}
	// ServerComponentTypeOrderFieldName orders ServerComponentType by name.
	ServerComponentTypeOrderFieldName = &ServerComponentTypeOrderField{
		Value: func(sct *ServerComponentType) (ent.Value, error) {
			return sct.Name, nil
		},
		column: servercomponenttype.FieldName,
		toTerm: servercomponenttype.ByName,
		toCursor: func(sct *ServerComponentType) Cursor {
			return Cursor{
				ID:    sct.ID,
				Value: sct.Name,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f ServerComponentTypeOrderField) String() string {
	var str string
	switch f.column {
	case ServerComponentTypeOrderFieldID.column:
		str = "ID"
	case ServerComponentTypeOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	case ServerComponentTypeOrderFieldUpdatedAt.column:
		str = "UPDATED_AT"
	case ServerComponentTypeOrderFieldName.column:
		str = "NAME"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f ServerComponentTypeOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *ServerComponentTypeOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("ServerComponentTypeOrderField %T must be a string", v)
	}
	switch str {
	case "ID":
		*f = *ServerComponentTypeOrderFieldID
	case "CREATED_AT":
		*f = *ServerComponentTypeOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *ServerComponentTypeOrderFieldUpdatedAt
	case "NAME":
		*f = *ServerComponentTypeOrderFieldName
	default:
		return fmt.Errorf("%s is not a valid ServerComponentTypeOrderField", str)
	}
	return nil
}

// ServerComponentTypeOrderField defines the ordering field of ServerComponentType.
type ServerComponentTypeOrderField struct {
	// Value extracts the ordering value from the given ServerComponentType.
	Value    func(*ServerComponentType) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) servercomponenttype.OrderOption
	toCursor func(*ServerComponentType) Cursor
}

// ServerComponentTypeOrder defines the ordering of ServerComponentType.
type ServerComponentTypeOrder struct {
	Direction OrderDirection                 `json:"direction"`
	Field     *ServerComponentTypeOrderField `json:"field"`
}

// DefaultServerComponentTypeOrder is the default ordering of ServerComponentType.
var DefaultServerComponentTypeOrder = &ServerComponentTypeOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &ServerComponentTypeOrderField{
		Value: func(sct *ServerComponentType) (ent.Value, error) {
			return sct.ID, nil
		},
		column: servercomponenttype.FieldID,
		toTerm: servercomponenttype.ByID,
		toCursor: func(sct *ServerComponentType) Cursor {
			return Cursor{ID: sct.ID}
		},
	},
}

// ToEdge converts ServerComponentType into ServerComponentTypeEdge.
func (sct *ServerComponentType) ToEdge(order *ServerComponentTypeOrder) *ServerComponentTypeEdge {
	if order == nil {
		order = DefaultServerComponentTypeOrder
	}
	return &ServerComponentTypeEdge{
		Node:   sct,
		Cursor: order.Field.toCursor(sct),
	}
}

// ServerHardDriveEdge is the edge representation of ServerHardDrive.
type ServerHardDriveEdge struct {
	Node   *ServerHardDrive `json:"node"`
	Cursor Cursor           `json:"cursor"`
}

// ServerHardDriveConnection is the connection containing edges to ServerHardDrive.
type ServerHardDriveConnection struct {
	Edges      []*ServerHardDriveEdge `json:"edges"`
	PageInfo   PageInfo               `json:"pageInfo"`
	TotalCount int                    `json:"totalCount"`
}

func (c *ServerHardDriveConnection) build(nodes []*ServerHardDrive, pager *serverharddrivePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *ServerHardDrive
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *ServerHardDrive {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *ServerHardDrive {
			return nodes[i]
		}
	}
	c.Edges = make([]*ServerHardDriveEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &ServerHardDriveEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// ServerHardDrivePaginateOption enables pagination customization.
type ServerHardDrivePaginateOption func(*serverharddrivePager) error

// WithServerHardDriveOrder configures pagination ordering.
func WithServerHardDriveOrder(order *ServerHardDriveOrder) ServerHardDrivePaginateOption {
	if order == nil {
		order = DefaultServerHardDriveOrder
	}
	o := *order
	return func(pager *serverharddrivePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultServerHardDriveOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithServerHardDriveFilter configures pagination filter.
func WithServerHardDriveFilter(filter func(*ServerHardDriveQuery) (*ServerHardDriveQuery, error)) ServerHardDrivePaginateOption {
	return func(pager *serverharddrivePager) error {
		if filter == nil {
			return errors.New("ServerHardDriveQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type serverharddrivePager struct {
	reverse bool
	order   *ServerHardDriveOrder
	filter  func(*ServerHardDriveQuery) (*ServerHardDriveQuery, error)
}

func newServerHardDrivePager(opts []ServerHardDrivePaginateOption, reverse bool) (*serverharddrivePager, error) {
	pager := &serverharddrivePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultServerHardDriveOrder
	}
	return pager, nil
}

func (p *serverharddrivePager) applyFilter(query *ServerHardDriveQuery) (*ServerHardDriveQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *serverharddrivePager) toCursor(shd *ServerHardDrive) Cursor {
	return p.order.Field.toCursor(shd)
}

func (p *serverharddrivePager) applyCursors(query *ServerHardDriveQuery, after, before *Cursor) (*ServerHardDriveQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultServerHardDriveOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *serverharddrivePager) applyOrder(query *ServerHardDriveQuery) *ServerHardDriveQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultServerHardDriveOrder.Field {
		query = query.Order(DefaultServerHardDriveOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *serverharddrivePager) orderExpr(query *ServerHardDriveQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultServerHardDriveOrder.Field {
			b.Comma().Ident(DefaultServerHardDriveOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to ServerHardDrive.
func (shd *ServerHardDriveQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ServerHardDrivePaginateOption,
) (*ServerHardDriveConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newServerHardDrivePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if shd, err = pager.applyFilter(shd); err != nil {
		return nil, err
	}
	conn := &ServerHardDriveConnection{Edges: []*ServerHardDriveEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = shd.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if shd, err = pager.applyCursors(shd, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		shd.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := shd.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	shd = pager.applyOrder(shd)
	nodes, err := shd.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// ServerHardDriveOrderFieldID orders ServerHardDrive by id.
	ServerHardDriveOrderFieldID = &ServerHardDriveOrderField{
		Value: func(shd *ServerHardDrive) (ent.Value, error) {
			return shd.ID, nil
		},
		column: serverharddrive.FieldID,
		toTerm: serverharddrive.ByID,
		toCursor: func(shd *ServerHardDrive) Cursor {
			return Cursor{
				ID:    shd.ID,
				Value: shd.ID,
			}
		},
	}
	// ServerHardDriveOrderFieldCreatedAt orders ServerHardDrive by created_at.
	ServerHardDriveOrderFieldCreatedAt = &ServerHardDriveOrderField{
		Value: func(shd *ServerHardDrive) (ent.Value, error) {
			return shd.CreatedAt, nil
		},
		column: serverharddrive.FieldCreatedAt,
		toTerm: serverharddrive.ByCreatedAt,
		toCursor: func(shd *ServerHardDrive) Cursor {
			return Cursor{
				ID:    shd.ID,
				Value: shd.CreatedAt,
			}
		},
	}
	// ServerHardDriveOrderFieldUpdatedAt orders ServerHardDrive by updated_at.
	ServerHardDriveOrderFieldUpdatedAt = &ServerHardDriveOrderField{
		Value: func(shd *ServerHardDrive) (ent.Value, error) {
			return shd.UpdatedAt, nil
		},
		column: serverharddrive.FieldUpdatedAt,
		toTerm: serverharddrive.ByUpdatedAt,
		toCursor: func(shd *ServerHardDrive) Cursor {
			return Cursor{
				ID:    shd.ID,
				Value: shd.UpdatedAt,
			}
		},
	}
	// ServerHardDriveOrderFieldSerial orders ServerHardDrive by serial.
	ServerHardDriveOrderFieldSerial = &ServerHardDriveOrderField{
		Value: func(shd *ServerHardDrive) (ent.Value, error) {
			return shd.Serial, nil
		},
		column: serverharddrive.FieldSerial,
		toTerm: serverharddrive.BySerial,
		toCursor: func(shd *ServerHardDrive) Cursor {
			return Cursor{
				ID:    shd.ID,
				Value: shd.Serial,
			}
		},
	}
	// ServerHardDriveOrderFieldServerID orders ServerHardDrive by server_id.
	ServerHardDriveOrderFieldServerID = &ServerHardDriveOrderField{
		Value: func(shd *ServerHardDrive) (ent.Value, error) {
			return shd.ServerID, nil
		},
		column: serverharddrive.FieldServerID,
		toTerm: serverharddrive.ByServerID,
		toCursor: func(shd *ServerHardDrive) Cursor {
			return Cursor{
				ID:    shd.ID,
				Value: shd.ServerID,
			}
		},
	}
	// ServerHardDriveOrderFieldServerHardDriveTypeID orders ServerHardDrive by server_hard_drive_type_id.
	ServerHardDriveOrderFieldServerHardDriveTypeID = &ServerHardDriveOrderField{
		Value: func(shd *ServerHardDrive) (ent.Value, error) {
			return shd.ServerHardDriveTypeID, nil
		},
		column: serverharddrive.FieldServerHardDriveTypeID,
		toTerm: serverharddrive.ByServerHardDriveTypeID,
		toCursor: func(shd *ServerHardDrive) Cursor {
			return Cursor{
				ID:    shd.ID,
				Value: shd.ServerHardDriveTypeID,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f ServerHardDriveOrderField) String() string {
	var str string
	switch f.column {
	case ServerHardDriveOrderFieldID.column:
		str = "ID"
	case ServerHardDriveOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	case ServerHardDriveOrderFieldUpdatedAt.column:
		str = "UPDATED_AT"
	case ServerHardDriveOrderFieldSerial.column:
		str = "NAME"
	case ServerHardDriveOrderFieldServerID.column:
		str = "SERVER"
	case ServerHardDriveOrderFieldServerHardDriveTypeID.column:
		str = "SERVER_HARD_DRIVE_TYPE"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f ServerHardDriveOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *ServerHardDriveOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("ServerHardDriveOrderField %T must be a string", v)
	}
	switch str {
	case "ID":
		*f = *ServerHardDriveOrderFieldID
	case "CREATED_AT":
		*f = *ServerHardDriveOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *ServerHardDriveOrderFieldUpdatedAt
	case "NAME":
		*f = *ServerHardDriveOrderFieldSerial
	case "SERVER":
		*f = *ServerHardDriveOrderFieldServerID
	case "SERVER_HARD_DRIVE_TYPE":
		*f = *ServerHardDriveOrderFieldServerHardDriveTypeID
	default:
		return fmt.Errorf("%s is not a valid ServerHardDriveOrderField", str)
	}
	return nil
}

// ServerHardDriveOrderField defines the ordering field of ServerHardDrive.
type ServerHardDriveOrderField struct {
	// Value extracts the ordering value from the given ServerHardDrive.
	Value    func(*ServerHardDrive) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) serverharddrive.OrderOption
	toCursor func(*ServerHardDrive) Cursor
}

// ServerHardDriveOrder defines the ordering of ServerHardDrive.
type ServerHardDriveOrder struct {
	Direction OrderDirection             `json:"direction"`
	Field     *ServerHardDriveOrderField `json:"field"`
}

// DefaultServerHardDriveOrder is the default ordering of ServerHardDrive.
var DefaultServerHardDriveOrder = &ServerHardDriveOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &ServerHardDriveOrderField{
		Value: func(shd *ServerHardDrive) (ent.Value, error) {
			return shd.ID, nil
		},
		column: serverharddrive.FieldID,
		toTerm: serverharddrive.ByID,
		toCursor: func(shd *ServerHardDrive) Cursor {
			return Cursor{ID: shd.ID}
		},
	},
}

// ToEdge converts ServerHardDrive into ServerHardDriveEdge.
func (shd *ServerHardDrive) ToEdge(order *ServerHardDriveOrder) *ServerHardDriveEdge {
	if order == nil {
		order = DefaultServerHardDriveOrder
	}
	return &ServerHardDriveEdge{
		Node:   shd,
		Cursor: order.Field.toCursor(shd),
	}
}

// ServerHardDriveTypeEdge is the edge representation of ServerHardDriveType.
type ServerHardDriveTypeEdge struct {
	Node   *ServerHardDriveType `json:"node"`
	Cursor Cursor               `json:"cursor"`
}

// ServerHardDriveTypeConnection is the connection containing edges to ServerHardDriveType.
type ServerHardDriveTypeConnection struct {
	Edges      []*ServerHardDriveTypeEdge `json:"edges"`
	PageInfo   PageInfo                   `json:"pageInfo"`
	TotalCount int                        `json:"totalCount"`
}

func (c *ServerHardDriveTypeConnection) build(nodes []*ServerHardDriveType, pager *serverharddrivetypePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *ServerHardDriveType
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *ServerHardDriveType {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *ServerHardDriveType {
			return nodes[i]
		}
	}
	c.Edges = make([]*ServerHardDriveTypeEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &ServerHardDriveTypeEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// ServerHardDriveTypePaginateOption enables pagination customization.
type ServerHardDriveTypePaginateOption func(*serverharddrivetypePager) error

// WithServerHardDriveTypeOrder configures pagination ordering.
func WithServerHardDriveTypeOrder(order *ServerHardDriveTypeOrder) ServerHardDriveTypePaginateOption {
	if order == nil {
		order = DefaultServerHardDriveTypeOrder
	}
	o := *order
	return func(pager *serverharddrivetypePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultServerHardDriveTypeOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithServerHardDriveTypeFilter configures pagination filter.
func WithServerHardDriveTypeFilter(filter func(*ServerHardDriveTypeQuery) (*ServerHardDriveTypeQuery, error)) ServerHardDriveTypePaginateOption {
	return func(pager *serverharddrivetypePager) error {
		if filter == nil {
			return errors.New("ServerHardDriveTypeQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type serverharddrivetypePager struct {
	reverse bool
	order   *ServerHardDriveTypeOrder
	filter  func(*ServerHardDriveTypeQuery) (*ServerHardDriveTypeQuery, error)
}

func newServerHardDriveTypePager(opts []ServerHardDriveTypePaginateOption, reverse bool) (*serverharddrivetypePager, error) {
	pager := &serverharddrivetypePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultServerHardDriveTypeOrder
	}
	return pager, nil
}

func (p *serverharddrivetypePager) applyFilter(query *ServerHardDriveTypeQuery) (*ServerHardDriveTypeQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *serverharddrivetypePager) toCursor(shdt *ServerHardDriveType) Cursor {
	return p.order.Field.toCursor(shdt)
}

func (p *serverharddrivetypePager) applyCursors(query *ServerHardDriveTypeQuery, after, before *Cursor) (*ServerHardDriveTypeQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultServerHardDriveTypeOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *serverharddrivetypePager) applyOrder(query *ServerHardDriveTypeQuery) *ServerHardDriveTypeQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultServerHardDriveTypeOrder.Field {
		query = query.Order(DefaultServerHardDriveTypeOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *serverharddrivetypePager) orderExpr(query *ServerHardDriveTypeQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultServerHardDriveTypeOrder.Field {
			b.Comma().Ident(DefaultServerHardDriveTypeOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to ServerHardDriveType.
func (shdt *ServerHardDriveTypeQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ServerHardDriveTypePaginateOption,
) (*ServerHardDriveTypeConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newServerHardDriveTypePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if shdt, err = pager.applyFilter(shdt); err != nil {
		return nil, err
	}
	conn := &ServerHardDriveTypeConnection{Edges: []*ServerHardDriveTypeEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = shdt.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if shdt, err = pager.applyCursors(shdt, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		shdt.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := shdt.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	shdt = pager.applyOrder(shdt)
	nodes, err := shdt.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// ServerHardDriveTypeOrderFieldID orders ServerHardDriveType by id.
	ServerHardDriveTypeOrderFieldID = &ServerHardDriveTypeOrderField{
		Value: func(shdt *ServerHardDriveType) (ent.Value, error) {
			return shdt.ID, nil
		},
		column: serverharddrivetype.FieldID,
		toTerm: serverharddrivetype.ByID,
		toCursor: func(shdt *ServerHardDriveType) Cursor {
			return Cursor{
				ID:    shdt.ID,
				Value: shdt.ID,
			}
		},
	}
	// ServerHardDriveTypeOrderFieldCreatedAt orders ServerHardDriveType by created_at.
	ServerHardDriveTypeOrderFieldCreatedAt = &ServerHardDriveTypeOrderField{
		Value: func(shdt *ServerHardDriveType) (ent.Value, error) {
			return shdt.CreatedAt, nil
		},
		column: serverharddrivetype.FieldCreatedAt,
		toTerm: serverharddrivetype.ByCreatedAt,
		toCursor: func(shdt *ServerHardDriveType) Cursor {
			return Cursor{
				ID:    shdt.ID,
				Value: shdt.CreatedAt,
			}
		},
	}
	// ServerHardDriveTypeOrderFieldUpdatedAt orders ServerHardDriveType by updated_at.
	ServerHardDriveTypeOrderFieldUpdatedAt = &ServerHardDriveTypeOrderField{
		Value: func(shdt *ServerHardDriveType) (ent.Value, error) {
			return shdt.UpdatedAt, nil
		},
		column: serverharddrivetype.FieldUpdatedAt,
		toTerm: serverharddrivetype.ByUpdatedAt,
		toCursor: func(shdt *ServerHardDriveType) Cursor {
			return Cursor{
				ID:    shdt.ID,
				Value: shdt.UpdatedAt,
			}
		},
	}
	// ServerHardDriveTypeOrderFieldVendor orders ServerHardDriveType by vendor.
	ServerHardDriveTypeOrderFieldVendor = &ServerHardDriveTypeOrderField{
		Value: func(shdt *ServerHardDriveType) (ent.Value, error) {
			return shdt.Vendor, nil
		},
		column: serverharddrivetype.FieldVendor,
		toTerm: serverharddrivetype.ByVendor,
		toCursor: func(shdt *ServerHardDriveType) Cursor {
			return Cursor{
				ID:    shdt.ID,
				Value: shdt.Vendor,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f ServerHardDriveTypeOrderField) String() string {
	var str string
	switch f.column {
	case ServerHardDriveTypeOrderFieldID.column:
		str = "ID"
	case ServerHardDriveTypeOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	case ServerHardDriveTypeOrderFieldUpdatedAt.column:
		str = "UPDATED_AT"
	case ServerHardDriveTypeOrderFieldVendor.column:
		str = "NAME"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f ServerHardDriveTypeOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *ServerHardDriveTypeOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("ServerHardDriveTypeOrderField %T must be a string", v)
	}
	switch str {
	case "ID":
		*f = *ServerHardDriveTypeOrderFieldID
	case "CREATED_AT":
		*f = *ServerHardDriveTypeOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *ServerHardDriveTypeOrderFieldUpdatedAt
	case "NAME":
		*f = *ServerHardDriveTypeOrderFieldVendor
	default:
		return fmt.Errorf("%s is not a valid ServerHardDriveTypeOrderField", str)
	}
	return nil
}

// ServerHardDriveTypeOrderField defines the ordering field of ServerHardDriveType.
type ServerHardDriveTypeOrderField struct {
	// Value extracts the ordering value from the given ServerHardDriveType.
	Value    func(*ServerHardDriveType) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) serverharddrivetype.OrderOption
	toCursor func(*ServerHardDriveType) Cursor
}

// ServerHardDriveTypeOrder defines the ordering of ServerHardDriveType.
type ServerHardDriveTypeOrder struct {
	Direction OrderDirection                 `json:"direction"`
	Field     *ServerHardDriveTypeOrderField `json:"field"`
}

// DefaultServerHardDriveTypeOrder is the default ordering of ServerHardDriveType.
var DefaultServerHardDriveTypeOrder = &ServerHardDriveTypeOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &ServerHardDriveTypeOrderField{
		Value: func(shdt *ServerHardDriveType) (ent.Value, error) {
			return shdt.ID, nil
		},
		column: serverharddrivetype.FieldID,
		toTerm: serverharddrivetype.ByID,
		toCursor: func(shdt *ServerHardDriveType) Cursor {
			return Cursor{ID: shdt.ID}
		},
	},
}

// ToEdge converts ServerHardDriveType into ServerHardDriveTypeEdge.
func (shdt *ServerHardDriveType) ToEdge(order *ServerHardDriveTypeOrder) *ServerHardDriveTypeEdge {
	if order == nil {
		order = DefaultServerHardDriveTypeOrder
	}
	return &ServerHardDriveTypeEdge{
		Node:   shdt,
		Cursor: order.Field.toCursor(shdt),
	}
}

// ServerMemoryEdge is the edge representation of ServerMemory.
type ServerMemoryEdge struct {
	Node   *ServerMemory `json:"node"`
	Cursor Cursor        `json:"cursor"`
}

// ServerMemoryConnection is the connection containing edges to ServerMemory.
type ServerMemoryConnection struct {
	Edges      []*ServerMemoryEdge `json:"edges"`
	PageInfo   PageInfo            `json:"pageInfo"`
	TotalCount int                 `json:"totalCount"`
}

func (c *ServerMemoryConnection) build(nodes []*ServerMemory, pager *servermemoryPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *ServerMemory
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *ServerMemory {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *ServerMemory {
			return nodes[i]
		}
	}
	c.Edges = make([]*ServerMemoryEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &ServerMemoryEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// ServerMemoryPaginateOption enables pagination customization.
type ServerMemoryPaginateOption func(*servermemoryPager) error

// WithServerMemoryOrder configures pagination ordering.
func WithServerMemoryOrder(order *ServerMemoryOrder) ServerMemoryPaginateOption {
	if order == nil {
		order = DefaultServerMemoryOrder
	}
	o := *order
	return func(pager *servermemoryPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultServerMemoryOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithServerMemoryFilter configures pagination filter.
func WithServerMemoryFilter(filter func(*ServerMemoryQuery) (*ServerMemoryQuery, error)) ServerMemoryPaginateOption {
	return func(pager *servermemoryPager) error {
		if filter == nil {
			return errors.New("ServerMemoryQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type servermemoryPager struct {
	reverse bool
	order   *ServerMemoryOrder
	filter  func(*ServerMemoryQuery) (*ServerMemoryQuery, error)
}

func newServerMemoryPager(opts []ServerMemoryPaginateOption, reverse bool) (*servermemoryPager, error) {
	pager := &servermemoryPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultServerMemoryOrder
	}
	return pager, nil
}

func (p *servermemoryPager) applyFilter(query *ServerMemoryQuery) (*ServerMemoryQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *servermemoryPager) toCursor(sm *ServerMemory) Cursor {
	return p.order.Field.toCursor(sm)
}

func (p *servermemoryPager) applyCursors(query *ServerMemoryQuery, after, before *Cursor) (*ServerMemoryQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultServerMemoryOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *servermemoryPager) applyOrder(query *ServerMemoryQuery) *ServerMemoryQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultServerMemoryOrder.Field {
		query = query.Order(DefaultServerMemoryOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *servermemoryPager) orderExpr(query *ServerMemoryQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultServerMemoryOrder.Field {
			b.Comma().Ident(DefaultServerMemoryOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to ServerMemory.
func (sm *ServerMemoryQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ServerMemoryPaginateOption,
) (*ServerMemoryConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newServerMemoryPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if sm, err = pager.applyFilter(sm); err != nil {
		return nil, err
	}
	conn := &ServerMemoryConnection{Edges: []*ServerMemoryEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = sm.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if sm, err = pager.applyCursors(sm, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		sm.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := sm.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	sm = pager.applyOrder(sm)
	nodes, err := sm.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// ServerMemoryOrderFieldID orders ServerMemory by id.
	ServerMemoryOrderFieldID = &ServerMemoryOrderField{
		Value: func(sm *ServerMemory) (ent.Value, error) {
			return sm.ID, nil
		},
		column: servermemory.FieldID,
		toTerm: servermemory.ByID,
		toCursor: func(sm *ServerMemory) Cursor {
			return Cursor{
				ID:    sm.ID,
				Value: sm.ID,
			}
		},
	}
	// ServerMemoryOrderFieldCreatedAt orders ServerMemory by created_at.
	ServerMemoryOrderFieldCreatedAt = &ServerMemoryOrderField{
		Value: func(sm *ServerMemory) (ent.Value, error) {
			return sm.CreatedAt, nil
		},
		column: servermemory.FieldCreatedAt,
		toTerm: servermemory.ByCreatedAt,
		toCursor: func(sm *ServerMemory) Cursor {
			return Cursor{
				ID:    sm.ID,
				Value: sm.CreatedAt,
			}
		},
	}
	// ServerMemoryOrderFieldUpdatedAt orders ServerMemory by updated_at.
	ServerMemoryOrderFieldUpdatedAt = &ServerMemoryOrderField{
		Value: func(sm *ServerMemory) (ent.Value, error) {
			return sm.UpdatedAt, nil
		},
		column: servermemory.FieldUpdatedAt,
		toTerm: servermemory.ByUpdatedAt,
		toCursor: func(sm *ServerMemory) Cursor {
			return Cursor{
				ID:    sm.ID,
				Value: sm.UpdatedAt,
			}
		},
	}
	// ServerMemoryOrderFieldServerID orders ServerMemory by server_id.
	ServerMemoryOrderFieldServerID = &ServerMemoryOrderField{
		Value: func(sm *ServerMemory) (ent.Value, error) {
			return sm.ServerID, nil
		},
		column: servermemory.FieldServerID,
		toTerm: servermemory.ByServerID,
		toCursor: func(sm *ServerMemory) Cursor {
			return Cursor{
				ID:    sm.ID,
				Value: sm.ServerID,
			}
		},
	}
	// ServerMemoryOrderFieldServerMemoryTypeID orders ServerMemory by server_memory_type_id.
	ServerMemoryOrderFieldServerMemoryTypeID = &ServerMemoryOrderField{
		Value: func(sm *ServerMemory) (ent.Value, error) {
			return sm.ServerMemoryTypeID, nil
		},
		column: servermemory.FieldServerMemoryTypeID,
		toTerm: servermemory.ByServerMemoryTypeID,
		toCursor: func(sm *ServerMemory) Cursor {
			return Cursor{
				ID:    sm.ID,
				Value: sm.ServerMemoryTypeID,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f ServerMemoryOrderField) String() string {
	var str string
	switch f.column {
	case ServerMemoryOrderFieldID.column:
		str = "ID"
	case ServerMemoryOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	case ServerMemoryOrderFieldUpdatedAt.column:
		str = "UPDATED_AT"
	case ServerMemoryOrderFieldServerID.column:
		str = "SERVER"
	case ServerMemoryOrderFieldServerMemoryTypeID.column:
		str = "SERVER_MEMORY_TYPE"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f ServerMemoryOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *ServerMemoryOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("ServerMemoryOrderField %T must be a string", v)
	}
	switch str {
	case "ID":
		*f = *ServerMemoryOrderFieldID
	case "CREATED_AT":
		*f = *ServerMemoryOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *ServerMemoryOrderFieldUpdatedAt
	case "SERVER":
		*f = *ServerMemoryOrderFieldServerID
	case "SERVER_MEMORY_TYPE":
		*f = *ServerMemoryOrderFieldServerMemoryTypeID
	default:
		return fmt.Errorf("%s is not a valid ServerMemoryOrderField", str)
	}
	return nil
}

// ServerMemoryOrderField defines the ordering field of ServerMemory.
type ServerMemoryOrderField struct {
	// Value extracts the ordering value from the given ServerMemory.
	Value    func(*ServerMemory) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) servermemory.OrderOption
	toCursor func(*ServerMemory) Cursor
}

// ServerMemoryOrder defines the ordering of ServerMemory.
type ServerMemoryOrder struct {
	Direction OrderDirection          `json:"direction"`
	Field     *ServerMemoryOrderField `json:"field"`
}

// DefaultServerMemoryOrder is the default ordering of ServerMemory.
var DefaultServerMemoryOrder = &ServerMemoryOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &ServerMemoryOrderField{
		Value: func(sm *ServerMemory) (ent.Value, error) {
			return sm.ID, nil
		},
		column: servermemory.FieldID,
		toTerm: servermemory.ByID,
		toCursor: func(sm *ServerMemory) Cursor {
			return Cursor{ID: sm.ID}
		},
	},
}

// ToEdge converts ServerMemory into ServerMemoryEdge.
func (sm *ServerMemory) ToEdge(order *ServerMemoryOrder) *ServerMemoryEdge {
	if order == nil {
		order = DefaultServerMemoryOrder
	}
	return &ServerMemoryEdge{
		Node:   sm,
		Cursor: order.Field.toCursor(sm),
	}
}

// ServerMemoryTypeEdge is the edge representation of ServerMemoryType.
type ServerMemoryTypeEdge struct {
	Node   *ServerMemoryType `json:"node"`
	Cursor Cursor            `json:"cursor"`
}

// ServerMemoryTypeConnection is the connection containing edges to ServerMemoryType.
type ServerMemoryTypeConnection struct {
	Edges      []*ServerMemoryTypeEdge `json:"edges"`
	PageInfo   PageInfo                `json:"pageInfo"`
	TotalCount int                     `json:"totalCount"`
}

func (c *ServerMemoryTypeConnection) build(nodes []*ServerMemoryType, pager *servermemorytypePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *ServerMemoryType
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *ServerMemoryType {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *ServerMemoryType {
			return nodes[i]
		}
	}
	c.Edges = make([]*ServerMemoryTypeEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &ServerMemoryTypeEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// ServerMemoryTypePaginateOption enables pagination customization.
type ServerMemoryTypePaginateOption func(*servermemorytypePager) error

// WithServerMemoryTypeOrder configures pagination ordering.
func WithServerMemoryTypeOrder(order *ServerMemoryTypeOrder) ServerMemoryTypePaginateOption {
	if order == nil {
		order = DefaultServerMemoryTypeOrder
	}
	o := *order
	return func(pager *servermemorytypePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultServerMemoryTypeOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithServerMemoryTypeFilter configures pagination filter.
func WithServerMemoryTypeFilter(filter func(*ServerMemoryTypeQuery) (*ServerMemoryTypeQuery, error)) ServerMemoryTypePaginateOption {
	return func(pager *servermemorytypePager) error {
		if filter == nil {
			return errors.New("ServerMemoryTypeQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type servermemorytypePager struct {
	reverse bool
	order   *ServerMemoryTypeOrder
	filter  func(*ServerMemoryTypeQuery) (*ServerMemoryTypeQuery, error)
}

func newServerMemoryTypePager(opts []ServerMemoryTypePaginateOption, reverse bool) (*servermemorytypePager, error) {
	pager := &servermemorytypePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultServerMemoryTypeOrder
	}
	return pager, nil
}

func (p *servermemorytypePager) applyFilter(query *ServerMemoryTypeQuery) (*ServerMemoryTypeQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *servermemorytypePager) toCursor(smt *ServerMemoryType) Cursor {
	return p.order.Field.toCursor(smt)
}

func (p *servermemorytypePager) applyCursors(query *ServerMemoryTypeQuery, after, before *Cursor) (*ServerMemoryTypeQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultServerMemoryTypeOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *servermemorytypePager) applyOrder(query *ServerMemoryTypeQuery) *ServerMemoryTypeQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultServerMemoryTypeOrder.Field {
		query = query.Order(DefaultServerMemoryTypeOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *servermemorytypePager) orderExpr(query *ServerMemoryTypeQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultServerMemoryTypeOrder.Field {
			b.Comma().Ident(DefaultServerMemoryTypeOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to ServerMemoryType.
func (smt *ServerMemoryTypeQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ServerMemoryTypePaginateOption,
) (*ServerMemoryTypeConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newServerMemoryTypePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if smt, err = pager.applyFilter(smt); err != nil {
		return nil, err
	}
	conn := &ServerMemoryTypeConnection{Edges: []*ServerMemoryTypeEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = smt.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if smt, err = pager.applyCursors(smt, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		smt.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := smt.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	smt = pager.applyOrder(smt)
	nodes, err := smt.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// ServerMemoryTypeOrderFieldID orders ServerMemoryType by id.
	ServerMemoryTypeOrderFieldID = &ServerMemoryTypeOrderField{
		Value: func(smt *ServerMemoryType) (ent.Value, error) {
			return smt.ID, nil
		},
		column: servermemorytype.FieldID,
		toTerm: servermemorytype.ByID,
		toCursor: func(smt *ServerMemoryType) Cursor {
			return Cursor{
				ID:    smt.ID,
				Value: smt.ID,
			}
		},
	}
	// ServerMemoryTypeOrderFieldCreatedAt orders ServerMemoryType by created_at.
	ServerMemoryTypeOrderFieldCreatedAt = &ServerMemoryTypeOrderField{
		Value: func(smt *ServerMemoryType) (ent.Value, error) {
			return smt.CreatedAt, nil
		},
		column: servermemorytype.FieldCreatedAt,
		toTerm: servermemorytype.ByCreatedAt,
		toCursor: func(smt *ServerMemoryType) Cursor {
			return Cursor{
				ID:    smt.ID,
				Value: smt.CreatedAt,
			}
		},
	}
	// ServerMemoryTypeOrderFieldUpdatedAt orders ServerMemoryType by updated_at.
	ServerMemoryTypeOrderFieldUpdatedAt = &ServerMemoryTypeOrderField{
		Value: func(smt *ServerMemoryType) (ent.Value, error) {
			return smt.UpdatedAt, nil
		},
		column: servermemorytype.FieldUpdatedAt,
		toTerm: servermemorytype.ByUpdatedAt,
		toCursor: func(smt *ServerMemoryType) Cursor {
			return Cursor{
				ID:    smt.ID,
				Value: smt.UpdatedAt,
			}
		},
	}
	// ServerMemoryTypeOrderFieldVendor orders ServerMemoryType by vendor.
	ServerMemoryTypeOrderFieldVendor = &ServerMemoryTypeOrderField{
		Value: func(smt *ServerMemoryType) (ent.Value, error) {
			return smt.Vendor, nil
		},
		column: servermemorytype.FieldVendor,
		toTerm: servermemorytype.ByVendor,
		toCursor: func(smt *ServerMemoryType) Cursor {
			return Cursor{
				ID:    smt.ID,
				Value: smt.Vendor,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f ServerMemoryTypeOrderField) String() string {
	var str string
	switch f.column {
	case ServerMemoryTypeOrderFieldID.column:
		str = "ID"
	case ServerMemoryTypeOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	case ServerMemoryTypeOrderFieldUpdatedAt.column:
		str = "UPDATED_AT"
	case ServerMemoryTypeOrderFieldVendor.column:
		str = "NAME"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f ServerMemoryTypeOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *ServerMemoryTypeOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("ServerMemoryTypeOrderField %T must be a string", v)
	}
	switch str {
	case "ID":
		*f = *ServerMemoryTypeOrderFieldID
	case "CREATED_AT":
		*f = *ServerMemoryTypeOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *ServerMemoryTypeOrderFieldUpdatedAt
	case "NAME":
		*f = *ServerMemoryTypeOrderFieldVendor
	default:
		return fmt.Errorf("%s is not a valid ServerMemoryTypeOrderField", str)
	}
	return nil
}

// ServerMemoryTypeOrderField defines the ordering field of ServerMemoryType.
type ServerMemoryTypeOrderField struct {
	// Value extracts the ordering value from the given ServerMemoryType.
	Value    func(*ServerMemoryType) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) servermemorytype.OrderOption
	toCursor func(*ServerMemoryType) Cursor
}

// ServerMemoryTypeOrder defines the ordering of ServerMemoryType.
type ServerMemoryTypeOrder struct {
	Direction OrderDirection              `json:"direction"`
	Field     *ServerMemoryTypeOrderField `json:"field"`
}

// DefaultServerMemoryTypeOrder is the default ordering of ServerMemoryType.
var DefaultServerMemoryTypeOrder = &ServerMemoryTypeOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &ServerMemoryTypeOrderField{
		Value: func(smt *ServerMemoryType) (ent.Value, error) {
			return smt.ID, nil
		},
		column: servermemorytype.FieldID,
		toTerm: servermemorytype.ByID,
		toCursor: func(smt *ServerMemoryType) Cursor {
			return Cursor{ID: smt.ID}
		},
	},
}

// ToEdge converts ServerMemoryType into ServerMemoryTypeEdge.
func (smt *ServerMemoryType) ToEdge(order *ServerMemoryTypeOrder) *ServerMemoryTypeEdge {
	if order == nil {
		order = DefaultServerMemoryTypeOrder
	}
	return &ServerMemoryTypeEdge{
		Node:   smt,
		Cursor: order.Field.toCursor(smt),
	}
}

// ServerMotherboardEdge is the edge representation of ServerMotherboard.
type ServerMotherboardEdge struct {
	Node   *ServerMotherboard `json:"node"`
	Cursor Cursor             `json:"cursor"`
}

// ServerMotherboardConnection is the connection containing edges to ServerMotherboard.
type ServerMotherboardConnection struct {
	Edges      []*ServerMotherboardEdge `json:"edges"`
	PageInfo   PageInfo                 `json:"pageInfo"`
	TotalCount int                      `json:"totalCount"`
}

func (c *ServerMotherboardConnection) build(nodes []*ServerMotherboard, pager *servermotherboardPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *ServerMotherboard
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *ServerMotherboard {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *ServerMotherboard {
			return nodes[i]
		}
	}
	c.Edges = make([]*ServerMotherboardEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &ServerMotherboardEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// ServerMotherboardPaginateOption enables pagination customization.
type ServerMotherboardPaginateOption func(*servermotherboardPager) error

// WithServerMotherboardOrder configures pagination ordering.
func WithServerMotherboardOrder(order *ServerMotherboardOrder) ServerMotherboardPaginateOption {
	if order == nil {
		order = DefaultServerMotherboardOrder
	}
	o := *order
	return func(pager *servermotherboardPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultServerMotherboardOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithServerMotherboardFilter configures pagination filter.
func WithServerMotherboardFilter(filter func(*ServerMotherboardQuery) (*ServerMotherboardQuery, error)) ServerMotherboardPaginateOption {
	return func(pager *servermotherboardPager) error {
		if filter == nil {
			return errors.New("ServerMotherboardQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type servermotherboardPager struct {
	reverse bool
	order   *ServerMotherboardOrder
	filter  func(*ServerMotherboardQuery) (*ServerMotherboardQuery, error)
}

func newServerMotherboardPager(opts []ServerMotherboardPaginateOption, reverse bool) (*servermotherboardPager, error) {
	pager := &servermotherboardPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultServerMotherboardOrder
	}
	return pager, nil
}

func (p *servermotherboardPager) applyFilter(query *ServerMotherboardQuery) (*ServerMotherboardQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *servermotherboardPager) toCursor(sm *ServerMotherboard) Cursor {
	return p.order.Field.toCursor(sm)
}

func (p *servermotherboardPager) applyCursors(query *ServerMotherboardQuery, after, before *Cursor) (*ServerMotherboardQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultServerMotherboardOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *servermotherboardPager) applyOrder(query *ServerMotherboardQuery) *ServerMotherboardQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultServerMotherboardOrder.Field {
		query = query.Order(DefaultServerMotherboardOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *servermotherboardPager) orderExpr(query *ServerMotherboardQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultServerMotherboardOrder.Field {
			b.Comma().Ident(DefaultServerMotherboardOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to ServerMotherboard.
func (sm *ServerMotherboardQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ServerMotherboardPaginateOption,
) (*ServerMotherboardConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newServerMotherboardPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if sm, err = pager.applyFilter(sm); err != nil {
		return nil, err
	}
	conn := &ServerMotherboardConnection{Edges: []*ServerMotherboardEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = sm.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if sm, err = pager.applyCursors(sm, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		sm.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := sm.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	sm = pager.applyOrder(sm)
	nodes, err := sm.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// ServerMotherboardOrderFieldID orders ServerMotherboard by id.
	ServerMotherboardOrderFieldID = &ServerMotherboardOrderField{
		Value: func(sm *ServerMotherboard) (ent.Value, error) {
			return sm.ID, nil
		},
		column: servermotherboard.FieldID,
		toTerm: servermotherboard.ByID,
		toCursor: func(sm *ServerMotherboard) Cursor {
			return Cursor{
				ID:    sm.ID,
				Value: sm.ID,
			}
		},
	}
	// ServerMotherboardOrderFieldCreatedAt orders ServerMotherboard by created_at.
	ServerMotherboardOrderFieldCreatedAt = &ServerMotherboardOrderField{
		Value: func(sm *ServerMotherboard) (ent.Value, error) {
			return sm.CreatedAt, nil
		},
		column: servermotherboard.FieldCreatedAt,
		toTerm: servermotherboard.ByCreatedAt,
		toCursor: func(sm *ServerMotherboard) Cursor {
			return Cursor{
				ID:    sm.ID,
				Value: sm.CreatedAt,
			}
		},
	}
	// ServerMotherboardOrderFieldUpdatedAt orders ServerMotherboard by updated_at.
	ServerMotherboardOrderFieldUpdatedAt = &ServerMotherboardOrderField{
		Value: func(sm *ServerMotherboard) (ent.Value, error) {
			return sm.UpdatedAt, nil
		},
		column: servermotherboard.FieldUpdatedAt,
		toTerm: servermotherboard.ByUpdatedAt,
		toCursor: func(sm *ServerMotherboard) Cursor {
			return Cursor{
				ID:    sm.ID,
				Value: sm.UpdatedAt,
			}
		},
	}
	// ServerMotherboardOrderFieldServerMotherboardTypeID orders ServerMotherboard by server_motherboard_type_id.
	ServerMotherboardOrderFieldServerMotherboardTypeID = &ServerMotherboardOrderField{
		Value: func(sm *ServerMotherboard) (ent.Value, error) {
			return sm.ServerMotherboardTypeID, nil
		},
		column: servermotherboard.FieldServerMotherboardTypeID,
		toTerm: servermotherboard.ByServerMotherboardTypeID,
		toCursor: func(sm *ServerMotherboard) Cursor {
			return Cursor{
				ID:    sm.ID,
				Value: sm.ServerMotherboardTypeID,
			}
		},
	}
	// ServerMotherboardOrderFieldServerID orders ServerMotherboard by server_id.
	ServerMotherboardOrderFieldServerID = &ServerMotherboardOrderField{
		Value: func(sm *ServerMotherboard) (ent.Value, error) {
			return sm.ServerID, nil
		},
		column: servermotherboard.FieldServerID,
		toTerm: servermotherboard.ByServerID,
		toCursor: func(sm *ServerMotherboard) Cursor {
			return Cursor{
				ID:    sm.ID,
				Value: sm.ServerID,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f ServerMotherboardOrderField) String() string {
	var str string
	switch f.column {
	case ServerMotherboardOrderFieldID.column:
		str = "ID"
	case ServerMotherboardOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	case ServerMotherboardOrderFieldUpdatedAt.column:
		str = "UPDATED_AT"
	case ServerMotherboardOrderFieldServerMotherboardTypeID.column:
		str = "SERVER_MOTHERBOARD_TYPE"
	case ServerMotherboardOrderFieldServerID.column:
		str = "SERVER"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f ServerMotherboardOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *ServerMotherboardOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("ServerMotherboardOrderField %T must be a string", v)
	}
	switch str {
	case "ID":
		*f = *ServerMotherboardOrderFieldID
	case "CREATED_AT":
		*f = *ServerMotherboardOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *ServerMotherboardOrderFieldUpdatedAt
	case "SERVER_MOTHERBOARD_TYPE":
		*f = *ServerMotherboardOrderFieldServerMotherboardTypeID
	case "SERVER":
		*f = *ServerMotherboardOrderFieldServerID
	default:
		return fmt.Errorf("%s is not a valid ServerMotherboardOrderField", str)
	}
	return nil
}

// ServerMotherboardOrderField defines the ordering field of ServerMotherboard.
type ServerMotherboardOrderField struct {
	// Value extracts the ordering value from the given ServerMotherboard.
	Value    func(*ServerMotherboard) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) servermotherboard.OrderOption
	toCursor func(*ServerMotherboard) Cursor
}

// ServerMotherboardOrder defines the ordering of ServerMotherboard.
type ServerMotherboardOrder struct {
	Direction OrderDirection               `json:"direction"`
	Field     *ServerMotherboardOrderField `json:"field"`
}

// DefaultServerMotherboardOrder is the default ordering of ServerMotherboard.
var DefaultServerMotherboardOrder = &ServerMotherboardOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &ServerMotherboardOrderField{
		Value: func(sm *ServerMotherboard) (ent.Value, error) {
			return sm.ID, nil
		},
		column: servermotherboard.FieldID,
		toTerm: servermotherboard.ByID,
		toCursor: func(sm *ServerMotherboard) Cursor {
			return Cursor{ID: sm.ID}
		},
	},
}

// ToEdge converts ServerMotherboard into ServerMotherboardEdge.
func (sm *ServerMotherboard) ToEdge(order *ServerMotherboardOrder) *ServerMotherboardEdge {
	if order == nil {
		order = DefaultServerMotherboardOrder
	}
	return &ServerMotherboardEdge{
		Node:   sm,
		Cursor: order.Field.toCursor(sm),
	}
}

// ServerMotherboardTypeEdge is the edge representation of ServerMotherboardType.
type ServerMotherboardTypeEdge struct {
	Node   *ServerMotherboardType `json:"node"`
	Cursor Cursor                 `json:"cursor"`
}

// ServerMotherboardTypeConnection is the connection containing edges to ServerMotherboardType.
type ServerMotherboardTypeConnection struct {
	Edges      []*ServerMotherboardTypeEdge `json:"edges"`
	PageInfo   PageInfo                     `json:"pageInfo"`
	TotalCount int                          `json:"totalCount"`
}

func (c *ServerMotherboardTypeConnection) build(nodes []*ServerMotherboardType, pager *servermotherboardtypePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *ServerMotherboardType
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *ServerMotherboardType {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *ServerMotherboardType {
			return nodes[i]
		}
	}
	c.Edges = make([]*ServerMotherboardTypeEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &ServerMotherboardTypeEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// ServerMotherboardTypePaginateOption enables pagination customization.
type ServerMotherboardTypePaginateOption func(*servermotherboardtypePager) error

// WithServerMotherboardTypeOrder configures pagination ordering.
func WithServerMotherboardTypeOrder(order *ServerMotherboardTypeOrder) ServerMotherboardTypePaginateOption {
	if order == nil {
		order = DefaultServerMotherboardTypeOrder
	}
	o := *order
	return func(pager *servermotherboardtypePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultServerMotherboardTypeOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithServerMotherboardTypeFilter configures pagination filter.
func WithServerMotherboardTypeFilter(filter func(*ServerMotherboardTypeQuery) (*ServerMotherboardTypeQuery, error)) ServerMotherboardTypePaginateOption {
	return func(pager *servermotherboardtypePager) error {
		if filter == nil {
			return errors.New("ServerMotherboardTypeQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type servermotherboardtypePager struct {
	reverse bool
	order   *ServerMotherboardTypeOrder
	filter  func(*ServerMotherboardTypeQuery) (*ServerMotherboardTypeQuery, error)
}

func newServerMotherboardTypePager(opts []ServerMotherboardTypePaginateOption, reverse bool) (*servermotherboardtypePager, error) {
	pager := &servermotherboardtypePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultServerMotherboardTypeOrder
	}
	return pager, nil
}

func (p *servermotherboardtypePager) applyFilter(query *ServerMotherboardTypeQuery) (*ServerMotherboardTypeQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *servermotherboardtypePager) toCursor(smt *ServerMotherboardType) Cursor {
	return p.order.Field.toCursor(smt)
}

func (p *servermotherboardtypePager) applyCursors(query *ServerMotherboardTypeQuery, after, before *Cursor) (*ServerMotherboardTypeQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultServerMotherboardTypeOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *servermotherboardtypePager) applyOrder(query *ServerMotherboardTypeQuery) *ServerMotherboardTypeQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultServerMotherboardTypeOrder.Field {
		query = query.Order(DefaultServerMotherboardTypeOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *servermotherboardtypePager) orderExpr(query *ServerMotherboardTypeQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultServerMotherboardTypeOrder.Field {
			b.Comma().Ident(DefaultServerMotherboardTypeOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to ServerMotherboardType.
func (smt *ServerMotherboardTypeQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ServerMotherboardTypePaginateOption,
) (*ServerMotherboardTypeConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newServerMotherboardTypePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if smt, err = pager.applyFilter(smt); err != nil {
		return nil, err
	}
	conn := &ServerMotherboardTypeConnection{Edges: []*ServerMotherboardTypeEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = smt.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if smt, err = pager.applyCursors(smt, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		smt.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := smt.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	smt = pager.applyOrder(smt)
	nodes, err := smt.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// ServerMotherboardTypeOrderFieldID orders ServerMotherboardType by id.
	ServerMotherboardTypeOrderFieldID = &ServerMotherboardTypeOrderField{
		Value: func(smt *ServerMotherboardType) (ent.Value, error) {
			return smt.ID, nil
		},
		column: servermotherboardtype.FieldID,
		toTerm: servermotherboardtype.ByID,
		toCursor: func(smt *ServerMotherboardType) Cursor {
			return Cursor{
				ID:    smt.ID,
				Value: smt.ID,
			}
		},
	}
	// ServerMotherboardTypeOrderFieldCreatedAt orders ServerMotherboardType by created_at.
	ServerMotherboardTypeOrderFieldCreatedAt = &ServerMotherboardTypeOrderField{
		Value: func(smt *ServerMotherboardType) (ent.Value, error) {
			return smt.CreatedAt, nil
		},
		column: servermotherboardtype.FieldCreatedAt,
		toTerm: servermotherboardtype.ByCreatedAt,
		toCursor: func(smt *ServerMotherboardType) Cursor {
			return Cursor{
				ID:    smt.ID,
				Value: smt.CreatedAt,
			}
		},
	}
	// ServerMotherboardTypeOrderFieldUpdatedAt orders ServerMotherboardType by updated_at.
	ServerMotherboardTypeOrderFieldUpdatedAt = &ServerMotherboardTypeOrderField{
		Value: func(smt *ServerMotherboardType) (ent.Value, error) {
			return smt.UpdatedAt, nil
		},
		column: servermotherboardtype.FieldUpdatedAt,
		toTerm: servermotherboardtype.ByUpdatedAt,
		toCursor: func(smt *ServerMotherboardType) Cursor {
			return Cursor{
				ID:    smt.ID,
				Value: smt.UpdatedAt,
			}
		},
	}
	// ServerMotherboardTypeOrderFieldVendor orders ServerMotherboardType by vendor.
	ServerMotherboardTypeOrderFieldVendor = &ServerMotherboardTypeOrderField{
		Value: func(smt *ServerMotherboardType) (ent.Value, error) {
			return smt.Vendor, nil
		},
		column: servermotherboardtype.FieldVendor,
		toTerm: servermotherboardtype.ByVendor,
		toCursor: func(smt *ServerMotherboardType) Cursor {
			return Cursor{
				ID:    smt.ID,
				Value: smt.Vendor,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f ServerMotherboardTypeOrderField) String() string {
	var str string
	switch f.column {
	case ServerMotherboardTypeOrderFieldID.column:
		str = "ID"
	case ServerMotherboardTypeOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	case ServerMotherboardTypeOrderFieldUpdatedAt.column:
		str = "UPDATED_AT"
	case ServerMotherboardTypeOrderFieldVendor.column:
		str = "NAME"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f ServerMotherboardTypeOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *ServerMotherboardTypeOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("ServerMotherboardTypeOrderField %T must be a string", v)
	}
	switch str {
	case "ID":
		*f = *ServerMotherboardTypeOrderFieldID
	case "CREATED_AT":
		*f = *ServerMotherboardTypeOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *ServerMotherboardTypeOrderFieldUpdatedAt
	case "NAME":
		*f = *ServerMotherboardTypeOrderFieldVendor
	default:
		return fmt.Errorf("%s is not a valid ServerMotherboardTypeOrderField", str)
	}
	return nil
}

// ServerMotherboardTypeOrderField defines the ordering field of ServerMotherboardType.
type ServerMotherboardTypeOrderField struct {
	// Value extracts the ordering value from the given ServerMotherboardType.
	Value    func(*ServerMotherboardType) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) servermotherboardtype.OrderOption
	toCursor func(*ServerMotherboardType) Cursor
}

// ServerMotherboardTypeOrder defines the ordering of ServerMotherboardType.
type ServerMotherboardTypeOrder struct {
	Direction OrderDirection                   `json:"direction"`
	Field     *ServerMotherboardTypeOrderField `json:"field"`
}

// DefaultServerMotherboardTypeOrder is the default ordering of ServerMotherboardType.
var DefaultServerMotherboardTypeOrder = &ServerMotherboardTypeOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &ServerMotherboardTypeOrderField{
		Value: func(smt *ServerMotherboardType) (ent.Value, error) {
			return smt.ID, nil
		},
		column: servermotherboardtype.FieldID,
		toTerm: servermotherboardtype.ByID,
		toCursor: func(smt *ServerMotherboardType) Cursor {
			return Cursor{ID: smt.ID}
		},
	},
}

// ToEdge converts ServerMotherboardType into ServerMotherboardTypeEdge.
func (smt *ServerMotherboardType) ToEdge(order *ServerMotherboardTypeOrder) *ServerMotherboardTypeEdge {
	if order == nil {
		order = DefaultServerMotherboardTypeOrder
	}
	return &ServerMotherboardTypeEdge{
		Node:   smt,
		Cursor: order.Field.toCursor(smt),
	}
}

// ServerPowerSupplyEdge is the edge representation of ServerPowerSupply.
type ServerPowerSupplyEdge struct {
	Node   *ServerPowerSupply `json:"node"`
	Cursor Cursor             `json:"cursor"`
}

// ServerPowerSupplyConnection is the connection containing edges to ServerPowerSupply.
type ServerPowerSupplyConnection struct {
	Edges      []*ServerPowerSupplyEdge `json:"edges"`
	PageInfo   PageInfo                 `json:"pageInfo"`
	TotalCount int                      `json:"totalCount"`
}

func (c *ServerPowerSupplyConnection) build(nodes []*ServerPowerSupply, pager *serverpowersupplyPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *ServerPowerSupply
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *ServerPowerSupply {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *ServerPowerSupply {
			return nodes[i]
		}
	}
	c.Edges = make([]*ServerPowerSupplyEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &ServerPowerSupplyEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// ServerPowerSupplyPaginateOption enables pagination customization.
type ServerPowerSupplyPaginateOption func(*serverpowersupplyPager) error

// WithServerPowerSupplyOrder configures pagination ordering.
func WithServerPowerSupplyOrder(order *ServerPowerSupplyOrder) ServerPowerSupplyPaginateOption {
	if order == nil {
		order = DefaultServerPowerSupplyOrder
	}
	o := *order
	return func(pager *serverpowersupplyPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultServerPowerSupplyOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithServerPowerSupplyFilter configures pagination filter.
func WithServerPowerSupplyFilter(filter func(*ServerPowerSupplyQuery) (*ServerPowerSupplyQuery, error)) ServerPowerSupplyPaginateOption {
	return func(pager *serverpowersupplyPager) error {
		if filter == nil {
			return errors.New("ServerPowerSupplyQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type serverpowersupplyPager struct {
	reverse bool
	order   *ServerPowerSupplyOrder
	filter  func(*ServerPowerSupplyQuery) (*ServerPowerSupplyQuery, error)
}

func newServerPowerSupplyPager(opts []ServerPowerSupplyPaginateOption, reverse bool) (*serverpowersupplyPager, error) {
	pager := &serverpowersupplyPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultServerPowerSupplyOrder
	}
	return pager, nil
}

func (p *serverpowersupplyPager) applyFilter(query *ServerPowerSupplyQuery) (*ServerPowerSupplyQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *serverpowersupplyPager) toCursor(sps *ServerPowerSupply) Cursor {
	return p.order.Field.toCursor(sps)
}

func (p *serverpowersupplyPager) applyCursors(query *ServerPowerSupplyQuery, after, before *Cursor) (*ServerPowerSupplyQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultServerPowerSupplyOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *serverpowersupplyPager) applyOrder(query *ServerPowerSupplyQuery) *ServerPowerSupplyQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultServerPowerSupplyOrder.Field {
		query = query.Order(DefaultServerPowerSupplyOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *serverpowersupplyPager) orderExpr(query *ServerPowerSupplyQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultServerPowerSupplyOrder.Field {
			b.Comma().Ident(DefaultServerPowerSupplyOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to ServerPowerSupply.
func (sps *ServerPowerSupplyQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ServerPowerSupplyPaginateOption,
) (*ServerPowerSupplyConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newServerPowerSupplyPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if sps, err = pager.applyFilter(sps); err != nil {
		return nil, err
	}
	conn := &ServerPowerSupplyConnection{Edges: []*ServerPowerSupplyEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = sps.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if sps, err = pager.applyCursors(sps, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		sps.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := sps.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	sps = pager.applyOrder(sps)
	nodes, err := sps.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// ServerPowerSupplyOrderFieldID orders ServerPowerSupply by id.
	ServerPowerSupplyOrderFieldID = &ServerPowerSupplyOrderField{
		Value: func(sps *ServerPowerSupply) (ent.Value, error) {
			return sps.ID, nil
		},
		column: serverpowersupply.FieldID,
		toTerm: serverpowersupply.ByID,
		toCursor: func(sps *ServerPowerSupply) Cursor {
			return Cursor{
				ID:    sps.ID,
				Value: sps.ID,
			}
		},
	}
	// ServerPowerSupplyOrderFieldCreatedAt orders ServerPowerSupply by created_at.
	ServerPowerSupplyOrderFieldCreatedAt = &ServerPowerSupplyOrderField{
		Value: func(sps *ServerPowerSupply) (ent.Value, error) {
			return sps.CreatedAt, nil
		},
		column: serverpowersupply.FieldCreatedAt,
		toTerm: serverpowersupply.ByCreatedAt,
		toCursor: func(sps *ServerPowerSupply) Cursor {
			return Cursor{
				ID:    sps.ID,
				Value: sps.CreatedAt,
			}
		},
	}
	// ServerPowerSupplyOrderFieldUpdatedAt orders ServerPowerSupply by updated_at.
	ServerPowerSupplyOrderFieldUpdatedAt = &ServerPowerSupplyOrderField{
		Value: func(sps *ServerPowerSupply) (ent.Value, error) {
			return sps.UpdatedAt, nil
		},
		column: serverpowersupply.FieldUpdatedAt,
		toTerm: serverpowersupply.ByUpdatedAt,
		toCursor: func(sps *ServerPowerSupply) Cursor {
			return Cursor{
				ID:    sps.ID,
				Value: sps.UpdatedAt,
			}
		},
	}
	// ServerPowerSupplyOrderFieldServerPowerSupplyTypeID orders ServerPowerSupply by server_power_supply_type_id.
	ServerPowerSupplyOrderFieldServerPowerSupplyTypeID = &ServerPowerSupplyOrderField{
		Value: func(sps *ServerPowerSupply) (ent.Value, error) {
			return sps.ServerPowerSupplyTypeID, nil
		},
		column: serverpowersupply.FieldServerPowerSupplyTypeID,
		toTerm: serverpowersupply.ByServerPowerSupplyTypeID,
		toCursor: func(sps *ServerPowerSupply) Cursor {
			return Cursor{
				ID:    sps.ID,
				Value: sps.ServerPowerSupplyTypeID,
			}
		},
	}
	// ServerPowerSupplyOrderFieldServerID orders ServerPowerSupply by server_id.
	ServerPowerSupplyOrderFieldServerID = &ServerPowerSupplyOrderField{
		Value: func(sps *ServerPowerSupply) (ent.Value, error) {
			return sps.ServerID, nil
		},
		column: serverpowersupply.FieldServerID,
		toTerm: serverpowersupply.ByServerID,
		toCursor: func(sps *ServerPowerSupply) Cursor {
			return Cursor{
				ID:    sps.ID,
				Value: sps.ServerID,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f ServerPowerSupplyOrderField) String() string {
	var str string
	switch f.column {
	case ServerPowerSupplyOrderFieldID.column:
		str = "ID"
	case ServerPowerSupplyOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	case ServerPowerSupplyOrderFieldUpdatedAt.column:
		str = "UPDATED_AT"
	case ServerPowerSupplyOrderFieldServerPowerSupplyTypeID.column:
		str = "PARENT_CHASSIS"
	case ServerPowerSupplyOrderFieldServerID.column:
		str = "SERVER"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f ServerPowerSupplyOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *ServerPowerSupplyOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("ServerPowerSupplyOrderField %T must be a string", v)
	}
	switch str {
	case "ID":
		*f = *ServerPowerSupplyOrderFieldID
	case "CREATED_AT":
		*f = *ServerPowerSupplyOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *ServerPowerSupplyOrderFieldUpdatedAt
	case "PARENT_CHASSIS":
		*f = *ServerPowerSupplyOrderFieldServerPowerSupplyTypeID
	case "SERVER":
		*f = *ServerPowerSupplyOrderFieldServerID
	default:
		return fmt.Errorf("%s is not a valid ServerPowerSupplyOrderField", str)
	}
	return nil
}

// ServerPowerSupplyOrderField defines the ordering field of ServerPowerSupply.
type ServerPowerSupplyOrderField struct {
	// Value extracts the ordering value from the given ServerPowerSupply.
	Value    func(*ServerPowerSupply) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) serverpowersupply.OrderOption
	toCursor func(*ServerPowerSupply) Cursor
}

// ServerPowerSupplyOrder defines the ordering of ServerPowerSupply.
type ServerPowerSupplyOrder struct {
	Direction OrderDirection               `json:"direction"`
	Field     *ServerPowerSupplyOrderField `json:"field"`
}

// DefaultServerPowerSupplyOrder is the default ordering of ServerPowerSupply.
var DefaultServerPowerSupplyOrder = &ServerPowerSupplyOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &ServerPowerSupplyOrderField{
		Value: func(sps *ServerPowerSupply) (ent.Value, error) {
			return sps.ID, nil
		},
		column: serverpowersupply.FieldID,
		toTerm: serverpowersupply.ByID,
		toCursor: func(sps *ServerPowerSupply) Cursor {
			return Cursor{ID: sps.ID}
		},
	},
}

// ToEdge converts ServerPowerSupply into ServerPowerSupplyEdge.
func (sps *ServerPowerSupply) ToEdge(order *ServerPowerSupplyOrder) *ServerPowerSupplyEdge {
	if order == nil {
		order = DefaultServerPowerSupplyOrder
	}
	return &ServerPowerSupplyEdge{
		Node:   sps,
		Cursor: order.Field.toCursor(sps),
	}
}

// ServerPowerSupplyTypeEdge is the edge representation of ServerPowerSupplyType.
type ServerPowerSupplyTypeEdge struct {
	Node   *ServerPowerSupplyType `json:"node"`
	Cursor Cursor                 `json:"cursor"`
}

// ServerPowerSupplyTypeConnection is the connection containing edges to ServerPowerSupplyType.
type ServerPowerSupplyTypeConnection struct {
	Edges      []*ServerPowerSupplyTypeEdge `json:"edges"`
	PageInfo   PageInfo                     `json:"pageInfo"`
	TotalCount int                          `json:"totalCount"`
}

func (c *ServerPowerSupplyTypeConnection) build(nodes []*ServerPowerSupplyType, pager *serverpowersupplytypePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *ServerPowerSupplyType
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *ServerPowerSupplyType {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *ServerPowerSupplyType {
			return nodes[i]
		}
	}
	c.Edges = make([]*ServerPowerSupplyTypeEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &ServerPowerSupplyTypeEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// ServerPowerSupplyTypePaginateOption enables pagination customization.
type ServerPowerSupplyTypePaginateOption func(*serverpowersupplytypePager) error

// WithServerPowerSupplyTypeOrder configures pagination ordering.
func WithServerPowerSupplyTypeOrder(order *ServerPowerSupplyTypeOrder) ServerPowerSupplyTypePaginateOption {
	if order == nil {
		order = DefaultServerPowerSupplyTypeOrder
	}
	o := *order
	return func(pager *serverpowersupplytypePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultServerPowerSupplyTypeOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithServerPowerSupplyTypeFilter configures pagination filter.
func WithServerPowerSupplyTypeFilter(filter func(*ServerPowerSupplyTypeQuery) (*ServerPowerSupplyTypeQuery, error)) ServerPowerSupplyTypePaginateOption {
	return func(pager *serverpowersupplytypePager) error {
		if filter == nil {
			return errors.New("ServerPowerSupplyTypeQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type serverpowersupplytypePager struct {
	reverse bool
	order   *ServerPowerSupplyTypeOrder
	filter  func(*ServerPowerSupplyTypeQuery) (*ServerPowerSupplyTypeQuery, error)
}

func newServerPowerSupplyTypePager(opts []ServerPowerSupplyTypePaginateOption, reverse bool) (*serverpowersupplytypePager, error) {
	pager := &serverpowersupplytypePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultServerPowerSupplyTypeOrder
	}
	return pager, nil
}

func (p *serverpowersupplytypePager) applyFilter(query *ServerPowerSupplyTypeQuery) (*ServerPowerSupplyTypeQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *serverpowersupplytypePager) toCursor(spst *ServerPowerSupplyType) Cursor {
	return p.order.Field.toCursor(spst)
}

func (p *serverpowersupplytypePager) applyCursors(query *ServerPowerSupplyTypeQuery, after, before *Cursor) (*ServerPowerSupplyTypeQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultServerPowerSupplyTypeOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *serverpowersupplytypePager) applyOrder(query *ServerPowerSupplyTypeQuery) *ServerPowerSupplyTypeQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultServerPowerSupplyTypeOrder.Field {
		query = query.Order(DefaultServerPowerSupplyTypeOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *serverpowersupplytypePager) orderExpr(query *ServerPowerSupplyTypeQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultServerPowerSupplyTypeOrder.Field {
			b.Comma().Ident(DefaultServerPowerSupplyTypeOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to ServerPowerSupplyType.
func (spst *ServerPowerSupplyTypeQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ServerPowerSupplyTypePaginateOption,
) (*ServerPowerSupplyTypeConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newServerPowerSupplyTypePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if spst, err = pager.applyFilter(spst); err != nil {
		return nil, err
	}
	conn := &ServerPowerSupplyTypeConnection{Edges: []*ServerPowerSupplyTypeEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = spst.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if spst, err = pager.applyCursors(spst, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		spst.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := spst.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	spst = pager.applyOrder(spst)
	nodes, err := spst.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// ServerPowerSupplyTypeOrderFieldID orders ServerPowerSupplyType by id.
	ServerPowerSupplyTypeOrderFieldID = &ServerPowerSupplyTypeOrderField{
		Value: func(spst *ServerPowerSupplyType) (ent.Value, error) {
			return spst.ID, nil
		},
		column: serverpowersupplytype.FieldID,
		toTerm: serverpowersupplytype.ByID,
		toCursor: func(spst *ServerPowerSupplyType) Cursor {
			return Cursor{
				ID:    spst.ID,
				Value: spst.ID,
			}
		},
	}
	// ServerPowerSupplyTypeOrderFieldCreatedAt orders ServerPowerSupplyType by created_at.
	ServerPowerSupplyTypeOrderFieldCreatedAt = &ServerPowerSupplyTypeOrderField{
		Value: func(spst *ServerPowerSupplyType) (ent.Value, error) {
			return spst.CreatedAt, nil
		},
		column: serverpowersupplytype.FieldCreatedAt,
		toTerm: serverpowersupplytype.ByCreatedAt,
		toCursor: func(spst *ServerPowerSupplyType) Cursor {
			return Cursor{
				ID:    spst.ID,
				Value: spst.CreatedAt,
			}
		},
	}
	// ServerPowerSupplyTypeOrderFieldUpdatedAt orders ServerPowerSupplyType by updated_at.
	ServerPowerSupplyTypeOrderFieldUpdatedAt = &ServerPowerSupplyTypeOrderField{
		Value: func(spst *ServerPowerSupplyType) (ent.Value, error) {
			return spst.UpdatedAt, nil
		},
		column: serverpowersupplytype.FieldUpdatedAt,
		toTerm: serverpowersupplytype.ByUpdatedAt,
		toCursor: func(spst *ServerPowerSupplyType) Cursor {
			return Cursor{
				ID:    spst.ID,
				Value: spst.UpdatedAt,
			}
		},
	}
	// ServerPowerSupplyTypeOrderFieldVendor orders ServerPowerSupplyType by vendor.
	ServerPowerSupplyTypeOrderFieldVendor = &ServerPowerSupplyTypeOrderField{
		Value: func(spst *ServerPowerSupplyType) (ent.Value, error) {
			return spst.Vendor, nil
		},
		column: serverpowersupplytype.FieldVendor,
		toTerm: serverpowersupplytype.ByVendor,
		toCursor: func(spst *ServerPowerSupplyType) Cursor {
			return Cursor{
				ID:    spst.ID,
				Value: spst.Vendor,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f ServerPowerSupplyTypeOrderField) String() string {
	var str string
	switch f.column {
	case ServerPowerSupplyTypeOrderFieldID.column:
		str = "ID"
	case ServerPowerSupplyTypeOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	case ServerPowerSupplyTypeOrderFieldUpdatedAt.column:
		str = "UPDATED_AT"
	case ServerPowerSupplyTypeOrderFieldVendor.column:
		str = "NAME"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f ServerPowerSupplyTypeOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *ServerPowerSupplyTypeOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("ServerPowerSupplyTypeOrderField %T must be a string", v)
	}
	switch str {
	case "ID":
		*f = *ServerPowerSupplyTypeOrderFieldID
	case "CREATED_AT":
		*f = *ServerPowerSupplyTypeOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *ServerPowerSupplyTypeOrderFieldUpdatedAt
	case "NAME":
		*f = *ServerPowerSupplyTypeOrderFieldVendor
	default:
		return fmt.Errorf("%s is not a valid ServerPowerSupplyTypeOrderField", str)
	}
	return nil
}

// ServerPowerSupplyTypeOrderField defines the ordering field of ServerPowerSupplyType.
type ServerPowerSupplyTypeOrderField struct {
	// Value extracts the ordering value from the given ServerPowerSupplyType.
	Value    func(*ServerPowerSupplyType) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) serverpowersupplytype.OrderOption
	toCursor func(*ServerPowerSupplyType) Cursor
}

// ServerPowerSupplyTypeOrder defines the ordering of ServerPowerSupplyType.
type ServerPowerSupplyTypeOrder struct {
	Direction OrderDirection                   `json:"direction"`
	Field     *ServerPowerSupplyTypeOrderField `json:"field"`
}

// DefaultServerPowerSupplyTypeOrder is the default ordering of ServerPowerSupplyType.
var DefaultServerPowerSupplyTypeOrder = &ServerPowerSupplyTypeOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &ServerPowerSupplyTypeOrderField{
		Value: func(spst *ServerPowerSupplyType) (ent.Value, error) {
			return spst.ID, nil
		},
		column: serverpowersupplytype.FieldID,
		toTerm: serverpowersupplytype.ByID,
		toCursor: func(spst *ServerPowerSupplyType) Cursor {
			return Cursor{ID: spst.ID}
		},
	},
}

// ToEdge converts ServerPowerSupplyType into ServerPowerSupplyTypeEdge.
func (spst *ServerPowerSupplyType) ToEdge(order *ServerPowerSupplyTypeOrder) *ServerPowerSupplyTypeEdge {
	if order == nil {
		order = DefaultServerPowerSupplyTypeOrder
	}
	return &ServerPowerSupplyTypeEdge{
		Node:   spst,
		Cursor: order.Field.toCursor(spst),
	}
}

// ServerTypeEdge is the edge representation of ServerType.
type ServerTypeEdge struct {
	Node   *ServerType `json:"node"`
	Cursor Cursor      `json:"cursor"`
}

// ServerTypeConnection is the connection containing edges to ServerType.
type ServerTypeConnection struct {
	Edges      []*ServerTypeEdge `json:"edges"`
	PageInfo   PageInfo          `json:"pageInfo"`
	TotalCount int               `json:"totalCount"`
}

func (c *ServerTypeConnection) build(nodes []*ServerType, pager *servertypePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *ServerType
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *ServerType {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *ServerType {
			return nodes[i]
		}
	}
	c.Edges = make([]*ServerTypeEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &ServerTypeEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// ServerTypePaginateOption enables pagination customization.
type ServerTypePaginateOption func(*servertypePager) error

// WithServerTypeOrder configures pagination ordering.
func WithServerTypeOrder(order *ServerTypeOrder) ServerTypePaginateOption {
	if order == nil {
		order = DefaultServerTypeOrder
	}
	o := *order
	return func(pager *servertypePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultServerTypeOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithServerTypeFilter configures pagination filter.
func WithServerTypeFilter(filter func(*ServerTypeQuery) (*ServerTypeQuery, error)) ServerTypePaginateOption {
	return func(pager *servertypePager) error {
		if filter == nil {
			return errors.New("ServerTypeQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type servertypePager struct {
	reverse bool
	order   *ServerTypeOrder
	filter  func(*ServerTypeQuery) (*ServerTypeQuery, error)
}

func newServerTypePager(opts []ServerTypePaginateOption, reverse bool) (*servertypePager, error) {
	pager := &servertypePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultServerTypeOrder
	}
	return pager, nil
}

func (p *servertypePager) applyFilter(query *ServerTypeQuery) (*ServerTypeQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *servertypePager) toCursor(st *ServerType) Cursor {
	return p.order.Field.toCursor(st)
}

func (p *servertypePager) applyCursors(query *ServerTypeQuery, after, before *Cursor) (*ServerTypeQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultServerTypeOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *servertypePager) applyOrder(query *ServerTypeQuery) *ServerTypeQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultServerTypeOrder.Field {
		query = query.Order(DefaultServerTypeOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *servertypePager) orderExpr(query *ServerTypeQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultServerTypeOrder.Field {
			b.Comma().Ident(DefaultServerTypeOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to ServerType.
func (st *ServerTypeQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ServerTypePaginateOption,
) (*ServerTypeConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newServerTypePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if st, err = pager.applyFilter(st); err != nil {
		return nil, err
	}
	conn := &ServerTypeConnection{Edges: []*ServerTypeEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = st.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if st, err = pager.applyCursors(st, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		st.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := st.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	st = pager.applyOrder(st)
	nodes, err := st.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// ServerTypeOrderFieldID orders ServerType by id.
	ServerTypeOrderFieldID = &ServerTypeOrderField{
		Value: func(st *ServerType) (ent.Value, error) {
			return st.ID, nil
		},
		column: servertype.FieldID,
		toTerm: servertype.ByID,
		toCursor: func(st *ServerType) Cursor {
			return Cursor{
				ID:    st.ID,
				Value: st.ID,
			}
		},
	}
	// ServerTypeOrderFieldCreatedAt orders ServerType by created_at.
	ServerTypeOrderFieldCreatedAt = &ServerTypeOrderField{
		Value: func(st *ServerType) (ent.Value, error) {
			return st.CreatedAt, nil
		},
		column: servertype.FieldCreatedAt,
		toTerm: servertype.ByCreatedAt,
		toCursor: func(st *ServerType) Cursor {
			return Cursor{
				ID:    st.ID,
				Value: st.CreatedAt,
			}
		},
	}
	// ServerTypeOrderFieldUpdatedAt orders ServerType by updated_at.
	ServerTypeOrderFieldUpdatedAt = &ServerTypeOrderField{
		Value: func(st *ServerType) (ent.Value, error) {
			return st.UpdatedAt, nil
		},
		column: servertype.FieldUpdatedAt,
		toTerm: servertype.ByUpdatedAt,
		toCursor: func(st *ServerType) Cursor {
			return Cursor{
				ID:    st.ID,
				Value: st.UpdatedAt,
			}
		},
	}
	// ServerTypeOrderFieldName orders ServerType by name.
	ServerTypeOrderFieldName = &ServerTypeOrderField{
		Value: func(st *ServerType) (ent.Value, error) {
			return st.Name, nil
		},
		column: servertype.FieldName,
		toTerm: servertype.ByName,
		toCursor: func(st *ServerType) Cursor {
			return Cursor{
				ID:    st.ID,
				Value: st.Name,
			}
		},
	}
	// ServerTypeOrderFieldOwnerID orders ServerType by owner_id.
	ServerTypeOrderFieldOwnerID = &ServerTypeOrderField{
		Value: func(st *ServerType) (ent.Value, error) {
			return st.OwnerID, nil
		},
		column: servertype.FieldOwnerID,
		toTerm: servertype.ByOwnerID,
		toCursor: func(st *ServerType) Cursor {
			return Cursor{
				ID:    st.ID,
				Value: st.OwnerID,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f ServerTypeOrderField) String() string {
	var str string
	switch f.column {
	case ServerTypeOrderFieldID.column:
		str = "ID"
	case ServerTypeOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	case ServerTypeOrderFieldUpdatedAt.column:
		str = "UPDATED_AT"
	case ServerTypeOrderFieldName.column:
		str = "NAME"
	case ServerTypeOrderFieldOwnerID.column:
		str = "OWNER"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f ServerTypeOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *ServerTypeOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("ServerTypeOrderField %T must be a string", v)
	}
	switch str {
	case "ID":
		*f = *ServerTypeOrderFieldID
	case "CREATED_AT":
		*f = *ServerTypeOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *ServerTypeOrderFieldUpdatedAt
	case "NAME":
		*f = *ServerTypeOrderFieldName
	case "OWNER":
		*f = *ServerTypeOrderFieldOwnerID
	default:
		return fmt.Errorf("%s is not a valid ServerTypeOrderField", str)
	}
	return nil
}

// ServerTypeOrderField defines the ordering field of ServerType.
type ServerTypeOrderField struct {
	// Value extracts the ordering value from the given ServerType.
	Value    func(*ServerType) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) servertype.OrderOption
	toCursor func(*ServerType) Cursor
}

// ServerTypeOrder defines the ordering of ServerType.
type ServerTypeOrder struct {
	Direction OrderDirection        `json:"direction"`
	Field     *ServerTypeOrderField `json:"field"`
}

// DefaultServerTypeOrder is the default ordering of ServerType.
var DefaultServerTypeOrder = &ServerTypeOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &ServerTypeOrderField{
		Value: func(st *ServerType) (ent.Value, error) {
			return st.ID, nil
		},
		column: servertype.FieldID,
		toTerm: servertype.ByID,
		toCursor: func(st *ServerType) Cursor {
			return Cursor{ID: st.ID}
		},
	},
}

// ToEdge converts ServerType into ServerTypeEdge.
func (st *ServerType) ToEdge(order *ServerTypeOrder) *ServerTypeEdge {
	if order == nil {
		order = DefaultServerTypeOrder
	}
	return &ServerTypeEdge{
		Node:   st,
		Cursor: order.Field.toCursor(st),
	}
}
