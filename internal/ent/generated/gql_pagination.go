// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"io"
	"strconv"

	"entgo.io/contrib/entgql"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/errcode"
	"github.com/vektah/gqlparser/v2/gqlerror"
	"go.infratographer.com/server-api/internal/ent/generated/provider"
	"go.infratographer.com/server-api/internal/ent/generated/server"
	"go.infratographer.com/server-api/internal/ent/generated/serverchassis"
	"go.infratographer.com/server-api/internal/ent/generated/serverchassistype"
	"go.infratographer.com/server-api/internal/ent/generated/servercomponent"
	"go.infratographer.com/server-api/internal/ent/generated/servercomponenttype"
	"go.infratographer.com/server-api/internal/ent/generated/servertype"
	"go.infratographer.com/x/gidx"
)

// Common entgql types.
type (
	Cursor         = entgql.Cursor[gidx.PrefixedID]
	PageInfo       = entgql.PageInfo[gidx.PrefixedID]
	OrderDirection = entgql.OrderDirection
)

func orderFunc(o OrderDirection, field string) func(*sql.Selector) {
	if o == entgql.OrderDirectionDesc {
		return Desc(field)
	}
	return Asc(field)
}

const errInvalidPagination = "INVALID_PAGINATION"

func validateFirstLast(first, last *int) (err *gqlerror.Error) {
	switch {
	case first != nil && last != nil:
		err = &gqlerror.Error{
			Message: "Passing both `first` and `last` to paginate a connection is not supported.",
		}
	case first != nil && *first < 0:
		err = &gqlerror.Error{
			Message: "`first` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	case last != nil && *last < 0:
		err = &gqlerror.Error{
			Message: "`last` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	}
	return err
}

func collectedField(ctx context.Context, path ...string) *graphql.CollectedField {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	field := fc.Field
	oc := graphql.GetOperationContext(ctx)
walk:
	for _, name := range path {
		for _, f := range graphql.CollectFields(oc, field.Selections, nil) {
			if f.Alias == name {
				field = f
				continue walk
			}
		}
		return nil
	}
	return &field
}

func hasCollectedField(ctx context.Context, path ...string) bool {
	if graphql.GetFieldContext(ctx) == nil {
		return true
	}
	return collectedField(ctx, path...) != nil
}

const (
	edgesField      = "edges"
	nodeField       = "node"
	pageInfoField   = "pageInfo"
	totalCountField = "totalCount"
)

func paginateLimit(first, last *int) int {
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	return limit
}

// ServerProvider is the type alias for Provider.
type ServerProvider = Provider

// ServerProviderEdge is the edge representation of ServerProvider.
type ServerProviderEdge struct {
	Node   *ServerProvider `json:"node"`
	Cursor Cursor          `json:"cursor"`
}

// ServerProviderConnection is the connection containing edges to ServerProvider.
type ServerProviderConnection struct {
	Edges      []*ServerProviderEdge `json:"edges"`
	PageInfo   PageInfo              `json:"pageInfo"`
	TotalCount int                   `json:"totalCount"`
}

func (c *ServerProviderConnection) build(nodes []*ServerProvider, pager *serverproviderPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *ServerProvider
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *ServerProvider {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *ServerProvider {
			return nodes[i]
		}
	}
	c.Edges = make([]*ServerProviderEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &ServerProviderEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// ServerProviderPaginateOption enables pagination customization.
type ServerProviderPaginateOption func(*serverproviderPager) error

// WithServerProviderOrder configures pagination ordering.
func WithServerProviderOrder(order *ServerProviderOrder) ServerProviderPaginateOption {
	if order == nil {
		order = DefaultServerProviderOrder
	}
	o := *order
	return func(pager *serverproviderPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultServerProviderOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithServerProviderFilter configures pagination filter.
func WithServerProviderFilter(filter func(*ProviderQuery) (*ProviderQuery, error)) ServerProviderPaginateOption {
	return func(pager *serverproviderPager) error {
		if filter == nil {
			return errors.New("ProviderQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type serverproviderPager struct {
	reverse bool
	order   *ServerProviderOrder
	filter  func(*ProviderQuery) (*ProviderQuery, error)
}

func newServerProviderPager(opts []ServerProviderPaginateOption, reverse bool) (*serverproviderPager, error) {
	pager := &serverproviderPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultServerProviderOrder
	}
	return pager, nil
}

func (p *serverproviderPager) applyFilter(query *ProviderQuery) (*ProviderQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *serverproviderPager) toCursor(pr *ServerProvider) Cursor {
	return p.order.Field.toCursor(pr)
}

func (p *serverproviderPager) applyCursors(query *ProviderQuery, after, before *Cursor) (*ProviderQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultServerProviderOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *serverproviderPager) applyOrder(query *ProviderQuery) *ProviderQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultServerProviderOrder.Field {
		query = query.Order(DefaultServerProviderOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *serverproviderPager) orderExpr(query *ProviderQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultServerProviderOrder.Field {
			b.Comma().Ident(DefaultServerProviderOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to ServerProvider.
func (pr *ProviderQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ServerProviderPaginateOption,
) (*ServerProviderConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newServerProviderPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if pr, err = pager.applyFilter(pr); err != nil {
		return nil, err
	}
	conn := &ServerProviderConnection{Edges: []*ServerProviderEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = pr.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if pr, err = pager.applyCursors(pr, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		pr.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := pr.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	pr = pager.applyOrder(pr)
	nodes, err := pr.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// ProviderOrderFieldID orders Provider by id.
	ProviderOrderFieldID = &ServerProviderOrderField{
		Value: func(pr *ServerProvider) (ent.Value, error) {
			return pr.ID, nil
		},
		column: provider.FieldID,
		toTerm: provider.ByID,
		toCursor: func(pr *ServerProvider) Cursor {
			return Cursor{
				ID:    pr.ID,
				Value: pr.ID,
			}
		},
	}
	// ProviderOrderFieldCreatedAt orders Provider by created_at.
	ProviderOrderFieldCreatedAt = &ServerProviderOrderField{
		Value: func(pr *ServerProvider) (ent.Value, error) {
			return pr.CreatedAt, nil
		},
		column: provider.FieldCreatedAt,
		toTerm: provider.ByCreatedAt,
		toCursor: func(pr *ServerProvider) Cursor {
			return Cursor{
				ID:    pr.ID,
				Value: pr.CreatedAt,
			}
		},
	}
	// ProviderOrderFieldUpdatedAt orders Provider by updated_at.
	ProviderOrderFieldUpdatedAt = &ServerProviderOrderField{
		Value: func(pr *ServerProvider) (ent.Value, error) {
			return pr.UpdatedAt, nil
		},
		column: provider.FieldUpdatedAt,
		toTerm: provider.ByUpdatedAt,
		toCursor: func(pr *ServerProvider) Cursor {
			return Cursor{
				ID:    pr.ID,
				Value: pr.UpdatedAt,
			}
		},
	}
	// ProviderOrderFieldName orders Provider by name.
	ProviderOrderFieldName = &ServerProviderOrderField{
		Value: func(pr *ServerProvider) (ent.Value, error) {
			return pr.Name, nil
		},
		column: provider.FieldName,
		toTerm: provider.ByName,
		toCursor: func(pr *ServerProvider) Cursor {
			return Cursor{
				ID:    pr.ID,
				Value: pr.Name,
			}
		},
	}
	// ProviderOrderFieldResourceProviderID orders Provider by resource_provider_id.
	ProviderOrderFieldResourceProviderID = &ServerProviderOrderField{
		Value: func(pr *ServerProvider) (ent.Value, error) {
			return pr.ResourceProviderID, nil
		},
		column: provider.FieldResourceProviderID,
		toTerm: provider.ByResourceProviderID,
		toCursor: func(pr *ServerProvider) Cursor {
			return Cursor{
				ID:    pr.ID,
				Value: pr.ResourceProviderID,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f ServerProviderOrderField) String() string {
	var str string
	switch f.column {
	case ProviderOrderFieldID.column:
		str = "ID"
	case ProviderOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	case ProviderOrderFieldUpdatedAt.column:
		str = "UPDATED_AT"
	case ProviderOrderFieldName.column:
		str = "NAME"
	case ProviderOrderFieldResourceProviderID.column:
		str = "RESOURCE_PROVIDER"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f ServerProviderOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *ServerProviderOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("ServerProviderOrderField %T must be a string", v)
	}
	switch str {
	case "ID":
		*f = *ProviderOrderFieldID
	case "CREATED_AT":
		*f = *ProviderOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *ProviderOrderFieldUpdatedAt
	case "NAME":
		*f = *ProviderOrderFieldName
	case "RESOURCE_PROVIDER":
		*f = *ProviderOrderFieldResourceProviderID
	default:
		return fmt.Errorf("%s is not a valid ServerProviderOrderField", str)
	}
	return nil
}

// ServerProviderOrderField defines the ordering field of Provider.
type ServerProviderOrderField struct {
	// Value extracts the ordering value from the given Provider.
	Value    func(*ServerProvider) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) provider.OrderOption
	toCursor func(*ServerProvider) Cursor
}

// ServerProviderOrder defines the ordering of Provider.
type ServerProviderOrder struct {
	Direction OrderDirection            `json:"direction"`
	Field     *ServerProviderOrderField `json:"field"`
}

// DefaultServerProviderOrder is the default ordering of Provider.
var DefaultServerProviderOrder = &ServerProviderOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &ServerProviderOrderField{
		Value: func(pr *ServerProvider) (ent.Value, error) {
			return pr.ID, nil
		},
		column: provider.FieldID,
		toTerm: provider.ByID,
		toCursor: func(pr *ServerProvider) Cursor {
			return Cursor{ID: pr.ID}
		},
	},
}

// ToEdge converts ServerProvider into ServerProviderEdge.
func (pr *ServerProvider) ToEdge(order *ServerProviderOrder) *ServerProviderEdge {
	if order == nil {
		order = DefaultServerProviderOrder
	}
	return &ServerProviderEdge{
		Node:   pr,
		Cursor: order.Field.toCursor(pr),
	}
}

// ServerEdge is the edge representation of Server.
type ServerEdge struct {
	Node   *Server `json:"node"`
	Cursor Cursor  `json:"cursor"`
}

// ServerConnection is the connection containing edges to Server.
type ServerConnection struct {
	Edges      []*ServerEdge `json:"edges"`
	PageInfo   PageInfo      `json:"pageInfo"`
	TotalCount int           `json:"totalCount"`
}

func (c *ServerConnection) build(nodes []*Server, pager *serverPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Server
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Server {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Server {
			return nodes[i]
		}
	}
	c.Edges = make([]*ServerEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &ServerEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// ServerPaginateOption enables pagination customization.
type ServerPaginateOption func(*serverPager) error

// WithServerOrder configures pagination ordering.
func WithServerOrder(order *ServerOrder) ServerPaginateOption {
	if order == nil {
		order = DefaultServerOrder
	}
	o := *order
	return func(pager *serverPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultServerOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithServerFilter configures pagination filter.
func WithServerFilter(filter func(*ServerQuery) (*ServerQuery, error)) ServerPaginateOption {
	return func(pager *serverPager) error {
		if filter == nil {
			return errors.New("ServerQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type serverPager struct {
	reverse bool
	order   *ServerOrder
	filter  func(*ServerQuery) (*ServerQuery, error)
}

func newServerPager(opts []ServerPaginateOption, reverse bool) (*serverPager, error) {
	pager := &serverPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultServerOrder
	}
	return pager, nil
}

func (p *serverPager) applyFilter(query *ServerQuery) (*ServerQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *serverPager) toCursor(s *Server) Cursor {
	return p.order.Field.toCursor(s)
}

func (p *serverPager) applyCursors(query *ServerQuery, after, before *Cursor) (*ServerQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultServerOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *serverPager) applyOrder(query *ServerQuery) *ServerQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultServerOrder.Field {
		query = query.Order(DefaultServerOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *serverPager) orderExpr(query *ServerQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultServerOrder.Field {
			b.Comma().Ident(DefaultServerOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Server.
func (s *ServerQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ServerPaginateOption,
) (*ServerConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newServerPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if s, err = pager.applyFilter(s); err != nil {
		return nil, err
	}
	conn := &ServerConnection{Edges: []*ServerEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = s.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if s, err = pager.applyCursors(s, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		s.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := s.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	s = pager.applyOrder(s)
	nodes, err := s.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// ServerOrderFieldID orders Server by id.
	ServerOrderFieldID = &ServerOrderField{
		Value: func(s *Server) (ent.Value, error) {
			return s.ID, nil
		},
		column: server.FieldID,
		toTerm: server.ByID,
		toCursor: func(s *Server) Cursor {
			return Cursor{
				ID:    s.ID,
				Value: s.ID,
			}
		},
	}
	// ServerOrderFieldCreatedAt orders Server by created_at.
	ServerOrderFieldCreatedAt = &ServerOrderField{
		Value: func(s *Server) (ent.Value, error) {
			return s.CreatedAt, nil
		},
		column: server.FieldCreatedAt,
		toTerm: server.ByCreatedAt,
		toCursor: func(s *Server) Cursor {
			return Cursor{
				ID:    s.ID,
				Value: s.CreatedAt,
			}
		},
	}
	// ServerOrderFieldUpdatedAt orders Server by updated_at.
	ServerOrderFieldUpdatedAt = &ServerOrderField{
		Value: func(s *Server) (ent.Value, error) {
			return s.UpdatedAt, nil
		},
		column: server.FieldUpdatedAt,
		toTerm: server.ByUpdatedAt,
		toCursor: func(s *Server) Cursor {
			return Cursor{
				ID:    s.ID,
				Value: s.UpdatedAt,
			}
		},
	}
	// ServerOrderFieldName orders Server by name.
	ServerOrderFieldName = &ServerOrderField{
		Value: func(s *Server) (ent.Value, error) {
			return s.Name, nil
		},
		column: server.FieldName,
		toTerm: server.ByName,
		toCursor: func(s *Server) Cursor {
			return Cursor{
				ID:    s.ID,
				Value: s.Name,
			}
		},
	}
	// ServerOrderFieldDescription orders Server by description.
	ServerOrderFieldDescription = &ServerOrderField{
		Value: func(s *Server) (ent.Value, error) {
			return s.Description, nil
		},
		column: server.FieldDescription,
		toTerm: server.ByDescription,
		toCursor: func(s *Server) Cursor {
			return Cursor{
				ID:    s.ID,
				Value: s.Description,
			}
		},
	}
	// ServerOrderFieldOwnerID orders Server by owner_id.
	ServerOrderFieldOwnerID = &ServerOrderField{
		Value: func(s *Server) (ent.Value, error) {
			return s.OwnerID, nil
		},
		column: server.FieldOwnerID,
		toTerm: server.ByOwnerID,
		toCursor: func(s *Server) Cursor {
			return Cursor{
				ID:    s.ID,
				Value: s.OwnerID,
			}
		},
	}
	// ServerOrderFieldServerTypeID orders Server by server_type_id.
	ServerOrderFieldServerTypeID = &ServerOrderField{
		Value: func(s *Server) (ent.Value, error) {
			return s.ServerTypeID, nil
		},
		column: server.FieldServerTypeID,
		toTerm: server.ByServerTypeID,
		toCursor: func(s *Server) Cursor {
			return Cursor{
				ID:    s.ID,
				Value: s.ServerTypeID,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f ServerOrderField) String() string {
	var str string
	switch f.column {
	case ServerOrderFieldID.column:
		str = "ID"
	case ServerOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	case ServerOrderFieldUpdatedAt.column:
		str = "UPDATED_AT"
	case ServerOrderFieldName.column:
		str = "NAME"
	case ServerOrderFieldDescription.column:
		str = "DESCRIPTION"
	case ServerOrderFieldOwnerID.column:
		str = "OWNER"
	case ServerOrderFieldServerTypeID.column:
		str = "SERVER_TYPE"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f ServerOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *ServerOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("ServerOrderField %T must be a string", v)
	}
	switch str {
	case "ID":
		*f = *ServerOrderFieldID
	case "CREATED_AT":
		*f = *ServerOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *ServerOrderFieldUpdatedAt
	case "NAME":
		*f = *ServerOrderFieldName
	case "DESCRIPTION":
		*f = *ServerOrderFieldDescription
	case "OWNER":
		*f = *ServerOrderFieldOwnerID
	case "SERVER_TYPE":
		*f = *ServerOrderFieldServerTypeID
	default:
		return fmt.Errorf("%s is not a valid ServerOrderField", str)
	}
	return nil
}

// ServerOrderField defines the ordering field of Server.
type ServerOrderField struct {
	// Value extracts the ordering value from the given Server.
	Value    func(*Server) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) server.OrderOption
	toCursor func(*Server) Cursor
}

// ServerOrder defines the ordering of Server.
type ServerOrder struct {
	Direction OrderDirection    `json:"direction"`
	Field     *ServerOrderField `json:"field"`
}

// DefaultServerOrder is the default ordering of Server.
var DefaultServerOrder = &ServerOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &ServerOrderField{
		Value: func(s *Server) (ent.Value, error) {
			return s.ID, nil
		},
		column: server.FieldID,
		toTerm: server.ByID,
		toCursor: func(s *Server) Cursor {
			return Cursor{ID: s.ID}
		},
	},
}

// ToEdge converts Server into ServerEdge.
func (s *Server) ToEdge(order *ServerOrder) *ServerEdge {
	if order == nil {
		order = DefaultServerOrder
	}
	return &ServerEdge{
		Node:   s,
		Cursor: order.Field.toCursor(s),
	}
}

// ServerChassisEdge is the edge representation of ServerChassis.
type ServerChassisEdge struct {
	Node   *ServerChassis `json:"node"`
	Cursor Cursor         `json:"cursor"`
}

// ServerChassisConnection is the connection containing edges to ServerChassis.
type ServerChassisConnection struct {
	Edges      []*ServerChassisEdge `json:"edges"`
	PageInfo   PageInfo             `json:"pageInfo"`
	TotalCount int                  `json:"totalCount"`
}

func (c *ServerChassisConnection) build(nodes []*ServerChassis, pager *serverchassisPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *ServerChassis
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *ServerChassis {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *ServerChassis {
			return nodes[i]
		}
	}
	c.Edges = make([]*ServerChassisEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &ServerChassisEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// ServerChassisPaginateOption enables pagination customization.
type ServerChassisPaginateOption func(*serverchassisPager) error

// WithServerChassisOrder configures pagination ordering.
func WithServerChassisOrder(order *ServerChassisOrder) ServerChassisPaginateOption {
	if order == nil {
		order = DefaultServerChassisOrder
	}
	o := *order
	return func(pager *serverchassisPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultServerChassisOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithServerChassisFilter configures pagination filter.
func WithServerChassisFilter(filter func(*ServerChassisQuery) (*ServerChassisQuery, error)) ServerChassisPaginateOption {
	return func(pager *serverchassisPager) error {
		if filter == nil {
			return errors.New("ServerChassisQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type serverchassisPager struct {
	reverse bool
	order   *ServerChassisOrder
	filter  func(*ServerChassisQuery) (*ServerChassisQuery, error)
}

func newServerChassisPager(opts []ServerChassisPaginateOption, reverse bool) (*serverchassisPager, error) {
	pager := &serverchassisPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultServerChassisOrder
	}
	return pager, nil
}

func (p *serverchassisPager) applyFilter(query *ServerChassisQuery) (*ServerChassisQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *serverchassisPager) toCursor(sc *ServerChassis) Cursor {
	return p.order.Field.toCursor(sc)
}

func (p *serverchassisPager) applyCursors(query *ServerChassisQuery, after, before *Cursor) (*ServerChassisQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultServerChassisOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *serverchassisPager) applyOrder(query *ServerChassisQuery) *ServerChassisQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultServerChassisOrder.Field {
		query = query.Order(DefaultServerChassisOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *serverchassisPager) orderExpr(query *ServerChassisQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultServerChassisOrder.Field {
			b.Comma().Ident(DefaultServerChassisOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to ServerChassis.
func (sc *ServerChassisQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ServerChassisPaginateOption,
) (*ServerChassisConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newServerChassisPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if sc, err = pager.applyFilter(sc); err != nil {
		return nil, err
	}
	conn := &ServerChassisConnection{Edges: []*ServerChassisEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = sc.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if sc, err = pager.applyCursors(sc, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		sc.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := sc.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	sc = pager.applyOrder(sc)
	nodes, err := sc.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// ServerChassisOrderFieldID orders ServerChassis by id.
	ServerChassisOrderFieldID = &ServerChassisOrderField{
		Value: func(sc *ServerChassis) (ent.Value, error) {
			return sc.ID, nil
		},
		column: serverchassis.FieldID,
		toTerm: serverchassis.ByID,
		toCursor: func(sc *ServerChassis) Cursor {
			return Cursor{
				ID:    sc.ID,
				Value: sc.ID,
			}
		},
	}
	// ServerChassisOrderFieldCreatedAt orders ServerChassis by created_at.
	ServerChassisOrderFieldCreatedAt = &ServerChassisOrderField{
		Value: func(sc *ServerChassis) (ent.Value, error) {
			return sc.CreatedAt, nil
		},
		column: serverchassis.FieldCreatedAt,
		toTerm: serverchassis.ByCreatedAt,
		toCursor: func(sc *ServerChassis) Cursor {
			return Cursor{
				ID:    sc.ID,
				Value: sc.CreatedAt,
			}
		},
	}
	// ServerChassisOrderFieldUpdatedAt orders ServerChassis by updated_at.
	ServerChassisOrderFieldUpdatedAt = &ServerChassisOrderField{
		Value: func(sc *ServerChassis) (ent.Value, error) {
			return sc.UpdatedAt, nil
		},
		column: serverchassis.FieldUpdatedAt,
		toTerm: serverchassis.ByUpdatedAt,
		toCursor: func(sc *ServerChassis) Cursor {
			return Cursor{
				ID:    sc.ID,
				Value: sc.UpdatedAt,
			}
		},
	}
	// ServerChassisOrderFieldServerChassisTypeID orders ServerChassis by server_chassis_type_id.
	ServerChassisOrderFieldServerChassisTypeID = &ServerChassisOrderField{
		Value: func(sc *ServerChassis) (ent.Value, error) {
			return sc.ServerChassisTypeID, nil
		},
		column: serverchassis.FieldServerChassisTypeID,
		toTerm: serverchassis.ByServerChassisTypeID,
		toCursor: func(sc *ServerChassis) Cursor {
			return Cursor{
				ID:    sc.ID,
				Value: sc.ServerChassisTypeID,
			}
		},
	}
	// ServerChassisOrderFieldParentChassisID orders ServerChassis by parent_chassis_id.
	ServerChassisOrderFieldParentChassisID = &ServerChassisOrderField{
		Value: func(sc *ServerChassis) (ent.Value, error) {
			return sc.ParentChassisID, nil
		},
		column: serverchassis.FieldParentChassisID,
		toTerm: serverchassis.ByParentChassisID,
		toCursor: func(sc *ServerChassis) Cursor {
			return Cursor{
				ID:    sc.ID,
				Value: sc.ParentChassisID,
			}
		},
	}
	// ServerChassisOrderFieldServerID orders ServerChassis by server_id.
	ServerChassisOrderFieldServerID = &ServerChassisOrderField{
		Value: func(sc *ServerChassis) (ent.Value, error) {
			return sc.ServerID, nil
		},
		column: serverchassis.FieldServerID,
		toTerm: serverchassis.ByServerID,
		toCursor: func(sc *ServerChassis) Cursor {
			return Cursor{
				ID:    sc.ID,
				Value: sc.ServerID,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f ServerChassisOrderField) String() string {
	var str string
	switch f.column {
	case ServerChassisOrderFieldID.column:
		str = "ID"
	case ServerChassisOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	case ServerChassisOrderFieldUpdatedAt.column:
		str = "UPDATED_AT"
	case ServerChassisOrderFieldServerChassisTypeID.column:
		str = "SERVER_CHASSIS_TYPE"
	case ServerChassisOrderFieldParentChassisID.column:
		str = "PARENT_CHASSIS"
	case ServerChassisOrderFieldServerID.column:
		str = "SERVER"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f ServerChassisOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *ServerChassisOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("ServerChassisOrderField %T must be a string", v)
	}
	switch str {
	case "ID":
		*f = *ServerChassisOrderFieldID
	case "CREATED_AT":
		*f = *ServerChassisOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *ServerChassisOrderFieldUpdatedAt
	case "SERVER_CHASSIS_TYPE":
		*f = *ServerChassisOrderFieldServerChassisTypeID
	case "PARENT_CHASSIS":
		*f = *ServerChassisOrderFieldParentChassisID
	case "SERVER":
		*f = *ServerChassisOrderFieldServerID
	default:
		return fmt.Errorf("%s is not a valid ServerChassisOrderField", str)
	}
	return nil
}

// ServerChassisOrderField defines the ordering field of ServerChassis.
type ServerChassisOrderField struct {
	// Value extracts the ordering value from the given ServerChassis.
	Value    func(*ServerChassis) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) serverchassis.OrderOption
	toCursor func(*ServerChassis) Cursor
}

// ServerChassisOrder defines the ordering of ServerChassis.
type ServerChassisOrder struct {
	Direction OrderDirection           `json:"direction"`
	Field     *ServerChassisOrderField `json:"field"`
}

// DefaultServerChassisOrder is the default ordering of ServerChassis.
var DefaultServerChassisOrder = &ServerChassisOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &ServerChassisOrderField{
		Value: func(sc *ServerChassis) (ent.Value, error) {
			return sc.ID, nil
		},
		column: serverchassis.FieldID,
		toTerm: serverchassis.ByID,
		toCursor: func(sc *ServerChassis) Cursor {
			return Cursor{ID: sc.ID}
		},
	},
}

// ToEdge converts ServerChassis into ServerChassisEdge.
func (sc *ServerChassis) ToEdge(order *ServerChassisOrder) *ServerChassisEdge {
	if order == nil {
		order = DefaultServerChassisOrder
	}
	return &ServerChassisEdge{
		Node:   sc,
		Cursor: order.Field.toCursor(sc),
	}
}

// ServerChassisTypeEdge is the edge representation of ServerChassisType.
type ServerChassisTypeEdge struct {
	Node   *ServerChassisType `json:"node"`
	Cursor Cursor             `json:"cursor"`
}

// ServerChassisTypeConnection is the connection containing edges to ServerChassisType.
type ServerChassisTypeConnection struct {
	Edges      []*ServerChassisTypeEdge `json:"edges"`
	PageInfo   PageInfo                 `json:"pageInfo"`
	TotalCount int                      `json:"totalCount"`
}

func (c *ServerChassisTypeConnection) build(nodes []*ServerChassisType, pager *serverchassistypePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *ServerChassisType
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *ServerChassisType {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *ServerChassisType {
			return nodes[i]
		}
	}
	c.Edges = make([]*ServerChassisTypeEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &ServerChassisTypeEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// ServerChassisTypePaginateOption enables pagination customization.
type ServerChassisTypePaginateOption func(*serverchassistypePager) error

// WithServerChassisTypeOrder configures pagination ordering.
func WithServerChassisTypeOrder(order *ServerChassisTypeOrder) ServerChassisTypePaginateOption {
	if order == nil {
		order = DefaultServerChassisTypeOrder
	}
	o := *order
	return func(pager *serverchassistypePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultServerChassisTypeOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithServerChassisTypeFilter configures pagination filter.
func WithServerChassisTypeFilter(filter func(*ServerChassisTypeQuery) (*ServerChassisTypeQuery, error)) ServerChassisTypePaginateOption {
	return func(pager *serverchassistypePager) error {
		if filter == nil {
			return errors.New("ServerChassisTypeQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type serverchassistypePager struct {
	reverse bool
	order   *ServerChassisTypeOrder
	filter  func(*ServerChassisTypeQuery) (*ServerChassisTypeQuery, error)
}

func newServerChassisTypePager(opts []ServerChassisTypePaginateOption, reverse bool) (*serverchassistypePager, error) {
	pager := &serverchassistypePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultServerChassisTypeOrder
	}
	return pager, nil
}

func (p *serverchassistypePager) applyFilter(query *ServerChassisTypeQuery) (*ServerChassisTypeQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *serverchassistypePager) toCursor(sct *ServerChassisType) Cursor {
	return p.order.Field.toCursor(sct)
}

func (p *serverchassistypePager) applyCursors(query *ServerChassisTypeQuery, after, before *Cursor) (*ServerChassisTypeQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultServerChassisTypeOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *serverchassistypePager) applyOrder(query *ServerChassisTypeQuery) *ServerChassisTypeQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultServerChassisTypeOrder.Field {
		query = query.Order(DefaultServerChassisTypeOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *serverchassistypePager) orderExpr(query *ServerChassisTypeQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultServerChassisTypeOrder.Field {
			b.Comma().Ident(DefaultServerChassisTypeOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to ServerChassisType.
func (sct *ServerChassisTypeQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ServerChassisTypePaginateOption,
) (*ServerChassisTypeConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newServerChassisTypePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if sct, err = pager.applyFilter(sct); err != nil {
		return nil, err
	}
	conn := &ServerChassisTypeConnection{Edges: []*ServerChassisTypeEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = sct.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if sct, err = pager.applyCursors(sct, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		sct.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := sct.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	sct = pager.applyOrder(sct)
	nodes, err := sct.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// ServerChassisTypeOrderFieldID orders ServerChassisType by id.
	ServerChassisTypeOrderFieldID = &ServerChassisTypeOrderField{
		Value: func(sct *ServerChassisType) (ent.Value, error) {
			return sct.ID, nil
		},
		column: serverchassistype.FieldID,
		toTerm: serverchassistype.ByID,
		toCursor: func(sct *ServerChassisType) Cursor {
			return Cursor{
				ID:    sct.ID,
				Value: sct.ID,
			}
		},
	}
	// ServerChassisTypeOrderFieldCreatedAt orders ServerChassisType by created_at.
	ServerChassisTypeOrderFieldCreatedAt = &ServerChassisTypeOrderField{
		Value: func(sct *ServerChassisType) (ent.Value, error) {
			return sct.CreatedAt, nil
		},
		column: serverchassistype.FieldCreatedAt,
		toTerm: serverchassistype.ByCreatedAt,
		toCursor: func(sct *ServerChassisType) Cursor {
			return Cursor{
				ID:    sct.ID,
				Value: sct.CreatedAt,
			}
		},
	}
	// ServerChassisTypeOrderFieldUpdatedAt orders ServerChassisType by updated_at.
	ServerChassisTypeOrderFieldUpdatedAt = &ServerChassisTypeOrderField{
		Value: func(sct *ServerChassisType) (ent.Value, error) {
			return sct.UpdatedAt, nil
		},
		column: serverchassistype.FieldUpdatedAt,
		toTerm: serverchassistype.ByUpdatedAt,
		toCursor: func(sct *ServerChassisType) Cursor {
			return Cursor{
				ID:    sct.ID,
				Value: sct.UpdatedAt,
			}
		},
	}
	// ServerChassisTypeOrderFieldVendor orders ServerChassisType by vendor.
	ServerChassisTypeOrderFieldVendor = &ServerChassisTypeOrderField{
		Value: func(sct *ServerChassisType) (ent.Value, error) {
			return sct.Vendor, nil
		},
		column: serverchassistype.FieldVendor,
		toTerm: serverchassistype.ByVendor,
		toCursor: func(sct *ServerChassisType) Cursor {
			return Cursor{
				ID:    sct.ID,
				Value: sct.Vendor,
			}
		},
	}
	// ServerChassisTypeOrderFieldParentChassisTypeID orders ServerChassisType by parent_chassis_type_id.
	ServerChassisTypeOrderFieldParentChassisTypeID = &ServerChassisTypeOrderField{
		Value: func(sct *ServerChassisType) (ent.Value, error) {
			return sct.ParentChassisTypeID, nil
		},
		column: serverchassistype.FieldParentChassisTypeID,
		toTerm: serverchassistype.ByParentChassisTypeID,
		toCursor: func(sct *ServerChassisType) Cursor {
			return Cursor{
				ID:    sct.ID,
				Value: sct.ParentChassisTypeID,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f ServerChassisTypeOrderField) String() string {
	var str string
	switch f.column {
	case ServerChassisTypeOrderFieldID.column:
		str = "ID"
	case ServerChassisTypeOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	case ServerChassisTypeOrderFieldUpdatedAt.column:
		str = "UPDATED_AT"
	case ServerChassisTypeOrderFieldVendor.column:
		str = "NAME"
	case ServerChassisTypeOrderFieldParentChassisTypeID.column:
		str = "PARENT_CHASSIS_TYPE"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f ServerChassisTypeOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *ServerChassisTypeOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("ServerChassisTypeOrderField %T must be a string", v)
	}
	switch str {
	case "ID":
		*f = *ServerChassisTypeOrderFieldID
	case "CREATED_AT":
		*f = *ServerChassisTypeOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *ServerChassisTypeOrderFieldUpdatedAt
	case "NAME":
		*f = *ServerChassisTypeOrderFieldVendor
	case "PARENT_CHASSIS_TYPE":
		*f = *ServerChassisTypeOrderFieldParentChassisTypeID
	default:
		return fmt.Errorf("%s is not a valid ServerChassisTypeOrderField", str)
	}
	return nil
}

// ServerChassisTypeOrderField defines the ordering field of ServerChassisType.
type ServerChassisTypeOrderField struct {
	// Value extracts the ordering value from the given ServerChassisType.
	Value    func(*ServerChassisType) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) serverchassistype.OrderOption
	toCursor func(*ServerChassisType) Cursor
}

// ServerChassisTypeOrder defines the ordering of ServerChassisType.
type ServerChassisTypeOrder struct {
	Direction OrderDirection               `json:"direction"`
	Field     *ServerChassisTypeOrderField `json:"field"`
}

// DefaultServerChassisTypeOrder is the default ordering of ServerChassisType.
var DefaultServerChassisTypeOrder = &ServerChassisTypeOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &ServerChassisTypeOrderField{
		Value: func(sct *ServerChassisType) (ent.Value, error) {
			return sct.ID, nil
		},
		column: serverchassistype.FieldID,
		toTerm: serverchassistype.ByID,
		toCursor: func(sct *ServerChassisType) Cursor {
			return Cursor{ID: sct.ID}
		},
	},
}

// ToEdge converts ServerChassisType into ServerChassisTypeEdge.
func (sct *ServerChassisType) ToEdge(order *ServerChassisTypeOrder) *ServerChassisTypeEdge {
	if order == nil {
		order = DefaultServerChassisTypeOrder
	}
	return &ServerChassisTypeEdge{
		Node:   sct,
		Cursor: order.Field.toCursor(sct),
	}
}

// ServerComponentEdge is the edge representation of ServerComponent.
type ServerComponentEdge struct {
	Node   *ServerComponent `json:"node"`
	Cursor Cursor           `json:"cursor"`
}

// ServerComponentConnection is the connection containing edges to ServerComponent.
type ServerComponentConnection struct {
	Edges      []*ServerComponentEdge `json:"edges"`
	PageInfo   PageInfo               `json:"pageInfo"`
	TotalCount int                    `json:"totalCount"`
}

func (c *ServerComponentConnection) build(nodes []*ServerComponent, pager *servercomponentPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *ServerComponent
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *ServerComponent {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *ServerComponent {
			return nodes[i]
		}
	}
	c.Edges = make([]*ServerComponentEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &ServerComponentEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// ServerComponentPaginateOption enables pagination customization.
type ServerComponentPaginateOption func(*servercomponentPager) error

// WithServerComponentOrder configures pagination ordering.
func WithServerComponentOrder(order *ServerComponentOrder) ServerComponentPaginateOption {
	if order == nil {
		order = DefaultServerComponentOrder
	}
	o := *order
	return func(pager *servercomponentPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultServerComponentOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithServerComponentFilter configures pagination filter.
func WithServerComponentFilter(filter func(*ServerComponentQuery) (*ServerComponentQuery, error)) ServerComponentPaginateOption {
	return func(pager *servercomponentPager) error {
		if filter == nil {
			return errors.New("ServerComponentQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type servercomponentPager struct {
	reverse bool
	order   *ServerComponentOrder
	filter  func(*ServerComponentQuery) (*ServerComponentQuery, error)
}

func newServerComponentPager(opts []ServerComponentPaginateOption, reverse bool) (*servercomponentPager, error) {
	pager := &servercomponentPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultServerComponentOrder
	}
	return pager, nil
}

func (p *servercomponentPager) applyFilter(query *ServerComponentQuery) (*ServerComponentQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *servercomponentPager) toCursor(sc *ServerComponent) Cursor {
	return p.order.Field.toCursor(sc)
}

func (p *servercomponentPager) applyCursors(query *ServerComponentQuery, after, before *Cursor) (*ServerComponentQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultServerComponentOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *servercomponentPager) applyOrder(query *ServerComponentQuery) *ServerComponentQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultServerComponentOrder.Field {
		query = query.Order(DefaultServerComponentOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *servercomponentPager) orderExpr(query *ServerComponentQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultServerComponentOrder.Field {
			b.Comma().Ident(DefaultServerComponentOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to ServerComponent.
func (sc *ServerComponentQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ServerComponentPaginateOption,
) (*ServerComponentConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newServerComponentPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if sc, err = pager.applyFilter(sc); err != nil {
		return nil, err
	}
	conn := &ServerComponentConnection{Edges: []*ServerComponentEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = sc.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if sc, err = pager.applyCursors(sc, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		sc.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := sc.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	sc = pager.applyOrder(sc)
	nodes, err := sc.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// ServerComponentOrderFieldID orders ServerComponent by id.
	ServerComponentOrderFieldID = &ServerComponentOrderField{
		Value: func(sc *ServerComponent) (ent.Value, error) {
			return sc.ID, nil
		},
		column: servercomponent.FieldID,
		toTerm: servercomponent.ByID,
		toCursor: func(sc *ServerComponent) Cursor {
			return Cursor{
				ID:    sc.ID,
				Value: sc.ID,
			}
		},
	}
	// ServerComponentOrderFieldCreatedAt orders ServerComponent by created_at.
	ServerComponentOrderFieldCreatedAt = &ServerComponentOrderField{
		Value: func(sc *ServerComponent) (ent.Value, error) {
			return sc.CreatedAt, nil
		},
		column: servercomponent.FieldCreatedAt,
		toTerm: servercomponent.ByCreatedAt,
		toCursor: func(sc *ServerComponent) Cursor {
			return Cursor{
				ID:    sc.ID,
				Value: sc.CreatedAt,
			}
		},
	}
	// ServerComponentOrderFieldUpdatedAt orders ServerComponent by updated_at.
	ServerComponentOrderFieldUpdatedAt = &ServerComponentOrderField{
		Value: func(sc *ServerComponent) (ent.Value, error) {
			return sc.UpdatedAt, nil
		},
		column: servercomponent.FieldUpdatedAt,
		toTerm: servercomponent.ByUpdatedAt,
		toCursor: func(sc *ServerComponent) Cursor {
			return Cursor{
				ID:    sc.ID,
				Value: sc.UpdatedAt,
			}
		},
	}
	// ServerComponentOrderFieldName orders ServerComponent by name.
	ServerComponentOrderFieldName = &ServerComponentOrderField{
		Value: func(sc *ServerComponent) (ent.Value, error) {
			return sc.Name, nil
		},
		column: servercomponent.FieldName,
		toTerm: servercomponent.ByName,
		toCursor: func(sc *ServerComponent) Cursor {
			return Cursor{
				ID:    sc.ID,
				Value: sc.Name,
			}
		},
	}
	// ServerComponentOrderFieldVendor orders ServerComponent by vendor.
	ServerComponentOrderFieldVendor = &ServerComponentOrderField{
		Value: func(sc *ServerComponent) (ent.Value, error) {
			return sc.Vendor, nil
		},
		column: servercomponent.FieldVendor,
		toTerm: servercomponent.ByVendor,
		toCursor: func(sc *ServerComponent) Cursor {
			return Cursor{
				ID:    sc.ID,
				Value: sc.Vendor,
			}
		},
	}
	// ServerComponentOrderFieldModel orders ServerComponent by model.
	ServerComponentOrderFieldModel = &ServerComponentOrderField{
		Value: func(sc *ServerComponent) (ent.Value, error) {
			return sc.Model, nil
		},
		column: servercomponent.FieldModel,
		toTerm: servercomponent.ByModel,
		toCursor: func(sc *ServerComponent) Cursor {
			return Cursor{
				ID:    sc.ID,
				Value: sc.Model,
			}
		},
	}
	// ServerComponentOrderFieldSerial orders ServerComponent by serial.
	ServerComponentOrderFieldSerial = &ServerComponentOrderField{
		Value: func(sc *ServerComponent) (ent.Value, error) {
			return sc.Serial, nil
		},
		column: servercomponent.FieldSerial,
		toTerm: servercomponent.BySerial,
		toCursor: func(sc *ServerComponent) Cursor {
			return Cursor{
				ID:    sc.ID,
				Value: sc.Serial,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f ServerComponentOrderField) String() string {
	var str string
	switch f.column {
	case ServerComponentOrderFieldID.column:
		str = "ID"
	case ServerComponentOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	case ServerComponentOrderFieldUpdatedAt.column:
		str = "UPDATED_AT"
	case ServerComponentOrderFieldName.column:
		str = "NAME"
	case ServerComponentOrderFieldVendor.column:
		str = "VENDOR"
	case ServerComponentOrderFieldModel.column:
		str = "MODEL"
	case ServerComponentOrderFieldSerial.column:
		str = "SERIAL"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f ServerComponentOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *ServerComponentOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("ServerComponentOrderField %T must be a string", v)
	}
	switch str {
	case "ID":
		*f = *ServerComponentOrderFieldID
	case "CREATED_AT":
		*f = *ServerComponentOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *ServerComponentOrderFieldUpdatedAt
	case "NAME":
		*f = *ServerComponentOrderFieldName
	case "VENDOR":
		*f = *ServerComponentOrderFieldVendor
	case "MODEL":
		*f = *ServerComponentOrderFieldModel
	case "SERIAL":
		*f = *ServerComponentOrderFieldSerial
	default:
		return fmt.Errorf("%s is not a valid ServerComponentOrderField", str)
	}
	return nil
}

// ServerComponentOrderField defines the ordering field of ServerComponent.
type ServerComponentOrderField struct {
	// Value extracts the ordering value from the given ServerComponent.
	Value    func(*ServerComponent) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) servercomponent.OrderOption
	toCursor func(*ServerComponent) Cursor
}

// ServerComponentOrder defines the ordering of ServerComponent.
type ServerComponentOrder struct {
	Direction OrderDirection             `json:"direction"`
	Field     *ServerComponentOrderField `json:"field"`
}

// DefaultServerComponentOrder is the default ordering of ServerComponent.
var DefaultServerComponentOrder = &ServerComponentOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &ServerComponentOrderField{
		Value: func(sc *ServerComponent) (ent.Value, error) {
			return sc.ID, nil
		},
		column: servercomponent.FieldID,
		toTerm: servercomponent.ByID,
		toCursor: func(sc *ServerComponent) Cursor {
			return Cursor{ID: sc.ID}
		},
	},
}

// ToEdge converts ServerComponent into ServerComponentEdge.
func (sc *ServerComponent) ToEdge(order *ServerComponentOrder) *ServerComponentEdge {
	if order == nil {
		order = DefaultServerComponentOrder
	}
	return &ServerComponentEdge{
		Node:   sc,
		Cursor: order.Field.toCursor(sc),
	}
}

// ServerComponentTypeEdge is the edge representation of ServerComponentType.
type ServerComponentTypeEdge struct {
	Node   *ServerComponentType `json:"node"`
	Cursor Cursor               `json:"cursor"`
}

// ServerComponentTypeConnection is the connection containing edges to ServerComponentType.
type ServerComponentTypeConnection struct {
	Edges      []*ServerComponentTypeEdge `json:"edges"`
	PageInfo   PageInfo                   `json:"pageInfo"`
	TotalCount int                        `json:"totalCount"`
}

func (c *ServerComponentTypeConnection) build(nodes []*ServerComponentType, pager *servercomponenttypePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *ServerComponentType
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *ServerComponentType {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *ServerComponentType {
			return nodes[i]
		}
	}
	c.Edges = make([]*ServerComponentTypeEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &ServerComponentTypeEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// ServerComponentTypePaginateOption enables pagination customization.
type ServerComponentTypePaginateOption func(*servercomponenttypePager) error

// WithServerComponentTypeOrder configures pagination ordering.
func WithServerComponentTypeOrder(order *ServerComponentTypeOrder) ServerComponentTypePaginateOption {
	if order == nil {
		order = DefaultServerComponentTypeOrder
	}
	o := *order
	return func(pager *servercomponenttypePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultServerComponentTypeOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithServerComponentTypeFilter configures pagination filter.
func WithServerComponentTypeFilter(filter func(*ServerComponentTypeQuery) (*ServerComponentTypeQuery, error)) ServerComponentTypePaginateOption {
	return func(pager *servercomponenttypePager) error {
		if filter == nil {
			return errors.New("ServerComponentTypeQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type servercomponenttypePager struct {
	reverse bool
	order   *ServerComponentTypeOrder
	filter  func(*ServerComponentTypeQuery) (*ServerComponentTypeQuery, error)
}

func newServerComponentTypePager(opts []ServerComponentTypePaginateOption, reverse bool) (*servercomponenttypePager, error) {
	pager := &servercomponenttypePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultServerComponentTypeOrder
	}
	return pager, nil
}

func (p *servercomponenttypePager) applyFilter(query *ServerComponentTypeQuery) (*ServerComponentTypeQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *servercomponenttypePager) toCursor(sct *ServerComponentType) Cursor {
	return p.order.Field.toCursor(sct)
}

func (p *servercomponenttypePager) applyCursors(query *ServerComponentTypeQuery, after, before *Cursor) (*ServerComponentTypeQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultServerComponentTypeOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *servercomponenttypePager) applyOrder(query *ServerComponentTypeQuery) *ServerComponentTypeQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultServerComponentTypeOrder.Field {
		query = query.Order(DefaultServerComponentTypeOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *servercomponenttypePager) orderExpr(query *ServerComponentTypeQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultServerComponentTypeOrder.Field {
			b.Comma().Ident(DefaultServerComponentTypeOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to ServerComponentType.
func (sct *ServerComponentTypeQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ServerComponentTypePaginateOption,
) (*ServerComponentTypeConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newServerComponentTypePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if sct, err = pager.applyFilter(sct); err != nil {
		return nil, err
	}
	conn := &ServerComponentTypeConnection{Edges: []*ServerComponentTypeEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = sct.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if sct, err = pager.applyCursors(sct, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		sct.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := sct.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	sct = pager.applyOrder(sct)
	nodes, err := sct.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// ServerComponentTypeOrderFieldID orders ServerComponentType by id.
	ServerComponentTypeOrderFieldID = &ServerComponentTypeOrderField{
		Value: func(sct *ServerComponentType) (ent.Value, error) {
			return sct.ID, nil
		},
		column: servercomponenttype.FieldID,
		toTerm: servercomponenttype.ByID,
		toCursor: func(sct *ServerComponentType) Cursor {
			return Cursor{
				ID:    sct.ID,
				Value: sct.ID,
			}
		},
	}
	// ServerComponentTypeOrderFieldCreatedAt orders ServerComponentType by created_at.
	ServerComponentTypeOrderFieldCreatedAt = &ServerComponentTypeOrderField{
		Value: func(sct *ServerComponentType) (ent.Value, error) {
			return sct.CreatedAt, nil
		},
		column: servercomponenttype.FieldCreatedAt,
		toTerm: servercomponenttype.ByCreatedAt,
		toCursor: func(sct *ServerComponentType) Cursor {
			return Cursor{
				ID:    sct.ID,
				Value: sct.CreatedAt,
			}
		},
	}
	// ServerComponentTypeOrderFieldUpdatedAt orders ServerComponentType by updated_at.
	ServerComponentTypeOrderFieldUpdatedAt = &ServerComponentTypeOrderField{
		Value: func(sct *ServerComponentType) (ent.Value, error) {
			return sct.UpdatedAt, nil
		},
		column: servercomponenttype.FieldUpdatedAt,
		toTerm: servercomponenttype.ByUpdatedAt,
		toCursor: func(sct *ServerComponentType) Cursor {
			return Cursor{
				ID:    sct.ID,
				Value: sct.UpdatedAt,
			}
		},
	}
	// ServerComponentTypeOrderFieldName orders ServerComponentType by name.
	ServerComponentTypeOrderFieldName = &ServerComponentTypeOrderField{
		Value: func(sct *ServerComponentType) (ent.Value, error) {
			return sct.Name, nil
		},
		column: servercomponenttype.FieldName,
		toTerm: servercomponenttype.ByName,
		toCursor: func(sct *ServerComponentType) Cursor {
			return Cursor{
				ID:    sct.ID,
				Value: sct.Name,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f ServerComponentTypeOrderField) String() string {
	var str string
	switch f.column {
	case ServerComponentTypeOrderFieldID.column:
		str = "ID"
	case ServerComponentTypeOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	case ServerComponentTypeOrderFieldUpdatedAt.column:
		str = "UPDATED_AT"
	case ServerComponentTypeOrderFieldName.column:
		str = "NAME"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f ServerComponentTypeOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *ServerComponentTypeOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("ServerComponentTypeOrderField %T must be a string", v)
	}
	switch str {
	case "ID":
		*f = *ServerComponentTypeOrderFieldID
	case "CREATED_AT":
		*f = *ServerComponentTypeOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *ServerComponentTypeOrderFieldUpdatedAt
	case "NAME":
		*f = *ServerComponentTypeOrderFieldName
	default:
		return fmt.Errorf("%s is not a valid ServerComponentTypeOrderField", str)
	}
	return nil
}

// ServerComponentTypeOrderField defines the ordering field of ServerComponentType.
type ServerComponentTypeOrderField struct {
	// Value extracts the ordering value from the given ServerComponentType.
	Value    func(*ServerComponentType) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) servercomponenttype.OrderOption
	toCursor func(*ServerComponentType) Cursor
}

// ServerComponentTypeOrder defines the ordering of ServerComponentType.
type ServerComponentTypeOrder struct {
	Direction OrderDirection                 `json:"direction"`
	Field     *ServerComponentTypeOrderField `json:"field"`
}

// DefaultServerComponentTypeOrder is the default ordering of ServerComponentType.
var DefaultServerComponentTypeOrder = &ServerComponentTypeOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &ServerComponentTypeOrderField{
		Value: func(sct *ServerComponentType) (ent.Value, error) {
			return sct.ID, nil
		},
		column: servercomponenttype.FieldID,
		toTerm: servercomponenttype.ByID,
		toCursor: func(sct *ServerComponentType) Cursor {
			return Cursor{ID: sct.ID}
		},
	},
}

// ToEdge converts ServerComponentType into ServerComponentTypeEdge.
func (sct *ServerComponentType) ToEdge(order *ServerComponentTypeOrder) *ServerComponentTypeEdge {
	if order == nil {
		order = DefaultServerComponentTypeOrder
	}
	return &ServerComponentTypeEdge{
		Node:   sct,
		Cursor: order.Field.toCursor(sct),
	}
}

// ServerTypeEdge is the edge representation of ServerType.
type ServerTypeEdge struct {
	Node   *ServerType `json:"node"`
	Cursor Cursor      `json:"cursor"`
}

// ServerTypeConnection is the connection containing edges to ServerType.
type ServerTypeConnection struct {
	Edges      []*ServerTypeEdge `json:"edges"`
	PageInfo   PageInfo          `json:"pageInfo"`
	TotalCount int               `json:"totalCount"`
}

func (c *ServerTypeConnection) build(nodes []*ServerType, pager *servertypePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *ServerType
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *ServerType {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *ServerType {
			return nodes[i]
		}
	}
	c.Edges = make([]*ServerTypeEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &ServerTypeEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// ServerTypePaginateOption enables pagination customization.
type ServerTypePaginateOption func(*servertypePager) error

// WithServerTypeOrder configures pagination ordering.
func WithServerTypeOrder(order *ServerTypeOrder) ServerTypePaginateOption {
	if order == nil {
		order = DefaultServerTypeOrder
	}
	o := *order
	return func(pager *servertypePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultServerTypeOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithServerTypeFilter configures pagination filter.
func WithServerTypeFilter(filter func(*ServerTypeQuery) (*ServerTypeQuery, error)) ServerTypePaginateOption {
	return func(pager *servertypePager) error {
		if filter == nil {
			return errors.New("ServerTypeQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type servertypePager struct {
	reverse bool
	order   *ServerTypeOrder
	filter  func(*ServerTypeQuery) (*ServerTypeQuery, error)
}

func newServerTypePager(opts []ServerTypePaginateOption, reverse bool) (*servertypePager, error) {
	pager := &servertypePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultServerTypeOrder
	}
	return pager, nil
}

func (p *servertypePager) applyFilter(query *ServerTypeQuery) (*ServerTypeQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *servertypePager) toCursor(st *ServerType) Cursor {
	return p.order.Field.toCursor(st)
}

func (p *servertypePager) applyCursors(query *ServerTypeQuery, after, before *Cursor) (*ServerTypeQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultServerTypeOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *servertypePager) applyOrder(query *ServerTypeQuery) *ServerTypeQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultServerTypeOrder.Field {
		query = query.Order(DefaultServerTypeOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *servertypePager) orderExpr(query *ServerTypeQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultServerTypeOrder.Field {
			b.Comma().Ident(DefaultServerTypeOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to ServerType.
func (st *ServerTypeQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ServerTypePaginateOption,
) (*ServerTypeConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newServerTypePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if st, err = pager.applyFilter(st); err != nil {
		return nil, err
	}
	conn := &ServerTypeConnection{Edges: []*ServerTypeEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = st.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if st, err = pager.applyCursors(st, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		st.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := st.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	st = pager.applyOrder(st)
	nodes, err := st.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// ServerTypeOrderFieldID orders ServerType by id.
	ServerTypeOrderFieldID = &ServerTypeOrderField{
		Value: func(st *ServerType) (ent.Value, error) {
			return st.ID, nil
		},
		column: servertype.FieldID,
		toTerm: servertype.ByID,
		toCursor: func(st *ServerType) Cursor {
			return Cursor{
				ID:    st.ID,
				Value: st.ID,
			}
		},
	}
	// ServerTypeOrderFieldCreatedAt orders ServerType by created_at.
	ServerTypeOrderFieldCreatedAt = &ServerTypeOrderField{
		Value: func(st *ServerType) (ent.Value, error) {
			return st.CreatedAt, nil
		},
		column: servertype.FieldCreatedAt,
		toTerm: servertype.ByCreatedAt,
		toCursor: func(st *ServerType) Cursor {
			return Cursor{
				ID:    st.ID,
				Value: st.CreatedAt,
			}
		},
	}
	// ServerTypeOrderFieldUpdatedAt orders ServerType by updated_at.
	ServerTypeOrderFieldUpdatedAt = &ServerTypeOrderField{
		Value: func(st *ServerType) (ent.Value, error) {
			return st.UpdatedAt, nil
		},
		column: servertype.FieldUpdatedAt,
		toTerm: servertype.ByUpdatedAt,
		toCursor: func(st *ServerType) Cursor {
			return Cursor{
				ID:    st.ID,
				Value: st.UpdatedAt,
			}
		},
	}
	// ServerTypeOrderFieldName orders ServerType by name.
	ServerTypeOrderFieldName = &ServerTypeOrderField{
		Value: func(st *ServerType) (ent.Value, error) {
			return st.Name, nil
		},
		column: servertype.FieldName,
		toTerm: servertype.ByName,
		toCursor: func(st *ServerType) Cursor {
			return Cursor{
				ID:    st.ID,
				Value: st.Name,
			}
		},
	}
	// ServerTypeOrderFieldOwnerID orders ServerType by owner_id.
	ServerTypeOrderFieldOwnerID = &ServerTypeOrderField{
		Value: func(st *ServerType) (ent.Value, error) {
			return st.OwnerID, nil
		},
		column: servertype.FieldOwnerID,
		toTerm: servertype.ByOwnerID,
		toCursor: func(st *ServerType) Cursor {
			return Cursor{
				ID:    st.ID,
				Value: st.OwnerID,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f ServerTypeOrderField) String() string {
	var str string
	switch f.column {
	case ServerTypeOrderFieldID.column:
		str = "ID"
	case ServerTypeOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	case ServerTypeOrderFieldUpdatedAt.column:
		str = "UPDATED_AT"
	case ServerTypeOrderFieldName.column:
		str = "NAME"
	case ServerTypeOrderFieldOwnerID.column:
		str = "OWNER"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f ServerTypeOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *ServerTypeOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("ServerTypeOrderField %T must be a string", v)
	}
	switch str {
	case "ID":
		*f = *ServerTypeOrderFieldID
	case "CREATED_AT":
		*f = *ServerTypeOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *ServerTypeOrderFieldUpdatedAt
	case "NAME":
		*f = *ServerTypeOrderFieldName
	case "OWNER":
		*f = *ServerTypeOrderFieldOwnerID
	default:
		return fmt.Errorf("%s is not a valid ServerTypeOrderField", str)
	}
	return nil
}

// ServerTypeOrderField defines the ordering field of ServerType.
type ServerTypeOrderField struct {
	// Value extracts the ordering value from the given ServerType.
	Value    func(*ServerType) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) servertype.OrderOption
	toCursor func(*ServerType) Cursor
}

// ServerTypeOrder defines the ordering of ServerType.
type ServerTypeOrder struct {
	Direction OrderDirection        `json:"direction"`
	Field     *ServerTypeOrderField `json:"field"`
}

// DefaultServerTypeOrder is the default ordering of ServerType.
var DefaultServerTypeOrder = &ServerTypeOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &ServerTypeOrderField{
		Value: func(st *ServerType) (ent.Value, error) {
			return st.ID, nil
		},
		column: servertype.FieldID,
		toTerm: servertype.ByID,
		toCursor: func(st *ServerType) Cursor {
			return Cursor{ID: st.ID}
		},
	},
}

// ToEdge converts ServerType into ServerTypeEdge.
func (st *ServerType) ToEdge(order *ServerTypeOrder) *ServerTypeEdge {
	if order == nil {
		order = DefaultServerTypeOrder
	}
	return &ServerTypeEdge{
		Node:   st,
		Cursor: order.Field.toCursor(st),
	}
}
