// Code generated by github.com/Yamashou/gqlgenc, DO NOT EDIT.

package graphclient

import (
	"context"
	"net/http"
	"time"

	"github.com/Yamashou/gqlgenc/client"
	"go.infratographer.com/x/gidx"
)

type GraphClient interface {
	GetHardDrive(ctx context.Context, id gidx.PrefixedID, httpRequestOptions ...client.HTTPRequestOption) (*GetHardDrive, error)
	GetHardDriveType(ctx context.Context, id gidx.PrefixedID, httpRequestOptions ...client.HTTPRequestOption) (*GetHardDriveType, error)
	GetOwnerServers(ctx context.Context, id gidx.PrefixedID, orderBy *ServerOrder, httpRequestOptions ...client.HTTPRequestOption) (*GetOwnerServers, error)
	GetServer(ctx context.Context, id gidx.PrefixedID, httpRequestOptions ...client.HTTPRequestOption) (*GetServer, error)
	GetServerCPU(ctx context.Context, id gidx.PrefixedID, httpRequestOptions ...client.HTTPRequestOption) (*GetServerCPU, error)
	GetServerCPUType(ctx context.Context, id gidx.PrefixedID, httpRequestOptions ...client.HTTPRequestOption) (*GetServerCPUType, error)
	GetServerChassis(ctx context.Context, id gidx.PrefixedID, httpRequestOptions ...client.HTTPRequestOption) (*GetServerChassis, error)
	GetServerChassisType(ctx context.Context, id gidx.PrefixedID, httpRequestOptions ...client.HTTPRequestOption) (*GetServerChassisType, error)
	GetServerComponent(ctx context.Context, id gidx.PrefixedID, httpRequestOptions ...client.HTTPRequestOption) (*GetServerComponent, error)
	GetServerComponentType(ctx context.Context, id gidx.PrefixedID, httpRequestOptions ...client.HTTPRequestOption) (*GetServerComponentType, error)
	GetServerMemory(ctx context.Context, id gidx.PrefixedID, httpRequestOptions ...client.HTTPRequestOption) (*GetServerMemory, error)
	GetServerMemoryType(ctx context.Context, id gidx.PrefixedID, httpRequestOptions ...client.HTTPRequestOption) (*GetServerMemoryType, error)
	GetServerMotherboard(ctx context.Context, id gidx.PrefixedID, httpRequestOptions ...client.HTTPRequestOption) (*GetServerMotherboard, error)
	GetServerMotherboardType(ctx context.Context, id gidx.PrefixedID, httpRequestOptions ...client.HTTPRequestOption) (*GetServerMotherboardType, error)
	GetServerType(ctx context.Context, id gidx.PrefixedID, httpRequestOptions ...client.HTTPRequestOption) (*GetServerType, error)
	ServerCPUCreate(ctx context.Context, input CreateServerCPUInput, httpRequestOptions ...client.HTTPRequestOption) (*ServerCPUCreate, error)
	ServerCPUDelete(ctx context.Context, id gidx.PrefixedID, httpRequestOptions ...client.HTTPRequestOption) (*ServerCPUDelete, error)
	ServerCPUTypeCreate(ctx context.Context, input CreateServerCPUTypeInput, httpRequestOptions ...client.HTTPRequestOption) (*ServerCPUTypeCreate, error)
	ServerCPUTypeDelete(ctx context.Context, id gidx.PrefixedID, httpRequestOptions ...client.HTTPRequestOption) (*ServerCPUTypeDelete, error)
	ServerCPUTypeUpdate(ctx context.Context, id gidx.PrefixedID, input UpdateServerCPUTypeInput, httpRequestOptions ...client.HTTPRequestOption) (*ServerCPUTypeUpdate, error)
	ServerCPUUpdate(ctx context.Context, id gidx.PrefixedID, input UpdateServerCPUInput, httpRequestOptions ...client.HTTPRequestOption) (*ServerCPUUpdate, error)
	ServerChassisCreate(ctx context.Context, input CreateServerChassisInput, httpRequestOptions ...client.HTTPRequestOption) (*ServerChassisCreate, error)
	ServerChassisDelete(ctx context.Context, id gidx.PrefixedID, httpRequestOptions ...client.HTTPRequestOption) (*ServerChassisDelete, error)
	ServerChassisTypeCreate(ctx context.Context, input CreateServerChassisTypeInput, httpRequestOptions ...client.HTTPRequestOption) (*ServerChassisTypeCreate, error)
	ServerChassisTypeDelete(ctx context.Context, id gidx.PrefixedID, httpRequestOptions ...client.HTTPRequestOption) (*ServerChassisTypeDelete, error)
	ServerChassisTypeUpdate(ctx context.Context, id gidx.PrefixedID, input UpdateServerChassisTypeInput, httpRequestOptions ...client.HTTPRequestOption) (*ServerChassisTypeUpdate, error)
	ServerChassisUpdate(ctx context.Context, id gidx.PrefixedID, input UpdateServerChassisInput, httpRequestOptions ...client.HTTPRequestOption) (*ServerChassisUpdate, error)
	ServerComponentCreate(ctx context.Context, input CreateServerComponentInput, httpRequestOptions ...client.HTTPRequestOption) (*ServerComponentCreate, error)
	ServerComponentDelete(ctx context.Context, id gidx.PrefixedID, httpRequestOptions ...client.HTTPRequestOption) (*ServerComponentDelete, error)
	ServerComponentTypeCreate(ctx context.Context, input CreateServerComponentTypeInput, httpRequestOptions ...client.HTTPRequestOption) (*ServerComponentTypeCreate, error)
	ServerComponentTypeDelete(ctx context.Context, id gidx.PrefixedID, httpRequestOptions ...client.HTTPRequestOption) (*ServerComponentTypeDelete, error)
	ServerComponentTypeUpdate(ctx context.Context, id gidx.PrefixedID, input UpdateServerComponentTypeInput, httpRequestOptions ...client.HTTPRequestOption) (*ServerComponentTypeUpdate, error)
	ServerComponentUpdate(ctx context.Context, id gidx.PrefixedID, input UpdateServerComponentInput, httpRequestOptions ...client.HTTPRequestOption) (*ServerComponentUpdate, error)
	ServerCreate(ctx context.Context, input CreateServerInput, httpRequestOptions ...client.HTTPRequestOption) (*ServerCreate, error)
	ServerDelete(ctx context.Context, id gidx.PrefixedID, httpRequestOptions ...client.HTTPRequestOption) (*ServerDelete, error)
	ServerHardDriveCreate(ctx context.Context, input CreateServerHardDriveInput, httpRequestOptions ...client.HTTPRequestOption) (*ServerHardDriveCreate, error)
	ServerHardDriveDelete(ctx context.Context, id gidx.PrefixedID, httpRequestOptions ...client.HTTPRequestOption) (*ServerHardDriveDelete, error)
	ServerHardDriveTypeCreate(ctx context.Context, input CreateServerHardDriveTypeInput, httpRequestOptions ...client.HTTPRequestOption) (*ServerHardDriveTypeCreate, error)
	ServerHardDriveTypeDelete(ctx context.Context, id gidx.PrefixedID, httpRequestOptions ...client.HTTPRequestOption) (*ServerHardDriveTypeDelete, error)
	ServerHardDriveTypeUpdate(ctx context.Context, id gidx.PrefixedID, input UpdateServerHardDriveTypeInput, httpRequestOptions ...client.HTTPRequestOption) (*ServerHardDriveTypeUpdate, error)
	ServerHardDriveUpdate(ctx context.Context, id gidx.PrefixedID, input UpdateServerHardDriveInput, httpRequestOptions ...client.HTTPRequestOption) (*ServerHardDriveUpdate, error)
	ServerMemoryCreate(ctx context.Context, input CreateServerMemoryInput, httpRequestOptions ...client.HTTPRequestOption) (*ServerMemoryCreate, error)
	ServerMemoryDelete(ctx context.Context, id gidx.PrefixedID, httpRequestOptions ...client.HTTPRequestOption) (*ServerMemoryDelete, error)
	ServerMemoryTypeCreate(ctx context.Context, input CreateServerMemoryTypeInput, httpRequestOptions ...client.HTTPRequestOption) (*ServerMemoryTypeCreate, error)
	ServerMemoryTypeDelete(ctx context.Context, id gidx.PrefixedID, httpRequestOptions ...client.HTTPRequestOption) (*ServerMemoryTypeDelete, error)
	ServerMemoryTypeUpdate(ctx context.Context, id gidx.PrefixedID, input UpdateServerMemoryTypeInput, httpRequestOptions ...client.HTTPRequestOption) (*ServerMemoryTypeUpdate, error)
	ServerMemoryUpdate(ctx context.Context, id gidx.PrefixedID, input UpdateServerMemoryInput, httpRequestOptions ...client.HTTPRequestOption) (*ServerMemoryUpdate, error)
	ServerMotherboardCreate(ctx context.Context, input CreateServerMotherboardInput, httpRequestOptions ...client.HTTPRequestOption) (*ServerMotherboardCreate, error)
	ServerMotherboardDelete(ctx context.Context, id gidx.PrefixedID, httpRequestOptions ...client.HTTPRequestOption) (*ServerMotherboardDelete, error)
	ServerMotherboardTypeCreate(ctx context.Context, input CreateServerMotherboardTypeInput, httpRequestOptions ...client.HTTPRequestOption) (*ServerMotherboardTypeCreate, error)
	ServerMotherboardTypeDelete(ctx context.Context, id gidx.PrefixedID, httpRequestOptions ...client.HTTPRequestOption) (*ServerMotherboardTypeDelete, error)
	ServerMotherboardTypeUpdate(ctx context.Context, id gidx.PrefixedID, input UpdateServerMotherboardTypeInput, httpRequestOptions ...client.HTTPRequestOption) (*ServerMotherboardTypeUpdate, error)
	ServerMotherboardUpdate(ctx context.Context, id gidx.PrefixedID, input UpdateServerMotherboardInput, httpRequestOptions ...client.HTTPRequestOption) (*ServerMotherboardUpdate, error)
	ServerTypeCreate(ctx context.Context, input CreateServerTypeInput, httpRequestOptions ...client.HTTPRequestOption) (*ServerTypeCreate, error)
	ServerTypeDelete(ctx context.Context, id gidx.PrefixedID, httpRequestOptions ...client.HTTPRequestOption) (*ServerTypeDelete, error)
	ServerTypeUpdate(ctx context.Context, id gidx.PrefixedID, input UpdateServerTypeInput, httpRequestOptions ...client.HTTPRequestOption) (*ServerTypeUpdate, error)
	ServerUpdate(ctx context.Context, id gidx.PrefixedID, input UpdateServerInput, httpRequestOptions ...client.HTTPRequestOption) (*ServerUpdate, error)
}

type Client struct {
	Client *client.Client
}

func NewClient(cli *http.Client, baseURL string, options ...client.HTTPRequestOption) GraphClient {
	return &Client{Client: client.NewClient(cli, baseURL, options...)}
}

type Query struct {
	ServerChassis         ServerChassis         "json:\"serverChassis\" graphql:\"serverChassis\""
	ServerChassisType     ServerChassisType     "json:\"serverChassisType\" graphql:\"serverChassisType\""
	ServerComponent       ServerComponent       "json:\"serverComponent\" graphql:\"serverComponent\""
	ServerComponentType   ServerComponentType   "json:\"serverComponentType\" graphql:\"serverComponentType\""
	ServerCPU             ServerCPU             "json:\"serverCPU\" graphql:\"serverCPU\""
	ServerCPUType         ServerCPUType         "json:\"serverCPUType\" graphql:\"serverCPUType\""
	ServerHardDrive       ServerHardDrive       "json:\"serverHardDrive\" graphql:\"serverHardDrive\""
	ServerHardDriveType   ServerHardDriveType   "json:\"serverHardDriveType\" graphql:\"serverHardDriveType\""
	ServerMemory          ServerMemory          "json:\"serverMemory\" graphql:\"serverMemory\""
	ServerMemoryType      ServerMemoryType      "json:\"serverMemoryType\" graphql:\"serverMemoryType\""
	ServerMotherboard     ServerMotherboard     "json:\"serverMotherboard\" graphql:\"serverMotherboard\""
	ServerMotherboardType ServerMotherboardType "json:\"serverMotherboardType\" graphql:\"serverMotherboardType\""
	ServerNetworkCard     ServerNetworkCard     "json:\"serverNetworkCard\" graphql:\"serverNetworkCard\""
	ServerNetworkCardType ServerNetworkCardType "json:\"serverNetworkCardType\" graphql:\"serverNetworkCardType\""
	ServerNetworkPort     ServerNetworkPort     "json:\"serverNetworkPort\" graphql:\"serverNetworkPort\""
	ServerPowerSupply     ServerPowerSupply     "json:\"serverPowerSupply\" graphql:\"serverPowerSupply\""
	ServerPowerSupplyType ServerPowerSupplyType "json:\"serverPowerSupplyType\" graphql:\"serverPowerSupplyType\""
	ServerProvider        ServerProvider        "json:\"serverProvider\" graphql:\"serverProvider\""
	Server                Server                "json:\"server\" graphql:\"server\""
	ServerType            ServerType            "json:\"serverType\" graphql:\"serverType\""
	Entities              []Entity              "json:\"_entities\" graphql:\"_entities\""
	Service               Service               "json:\"_service\" graphql:\"_service\""
}
type Mutation struct {
	ServerChassisCreate         ServerChassisCreatePayload         "json:\"serverChassisCreate\" graphql:\"serverChassisCreate\""
	ServerChassisUpdate         ServerChassisUpdatePayload         "json:\"serverChassisUpdate\" graphql:\"serverChassisUpdate\""
	ServerChassisDelete         ServerChassisDeletePayload         "json:\"serverChassisDelete\" graphql:\"serverChassisDelete\""
	ServerChassisTypeCreate     ServerChassisTypeCreatePayload     "json:\"serverChassisTypeCreate\" graphql:\"serverChassisTypeCreate\""
	ServerChassisTypeUpdate     ServerChassisTypeUpdatePayload     "json:\"serverChassisTypeUpdate\" graphql:\"serverChassisTypeUpdate\""
	ServerChassisTypeDelete     ServerChassisTypeDeletePayload     "json:\"serverChassisTypeDelete\" graphql:\"serverChassisTypeDelete\""
	ServerComponentCreate       ServerComponentCreatePayload       "json:\"serverComponentCreate\" graphql:\"serverComponentCreate\""
	ServerComponentUpdate       ServerComponentUpdatePayload       "json:\"serverComponentUpdate\" graphql:\"serverComponentUpdate\""
	ServerComponentDelete       ServerComponentDeletePayload       "json:\"serverComponentDelete\" graphql:\"serverComponentDelete\""
	ServerComponentTypeCreate   ServerComponentTypeCreatePayload   "json:\"serverComponentTypeCreate\" graphql:\"serverComponentTypeCreate\""
	ServerComponentTypeUpdate   ServerComponentTypeUpdatePayload   "json:\"serverComponentTypeUpdate\" graphql:\"serverComponentTypeUpdate\""
	ServerComponentTypeDelete   ServerComponentTypeDeletePayload   "json:\"serverComponentTypeDelete\" graphql:\"serverComponentTypeDelete\""
	ServerCPUCreate             ServerCPUCreatePayload             "json:\"serverCPUCreate\" graphql:\"serverCPUCreate\""
	ServerCPUUpdate             ServerCPUUpdatePayload             "json:\"serverCPUUpdate\" graphql:\"serverCPUUpdate\""
	ServerCPUDelete             ServerCPUDeletePayload             "json:\"serverCPUDelete\" graphql:\"serverCPUDelete\""
	ServerCPUTypeCreate         ServerCPUTypeCreatePayload         "json:\"serverCPUTypeCreate\" graphql:\"serverCPUTypeCreate\""
	ServerCPUTypeUpdate         ServerCPUTypeUpdatePayload         "json:\"serverCPUTypeUpdate\" graphql:\"serverCPUTypeUpdate\""
	ServerCPUTypeDelete         ServerCPUTypeDeletePayload         "json:\"serverCPUTypeDelete\" graphql:\"serverCPUTypeDelete\""
	ServerHardDriveCreate       ServerHardDriveCreatePayload       "json:\"serverHardDriveCreate\" graphql:\"serverHardDriveCreate\""
	ServerHardDriveUpdate       ServerHardDriveUpdatePayload       "json:\"serverHardDriveUpdate\" graphql:\"serverHardDriveUpdate\""
	ServerHardDriveDelete       ServerHardDriveDeletePayload       "json:\"serverHardDriveDelete\" graphql:\"serverHardDriveDelete\""
	ServerHardDriveTypeCreate   ServerHardDriveTypeCreatePayload   "json:\"serverHardDriveTypeCreate\" graphql:\"serverHardDriveTypeCreate\""
	ServerHardDriveTypeUpdate   ServerHardDriveTypeUpdatePayload   "json:\"serverHardDriveTypeUpdate\" graphql:\"serverHardDriveTypeUpdate\""
	ServerHardDriveTypeDelete   ServerHardDriveTypeDeletePayload   "json:\"serverHardDriveTypeDelete\" graphql:\"serverHardDriveTypeDelete\""
	ServerMemoryCreate          ServerMemoryCreatePayload          "json:\"serverMemoryCreate\" graphql:\"serverMemoryCreate\""
	ServerMemoryUpdate          ServerMemoryUpdatePayload          "json:\"serverMemoryUpdate\" graphql:\"serverMemoryUpdate\""
	ServerMemoryDelete          ServerMemoryDeletePayload          "json:\"serverMemoryDelete\" graphql:\"serverMemoryDelete\""
	ServerMemoryTypeCreate      ServerMemoryTypeCreatePayload      "json:\"serverMemoryTypeCreate\" graphql:\"serverMemoryTypeCreate\""
	ServerMemoryTypeUpdate      ServerMemoryTypeUpdatePayload      "json:\"serverMemoryTypeUpdate\" graphql:\"serverMemoryTypeUpdate\""
	ServerMemoryTypeDelete      ServerMemoryTypeDeletePayload      "json:\"serverMemoryTypeDelete\" graphql:\"serverMemoryTypeDelete\""
	ServerMotherboardCreate     ServerMotherboardCreatePayload     "json:\"serverMotherboardCreate\" graphql:\"serverMotherboardCreate\""
	ServerMotherboardUpdate     ServerMotherboardUpdatePayload     "json:\"serverMotherboardUpdate\" graphql:\"serverMotherboardUpdate\""
	ServerMotherboardDelete     ServerMotherboardDeletePayload     "json:\"serverMotherboardDelete\" graphql:\"serverMotherboardDelete\""
	ServerMotherboardTypeCreate ServerMotherboardTypeCreatePayload "json:\"serverMotherboardTypeCreate\" graphql:\"serverMotherboardTypeCreate\""
	ServerMotherboardTypeUpdate ServerMotherboardTypeUpdatePayload "json:\"serverMotherboardTypeUpdate\" graphql:\"serverMotherboardTypeUpdate\""
	ServerMotherboardTypeDelete ServerMotherboardTypeDeletePayload "json:\"serverMotherboardTypeDelete\" graphql:\"serverMotherboardTypeDelete\""
	ServerNetworkCard           ServerNetworkCardCreatePayload     "json:\"serverNetworkCard\" graphql:\"serverNetworkCard\""
	ServerNetworkCardUpdate     ServerNetworkCardUpdatePayload     "json:\"serverNetworkCardUpdate\" graphql:\"serverNetworkCardUpdate\""
	ServerNetworkCardDelete     ServerNetworkCardDeletePayload     "json:\"serverNetworkCardDelete\" graphql:\"serverNetworkCardDelete\""
	ServerNetworkCardType       ServerNetworkCardTypeCreatePayload "json:\"serverNetworkCardType\" graphql:\"serverNetworkCardType\""
	ServerNetworkCardTypeUpdate ServerNetworkCardTypeUpdatePayload "json:\"serverNetworkCardTypeUpdate\" graphql:\"serverNetworkCardTypeUpdate\""
	ServerNetworkCardTypeDelete ServerNetworkCardTypeDeletePayload "json:\"serverNetworkCardTypeDelete\" graphql:\"serverNetworkCardTypeDelete\""
	ServerNetworkPort           ServerNetworkPortCreatePayload     "json:\"serverNetworkPort\" graphql:\"serverNetworkPort\""
	ServerNetworkPortUpdate     ServerNetworkPortUpdatePayload     "json:\"serverNetworkPortUpdate\" graphql:\"serverNetworkPortUpdate\""
	ServerNetworkPortDelete     ServerNetworkPortDeletePayload     "json:\"serverNetworkPortDelete\" graphql:\"serverNetworkPortDelete\""
	ServerPowerSupply           ServerPowerSupplyCreatePayload     "json:\"serverPowerSupply\" graphql:\"serverPowerSupply\""
	ServerPowerSupplyUpdate     ServerPowerSupplyUpdatePayload     "json:\"serverPowerSupplyUpdate\" graphql:\"serverPowerSupplyUpdate\""
	ServerPowerSupplyDelete     ServerPowerSupplyDeletePayload     "json:\"serverPowerSupplyDelete\" graphql:\"serverPowerSupplyDelete\""
	ServerPowerSupplyType       ServerPowerSupplyTypeCreatePayload "json:\"serverPowerSupplyType\" graphql:\"serverPowerSupplyType\""
	ServerPowerSupplyTypeUpdate ServerPowerSupplyTypeUpdatePayload "json:\"serverPowerSupplyTypeUpdate\" graphql:\"serverPowerSupplyTypeUpdate\""
	ServerPowerSupplyTypeDelete ServerPowerSupplyTypeDeletePayload "json:\"serverPowerSupplyTypeDelete\" graphql:\"serverPowerSupplyTypeDelete\""
	ServerProviderCreate        ServerProviderCreatePayload        "json:\"serverProviderCreate\" graphql:\"serverProviderCreate\""
	ServerProviderUpdate        ServerProviderUpdatePayload        "json:\"serverProviderUpdate\" graphql:\"serverProviderUpdate\""
	ServerProviderDelete        ServerProviderDeletePayload        "json:\"serverProviderDelete\" graphql:\"serverProviderDelete\""
	ServerCreate                ServerCreatePayload                "json:\"serverCreate\" graphql:\"serverCreate\""
	ServerUpdate                ServerUpdatePayload                "json:\"serverUpdate\" graphql:\"serverUpdate\""
	ServerDelete                ServerDeletePayload                "json:\"serverDelete\" graphql:\"serverDelete\""
	ServerTypeCreate            ServerTypeCreatePayload            "json:\"serverTypeCreate\" graphql:\"serverTypeCreate\""
	ServerTypeUpdate            ServerTypeUpdatePayload            "json:\"serverTypeUpdate\" graphql:\"serverTypeUpdate\""
	ServerTypeDelete            ServerTypeDeletePayload            "json:\"serverTypeDelete\" graphql:\"serverTypeDelete\""
}
type GetHardDrive struct {
	ServerHardDrive struct {
		ID     gidx.PrefixedID "json:\"id\" graphql:\"id\""
		Serial string          "json:\"serial\" graphql:\"serial\""
		Server struct {
			ID gidx.PrefixedID "json:\"id\" graphql:\"id\""
		} "json:\"server\" graphql:\"server\""
		CreatedAt           time.Time "json:\"createdAt\" graphql:\"createdAt\""
		UpdatedAt           time.Time "json:\"updatedAt\" graphql:\"updatedAt\""
		ServerHardDriveType struct {
			ID gidx.PrefixedID "json:\"id\" graphql:\"id\""
		} "json:\"serverHardDriveType\" graphql:\"serverHardDriveType\""
	} "json:\"serverHardDrive\" graphql:\"serverHardDrive\""
}
type GetHardDriveType struct {
	ServerHardDriveType struct {
		ID        gidx.PrefixedID         "json:\"id\" graphql:\"id\""
		Type      ServerHardDriveTypeType "json:\"type\" graphql:\"type\""
		Model     string                  "json:\"model\" graphql:\"model\""
		Speed     string                  "json:\"speed\" graphql:\"speed\""
		Vendor    string                  "json:\"vendor\" graphql:\"vendor\""
		Capacity  string                  "json:\"capacity\" graphql:\"capacity\""
		CreatedAt time.Time               "json:\"createdAt\" graphql:\"createdAt\""
		UpdatedAt time.Time               "json:\"updatedAt\" graphql:\"updatedAt\""
		HardDrive struct {
			TotalCount int64 "json:\"totalCount\" graphql:\"totalCount\""
		} "json:\"hardDrive\" graphql:\"hardDrive\""
	} "json:\"serverHardDriveType\" graphql:\"serverHardDriveType\""
}
type GetOwnerServers struct {
	Entities []*struct {
		Servers struct {
			Edges []*struct {
				Node *struct {
					ID   gidx.PrefixedID "json:\"id\" graphql:\"id\""
					Name string          "json:\"name\" graphql:\"name\""
				} "json:\"node\" graphql:\"node\""
			} "json:\"edges\" graphql:\"edges\""
		} "json:\"servers\" graphql:\"servers\""
	} "json:\"_entities\" graphql:\"_entities\""
}
type GetServer struct {
	Server struct {
		ID          gidx.PrefixedID "json:\"id\" graphql:\"id\""
		Name        string          "json:\"name\" graphql:\"name\""
		Description *string         "json:\"description\" graphql:\"description\""
		Owner       struct {
			ID gidx.PrefixedID "json:\"id\" graphql:\"id\""
		} "json:\"owner\" graphql:\"owner\""
		Location struct {
			ID gidx.PrefixedID "json:\"id\" graphql:\"id\""
		} "json:\"location\" graphql:\"location\""
		ServerProvider struct {
			ID gidx.PrefixedID "json:\"id\" graphql:\"id\""
		} "json:\"serverProvider\" graphql:\"serverProvider\""
		CreatedAt time.Time "json:\"createdAt\" graphql:\"createdAt\""
		UpdatedAt time.Time "json:\"updatedAt\" graphql:\"updatedAt\""
	} "json:\"server\" graphql:\"server\""
}
type GetServerCPU struct {
	ServerCPU struct {
		ID     gidx.PrefixedID "json:\"id\" graphql:\"id\""
		Serial string          "json:\"serial\" graphql:\"serial\""
		Server struct {
			ID gidx.PrefixedID "json:\"id\" graphql:\"id\""
		} "json:\"server\" graphql:\"server\""
		CreatedAt     time.Time "json:\"createdAt\" graphql:\"createdAt\""
		UpdatedAt     time.Time "json:\"updatedAt\" graphql:\"updatedAt\""
		ServerCPUType struct {
			ID gidx.PrefixedID "json:\"id\" graphql:\"id\""
		} "json:\"serverCPUType\" graphql:\"serverCPUType\""
	} "json:\"serverCPU\" graphql:\"serverCPU\""
}
type GetServerCPUType struct {
	ServerCPUType struct {
		ID         gidx.PrefixedID "json:\"id\" graphql:\"id\""
		Vendor     string          "json:\"vendor\" graphql:\"vendor\""
		Model      string          "json:\"model\" graphql:\"model\""
		CoreCount  int64           "json:\"coreCount\" graphql:\"coreCount\""
		ClockSpeed string          "json:\"clockSpeed\" graphql:\"clockSpeed\""
		CreatedAt  time.Time       "json:\"createdAt\" graphql:\"createdAt\""
		UpdatedAt  time.Time       "json:\"updatedAt\" graphql:\"updatedAt\""
	} "json:\"serverCPUType\" graphql:\"serverCPUType\""
}
type GetServerChassis struct {
	ServerChassis struct {
		ID     gidx.PrefixedID "json:\"id\" graphql:\"id\""
		Serial string          "json:\"serial\" graphql:\"serial\""
		Server struct {
			ID gidx.PrefixedID "json:\"id\" graphql:\"id\""
		} "json:\"server\" graphql:\"server\""
		ServerChassisType struct {
			ID gidx.PrefixedID "json:\"id\" graphql:\"id\""
		} "json:\"serverChassisType\" graphql:\"serverChassisType\""
		CreatedAt time.Time "json:\"createdAt\" graphql:\"createdAt\""
		UpdatedAt time.Time "json:\"updatedAt\" graphql:\"updatedAt\""
	} "json:\"serverChassis\" graphql:\"serverChassis\""
}
type GetServerChassisType struct {
	ServerChassisType struct {
		ID          gidx.PrefixedID "json:\"id\" graphql:\"id\""
		Model       string          "json:\"model\" graphql:\"model\""
		Vendor      string          "json:\"vendor\" graphql:\"vendor\""
		Height      string          "json:\"height\" graphql:\"height\""
		CreatedAt   time.Time       "json:\"createdAt\" graphql:\"createdAt\""
		UpdatedAt   time.Time       "json:\"updatedAt\" graphql:\"updatedAt\""
		IsFullDepth bool            "json:\"isFullDepth\" graphql:\"isFullDepth\""
	} "json:\"serverChassisType\" graphql:\"serverChassisType\""
}
type GetServerComponent struct {
	ServerComponent struct {
		ID     gidx.PrefixedID "json:\"id\" graphql:\"id\""
		Name   string          "json:\"name\" graphql:\"name\""
		Model  string          "json:\"model\" graphql:\"model\""
		Vendor string          "json:\"vendor\" graphql:\"vendor\""
		Serial string          "json:\"serial\" graphql:\"serial\""
		Server struct {
			ID gidx.PrefixedID "json:\"id\" graphql:\"id\""
		} "json:\"server\" graphql:\"server\""
		ServerComponentType struct {
			ID gidx.PrefixedID "json:\"id\" graphql:\"id\""
		} "json:\"serverComponentType\" graphql:\"serverComponentType\""
		CreatedAt time.Time "json:\"createdAt\" graphql:\"createdAt\""
		UpdatedAt time.Time "json:\"updatedAt\" graphql:\"updatedAt\""
	} "json:\"serverComponent\" graphql:\"serverComponent\""
}
type GetServerComponentType struct {
	ServerComponentType struct {
		ID        gidx.PrefixedID "json:\"id\" graphql:\"id\""
		Name      string          "json:\"name\" graphql:\"name\""
		CreatedAt time.Time       "json:\"createdAt\" graphql:\"createdAt\""
		UpdatedAt time.Time       "json:\"updatedAt\" graphql:\"updatedAt\""
	} "json:\"serverComponentType\" graphql:\"serverComponentType\""
}
type GetServerMemory struct {
	ServerMemory struct {
		ID        gidx.PrefixedID "json:\"id\" graphql:\"id\""
		Serial    string          "json:\"serial\" graphql:\"serial\""
		CreatedAt time.Time       "json:\"createdAt\" graphql:\"createdAt\""
		UpdatedAt time.Time       "json:\"updatedAt\" graphql:\"updatedAt\""
		Server    struct {
			ID gidx.PrefixedID "json:\"id\" graphql:\"id\""
		} "json:\"server\" graphql:\"server\""
		ServerMemoryType struct {
			ID gidx.PrefixedID "json:\"id\" graphql:\"id\""
		} "json:\"serverMemoryType\" graphql:\"serverMemoryType\""
	} "json:\"serverMemory\" graphql:\"serverMemory\""
}
type GetServerMemoryType struct {
	ServerMemoryType struct {
		ID        gidx.PrefixedID "json:\"id\" graphql:\"id\""
		Size      string          "json:\"size\" graphql:\"size\""
		CreatedAt time.Time       "json:\"createdAt\" graphql:\"createdAt\""
		UpdatedAt time.Time       "json:\"updatedAt\" graphql:\"updatedAt\""
		Model     string          "json:\"model\" graphql:\"model\""
		Speed     string          "json:\"speed\" graphql:\"speed\""
		Vendor    string          "json:\"vendor\" graphql:\"vendor\""
	} "json:\"serverMemoryType\" graphql:\"serverMemoryType\""
}
type GetServerMotherboard struct {
	ServerMotherboard struct {
		ID        gidx.PrefixedID "json:\"id\" graphql:\"id\""
		Serial    string          "json:\"serial\" graphql:\"serial\""
		CreatedAt time.Time       "json:\"createdAt\" graphql:\"createdAt\""
		Server    struct {
			ID gidx.PrefixedID "json:\"id\" graphql:\"id\""
		} "json:\"server\" graphql:\"server\""
		UpdatedAt             time.Time "json:\"updatedAt\" graphql:\"updatedAt\""
		ServerMotherboardType struct {
			ID gidx.PrefixedID "json:\"id\" graphql:\"id\""
		} "json:\"serverMotherboardType\" graphql:\"serverMotherboardType\""
	} "json:\"serverMotherboard\" graphql:\"serverMotherboard\""
}
type GetServerMotherboardType struct {
	ServerMotherboardType struct {
		ID        gidx.PrefixedID "json:\"id\" graphql:\"id\""
		Model     string          "json:\"model\" graphql:\"model\""
		Vendor    string          "json:\"vendor\" graphql:\"vendor\""
		CreatedAt time.Time       "json:\"createdAt\" graphql:\"createdAt\""
		UpdatedAt time.Time       "json:\"updatedAt\" graphql:\"updatedAt\""
	} "json:\"serverMotherboardType\" graphql:\"serverMotherboardType\""
}
type GetServerType struct {
	ServerType struct {
		ID    gidx.PrefixedID "json:\"id\" graphql:\"id\""
		Name  string          "json:\"name\" graphql:\"name\""
		Owner struct {
			ID gidx.PrefixedID "json:\"id\" graphql:\"id\""
		} "json:\"owner\" graphql:\"owner\""
		CreatedAt time.Time "json:\"createdAt\" graphql:\"createdAt\""
		UpdatedAt time.Time "json:\"updatedAt\" graphql:\"updatedAt\""
	} "json:\"serverType\" graphql:\"serverType\""
}
type ServerCPUCreate struct {
	ServerCPUCreate struct {
		ServerCPU struct {
			ID     gidx.PrefixedID "json:\"id\" graphql:\"id\""
			Serial string          "json:\"serial\" graphql:\"serial\""
			Server struct {
				ID gidx.PrefixedID "json:\"id\" graphql:\"id\""
			} "json:\"server\" graphql:\"server\""
			CreatedAt     time.Time "json:\"createdAt\" graphql:\"createdAt\""
			UpdatedAt     time.Time "json:\"updatedAt\" graphql:\"updatedAt\""
			ServerCPUType struct {
				ID gidx.PrefixedID "json:\"id\" graphql:\"id\""
			} "json:\"serverCPUType\" graphql:\"serverCPUType\""
		} "json:\"serverCPU\" graphql:\"serverCPU\""
	} "json:\"serverCPUCreate\" graphql:\"serverCPUCreate\""
}
type ServerCPUDelete struct {
	ServerCPUDelete struct {
		DeletedID gidx.PrefixedID "json:\"deletedID\" graphql:\"deletedID\""
	} "json:\"serverCPUDelete\" graphql:\"serverCPUDelete\""
}
type ServerCPUTypeCreate struct {
	ServerCPUTypeCreate struct {
		ServerCPUType struct {
			ID         gidx.PrefixedID "json:\"id\" graphql:\"id\""
			Vendor     string          "json:\"vendor\" graphql:\"vendor\""
			Model      string          "json:\"model\" graphql:\"model\""
			CoreCount  int64           "json:\"coreCount\" graphql:\"coreCount\""
			ClockSpeed string          "json:\"clockSpeed\" graphql:\"clockSpeed\""
			CreatedAt  time.Time       "json:\"createdAt\" graphql:\"createdAt\""
			UpdatedAt  time.Time       "json:\"updatedAt\" graphql:\"updatedAt\""
		} "json:\"serverCPUType\" graphql:\"serverCPUType\""
	} "json:\"serverCPUTypeCreate\" graphql:\"serverCPUTypeCreate\""
}
type ServerCPUTypeDelete struct {
	ServerCPUTypeDelete struct {
		DeletedID gidx.PrefixedID "json:\"deletedID\" graphql:\"deletedID\""
	} "json:\"serverCPUTypeDelete\" graphql:\"serverCPUTypeDelete\""
}
type ServerCPUTypeUpdate struct {
	ServerCPUTypeUpdate struct {
		ServerCPUType struct {
			ID         gidx.PrefixedID "json:\"id\" graphql:\"id\""
			Vendor     string          "json:\"vendor\" graphql:\"vendor\""
			Model      string          "json:\"model\" graphql:\"model\""
			CoreCount  int64           "json:\"coreCount\" graphql:\"coreCount\""
			ClockSpeed string          "json:\"clockSpeed\" graphql:\"clockSpeed\""
			CreatedAt  time.Time       "json:\"createdAt\" graphql:\"createdAt\""
			UpdatedAt  time.Time       "json:\"updatedAt\" graphql:\"updatedAt\""
		} "json:\"serverCPUType\" graphql:\"serverCPUType\""
	} "json:\"serverCPUTypeUpdate\" graphql:\"serverCPUTypeUpdate\""
}
type ServerCPUUpdate struct {
	ServerCPUUpdate struct {
		ServerCPU struct {
			ID     gidx.PrefixedID "json:\"id\" graphql:\"id\""
			Serial string          "json:\"serial\" graphql:\"serial\""
			Server struct {
				ID gidx.PrefixedID "json:\"id\" graphql:\"id\""
			} "json:\"server\" graphql:\"server\""
			CreatedAt     time.Time "json:\"createdAt\" graphql:\"createdAt\""
			UpdatedAt     time.Time "json:\"updatedAt\" graphql:\"updatedAt\""
			ServerCPUType struct {
				ID gidx.PrefixedID "json:\"id\" graphql:\"id\""
			} "json:\"serverCPUType\" graphql:\"serverCPUType\""
		} "json:\"serverCPU\" graphql:\"serverCPU\""
	} "json:\"serverCPUUpdate\" graphql:\"serverCPUUpdate\""
}
type ServerChassisCreate struct {
	ServerChassisCreate struct {
		ServerChassis struct {
			ID     gidx.PrefixedID "json:\"id\" graphql:\"id\""
			Serial string          "json:\"serial\" graphql:\"serial\""
			Server struct {
				ID gidx.PrefixedID "json:\"id\" graphql:\"id\""
			} "json:\"server\" graphql:\"server\""
			ServerChassisType struct {
				ID gidx.PrefixedID "json:\"id\" graphql:\"id\""
			} "json:\"serverChassisType\" graphql:\"serverChassisType\""
			CreatedAt time.Time "json:\"createdAt\" graphql:\"createdAt\""
			UpdatedAt time.Time "json:\"updatedAt\" graphql:\"updatedAt\""
		} "json:\"serverChassis\" graphql:\"serverChassis\""
	} "json:\"serverChassisCreate\" graphql:\"serverChassisCreate\""
}
type ServerChassisDelete struct {
	ServerChassisDelete struct {
		DeletedID gidx.PrefixedID "json:\"deletedID\" graphql:\"deletedID\""
	} "json:\"serverChassisDelete\" graphql:\"serverChassisDelete\""
}
type ServerChassisTypeCreate struct {
	ServerChassisTypeCreate struct {
		ServerChassisType struct {
			ID          gidx.PrefixedID "json:\"id\" graphql:\"id\""
			Model       string          "json:\"model\" graphql:\"model\""
			Vendor      string          "json:\"vendor\" graphql:\"vendor\""
			Height      string          "json:\"height\" graphql:\"height\""
			CreatedAt   time.Time       "json:\"createdAt\" graphql:\"createdAt\""
			UpdatedAt   time.Time       "json:\"updatedAt\" graphql:\"updatedAt\""
			IsFullDepth bool            "json:\"isFullDepth\" graphql:\"isFullDepth\""
		} "json:\"serverChassisType\" graphql:\"serverChassisType\""
	} "json:\"serverChassisTypeCreate\" graphql:\"serverChassisTypeCreate\""
}
type ServerChassisTypeDelete struct {
	ServerChassisTypeDelete struct {
		DeletedID gidx.PrefixedID "json:\"deletedID\" graphql:\"deletedID\""
	} "json:\"serverChassisTypeDelete\" graphql:\"serverChassisTypeDelete\""
}
type ServerChassisTypeUpdate struct {
	ServerChassisTypeUpdate struct {
		ServerChassisType struct {
			ID          gidx.PrefixedID "json:\"id\" graphql:\"id\""
			Model       string          "json:\"model\" graphql:\"model\""
			Vendor      string          "json:\"vendor\" graphql:\"vendor\""
			Height      string          "json:\"height\" graphql:\"height\""
			CreatedAt   time.Time       "json:\"createdAt\" graphql:\"createdAt\""
			UpdatedAt   time.Time       "json:\"updatedAt\" graphql:\"updatedAt\""
			IsFullDepth bool            "json:\"isFullDepth\" graphql:\"isFullDepth\""
		} "json:\"serverChassisType\" graphql:\"serverChassisType\""
	} "json:\"serverChassisTypeUpdate\" graphql:\"serverChassisTypeUpdate\""
}
type ServerChassisUpdate struct {
	ServerChassisUpdate struct {
		ServerChassis struct {
			ID     gidx.PrefixedID "json:\"id\" graphql:\"id\""
			Serial string          "json:\"serial\" graphql:\"serial\""
			Server struct {
				ID gidx.PrefixedID "json:\"id\" graphql:\"id\""
			} "json:\"server\" graphql:\"server\""
			ServerChassisType struct {
				ID gidx.PrefixedID "json:\"id\" graphql:\"id\""
			} "json:\"serverChassisType\" graphql:\"serverChassisType\""
			CreatedAt time.Time "json:\"createdAt\" graphql:\"createdAt\""
			UpdatedAt time.Time "json:\"updatedAt\" graphql:\"updatedAt\""
		} "json:\"serverChassis\" graphql:\"serverChassis\""
	} "json:\"serverChassisUpdate\" graphql:\"serverChassisUpdate\""
}
type ServerComponentCreate struct {
	ServerComponentCreate struct {
		ServerComponent struct {
			ID     gidx.PrefixedID "json:\"id\" graphql:\"id\""
			Name   string          "json:\"name\" graphql:\"name\""
			Model  string          "json:\"model\" graphql:\"model\""
			Vendor string          "json:\"vendor\" graphql:\"vendor\""
			Serial string          "json:\"serial\" graphql:\"serial\""
			Server struct {
				ID gidx.PrefixedID "json:\"id\" graphql:\"id\""
			} "json:\"server\" graphql:\"server\""
			ServerComponentType struct {
				ID gidx.PrefixedID "json:\"id\" graphql:\"id\""
			} "json:\"serverComponentType\" graphql:\"serverComponentType\""
			CreatedAt time.Time "json:\"createdAt\" graphql:\"createdAt\""
			UpdatedAt time.Time "json:\"updatedAt\" graphql:\"updatedAt\""
		} "json:\"serverComponent\" graphql:\"serverComponent\""
	} "json:\"serverComponentCreate\" graphql:\"serverComponentCreate\""
}
type ServerComponentDelete struct {
	ServerComponentDelete struct {
		DeletedID gidx.PrefixedID "json:\"deletedID\" graphql:\"deletedID\""
	} "json:\"serverComponentDelete\" graphql:\"serverComponentDelete\""
}
type ServerComponentTypeCreate struct {
	ServerComponentTypeCreate struct {
		ServerComponentType struct {
			ID        gidx.PrefixedID "json:\"id\" graphql:\"id\""
			Name      string          "json:\"name\" graphql:\"name\""
			CreatedAt time.Time       "json:\"createdAt\" graphql:\"createdAt\""
			UpdatedAt time.Time       "json:\"updatedAt\" graphql:\"updatedAt\""
		} "json:\"serverComponentType\" graphql:\"serverComponentType\""
	} "json:\"serverComponentTypeCreate\" graphql:\"serverComponentTypeCreate\""
}
type ServerComponentTypeDelete struct {
	ServerComponentTypeDelete struct {
		DeletedID gidx.PrefixedID "json:\"deletedID\" graphql:\"deletedID\""
	} "json:\"serverComponentTypeDelete\" graphql:\"serverComponentTypeDelete\""
}
type ServerComponentTypeUpdate struct {
	ServerComponentTypeUpdate struct {
		ServerComponentType struct {
			ID        gidx.PrefixedID "json:\"id\" graphql:\"id\""
			Name      string          "json:\"name\" graphql:\"name\""
			CreatedAt time.Time       "json:\"createdAt\" graphql:\"createdAt\""
			UpdatedAt time.Time       "json:\"updatedAt\" graphql:\"updatedAt\""
		} "json:\"serverComponentType\" graphql:\"serverComponentType\""
	} "json:\"serverComponentTypeUpdate\" graphql:\"serverComponentTypeUpdate\""
}
type ServerComponentUpdate struct {
	ServerComponentUpdate struct {
		ServerComponent struct {
			ID     gidx.PrefixedID "json:\"id\" graphql:\"id\""
			Name   string          "json:\"name\" graphql:\"name\""
			Model  string          "json:\"model\" graphql:\"model\""
			Vendor string          "json:\"vendor\" graphql:\"vendor\""
			Serial string          "json:\"serial\" graphql:\"serial\""
			Server struct {
				ID gidx.PrefixedID "json:\"id\" graphql:\"id\""
			} "json:\"server\" graphql:\"server\""
			ServerComponentType struct {
				ID gidx.PrefixedID "json:\"id\" graphql:\"id\""
			} "json:\"serverComponentType\" graphql:\"serverComponentType\""
			CreatedAt time.Time "json:\"createdAt\" graphql:\"createdAt\""
			UpdatedAt time.Time "json:\"updatedAt\" graphql:\"updatedAt\""
		} "json:\"serverComponent\" graphql:\"serverComponent\""
	} "json:\"serverComponentUpdate\" graphql:\"serverComponentUpdate\""
}
type ServerCreate struct {
	ServerCreate struct {
		Server struct {
			ID             gidx.PrefixedID "json:\"id\" graphql:\"id\""
			Name           string          "json:\"name\" graphql:\"name\""
			ServerProvider struct {
				ID gidx.PrefixedID "json:\"id\" graphql:\"id\""
			} "json:\"serverProvider\" graphql:\"serverProvider\""
			Owner struct {
				ID gidx.PrefixedID "json:\"id\" graphql:\"id\""
			} "json:\"owner\" graphql:\"owner\""
			Location struct {
				ID gidx.PrefixedID "json:\"id\" graphql:\"id\""
			} "json:\"location\" graphql:\"location\""
			CreatedAt time.Time "json:\"createdAt\" graphql:\"createdAt\""
			UpdatedAt time.Time "json:\"updatedAt\" graphql:\"updatedAt\""
		} "json:\"server\" graphql:\"server\""
	} "json:\"serverCreate\" graphql:\"serverCreate\""
}
type ServerDelete struct {
	ServerDelete struct {
		DeletedID gidx.PrefixedID "json:\"deletedID\" graphql:\"deletedID\""
	} "json:\"serverDelete\" graphql:\"serverDelete\""
}
type ServerHardDriveCreate struct {
	ServerHardDriveCreate struct {
		ServerHardDrive struct {
			ID     gidx.PrefixedID "json:\"id\" graphql:\"id\""
			Serial string          "json:\"serial\" graphql:\"serial\""
			Server struct {
				ID gidx.PrefixedID "json:\"id\" graphql:\"id\""
			} "json:\"server\" graphql:\"server\""
			CreatedAt           time.Time "json:\"createdAt\" graphql:\"createdAt\""
			UpdatedAt           time.Time "json:\"updatedAt\" graphql:\"updatedAt\""
			ServerHardDriveType struct {
				ID gidx.PrefixedID "json:\"id\" graphql:\"id\""
			} "json:\"serverHardDriveType\" graphql:\"serverHardDriveType\""
		} "json:\"serverHardDrive\" graphql:\"serverHardDrive\""
	} "json:\"serverHardDriveCreate\" graphql:\"serverHardDriveCreate\""
}
type ServerHardDriveDelete struct {
	ServerHardDriveDelete struct {
		DeletedID gidx.PrefixedID "json:\"deletedID\" graphql:\"deletedID\""
	} "json:\"serverHardDriveDelete\" graphql:\"serverHardDriveDelete\""
}
type ServerHardDriveTypeCreate struct {
	ServerHardDriveTypeCreate struct {
		ServerHardDriveType struct {
			ID        gidx.PrefixedID         "json:\"id\" graphql:\"id\""
			Type      ServerHardDriveTypeType "json:\"type\" graphql:\"type\""
			Model     string                  "json:\"model\" graphql:\"model\""
			Speed     string                  "json:\"speed\" graphql:\"speed\""
			Vendor    string                  "json:\"vendor\" graphql:\"vendor\""
			Capacity  string                  "json:\"capacity\" graphql:\"capacity\""
			CreatedAt time.Time               "json:\"createdAt\" graphql:\"createdAt\""
			UpdatedAt time.Time               "json:\"updatedAt\" graphql:\"updatedAt\""
			HardDrive struct {
				TotalCount int64 "json:\"totalCount\" graphql:\"totalCount\""
			} "json:\"hardDrive\" graphql:\"hardDrive\""
		} "json:\"serverHardDriveType\" graphql:\"serverHardDriveType\""
	} "json:\"serverHardDriveTypeCreate\" graphql:\"serverHardDriveTypeCreate\""
}
type ServerHardDriveTypeDelete struct {
	ServerHardDriveTypeDelete struct {
		DeletedID gidx.PrefixedID "json:\"deletedID\" graphql:\"deletedID\""
	} "json:\"serverHardDriveTypeDelete\" graphql:\"serverHardDriveTypeDelete\""
}
type ServerHardDriveTypeUpdate struct {
	ServerHardDriveTypeUpdate struct {
		ServerHardDriveType struct {
			ID        gidx.PrefixedID         "json:\"id\" graphql:\"id\""
			Type      ServerHardDriveTypeType "json:\"type\" graphql:\"type\""
			Model     string                  "json:\"model\" graphql:\"model\""
			Speed     string                  "json:\"speed\" graphql:\"speed\""
			Vendor    string                  "json:\"vendor\" graphql:\"vendor\""
			Capacity  string                  "json:\"capacity\" graphql:\"capacity\""
			CreatedAt time.Time               "json:\"createdAt\" graphql:\"createdAt\""
			UpdatedAt time.Time               "json:\"updatedAt\" graphql:\"updatedAt\""
			HardDrive struct {
				TotalCount int64 "json:\"totalCount\" graphql:\"totalCount\""
			} "json:\"hardDrive\" graphql:\"hardDrive\""
		} "json:\"serverHardDriveType\" graphql:\"serverHardDriveType\""
	} "json:\"serverHardDriveTypeUpdate\" graphql:\"serverHardDriveTypeUpdate\""
}
type ServerHardDriveUpdate struct {
	ServerHardDriveUpdate struct {
		ServerHardDrive struct {
			ID     gidx.PrefixedID "json:\"id\" graphql:\"id\""
			Serial string          "json:\"serial\" graphql:\"serial\""
			Server struct {
				ID gidx.PrefixedID "json:\"id\" graphql:\"id\""
			} "json:\"server\" graphql:\"server\""
			CreatedAt           time.Time "json:\"createdAt\" graphql:\"createdAt\""
			UpdatedAt           time.Time "json:\"updatedAt\" graphql:\"updatedAt\""
			ServerHardDriveType struct {
				ID gidx.PrefixedID "json:\"id\" graphql:\"id\""
			} "json:\"serverHardDriveType\" graphql:\"serverHardDriveType\""
		} "json:\"serverHardDrive\" graphql:\"serverHardDrive\""
	} "json:\"serverHardDriveUpdate\" graphql:\"serverHardDriveUpdate\""
}
type ServerMemoryCreate struct {
	ServerMemoryCreate struct {
		ServerMemory struct {
			ID        gidx.PrefixedID "json:\"id\" graphql:\"id\""
			Serial    string          "json:\"serial\" graphql:\"serial\""
			CreatedAt time.Time       "json:\"createdAt\" graphql:\"createdAt\""
			UpdatedAt time.Time       "json:\"updatedAt\" graphql:\"updatedAt\""
			Server    struct {
				ID gidx.PrefixedID "json:\"id\" graphql:\"id\""
			} "json:\"server\" graphql:\"server\""
			ServerMemoryType struct {
				ID gidx.PrefixedID "json:\"id\" graphql:\"id\""
			} "json:\"serverMemoryType\" graphql:\"serverMemoryType\""
		} "json:\"serverMemory\" graphql:\"serverMemory\""
	} "json:\"serverMemoryCreate\" graphql:\"serverMemoryCreate\""
}
type ServerMemoryDelete struct {
	ServerMemoryDelete struct {
		DeletedID gidx.PrefixedID "json:\"deletedID\" graphql:\"deletedID\""
	} "json:\"serverMemoryDelete\" graphql:\"serverMemoryDelete\""
}
type ServerMemoryTypeCreate struct {
	ServerMemoryTypeCreate struct {
		ServerMemoryType struct {
			ID        gidx.PrefixedID "json:\"id\" graphql:\"id\""
			Size      string          "json:\"size\" graphql:\"size\""
			CreatedAt time.Time       "json:\"createdAt\" graphql:\"createdAt\""
			UpdatedAt time.Time       "json:\"updatedAt\" graphql:\"updatedAt\""
			Model     string          "json:\"model\" graphql:\"model\""
			Speed     string          "json:\"speed\" graphql:\"speed\""
			Vendor    string          "json:\"vendor\" graphql:\"vendor\""
		} "json:\"serverMemoryType\" graphql:\"serverMemoryType\""
	} "json:\"serverMemoryTypeCreate\" graphql:\"serverMemoryTypeCreate\""
}
type ServerMemoryTypeDelete struct {
	ServerMemoryTypeDelete struct {
		DeletedID gidx.PrefixedID "json:\"deletedID\" graphql:\"deletedID\""
	} "json:\"serverMemoryTypeDelete\" graphql:\"serverMemoryTypeDelete\""
}
type ServerMemoryTypeUpdate struct {
	ServerMemoryTypeUpdate struct {
		ServerMemoryType struct {
			ID        gidx.PrefixedID "json:\"id\" graphql:\"id\""
			Size      string          "json:\"size\" graphql:\"size\""
			CreatedAt time.Time       "json:\"createdAt\" graphql:\"createdAt\""
			UpdatedAt time.Time       "json:\"updatedAt\" graphql:\"updatedAt\""
			Model     string          "json:\"model\" graphql:\"model\""
			Speed     string          "json:\"speed\" graphql:\"speed\""
			Vendor    string          "json:\"vendor\" graphql:\"vendor\""
		} "json:\"serverMemoryType\" graphql:\"serverMemoryType\""
	} "json:\"serverMemoryTypeUpdate\" graphql:\"serverMemoryTypeUpdate\""
}
type ServerMemoryUpdate struct {
	ServerMemoryUpdate struct {
		ServerMemory struct {
			ID        gidx.PrefixedID "json:\"id\" graphql:\"id\""
			Serial    string          "json:\"serial\" graphql:\"serial\""
			CreatedAt time.Time       "json:\"createdAt\" graphql:\"createdAt\""
			UpdatedAt time.Time       "json:\"updatedAt\" graphql:\"updatedAt\""
			Server    struct {
				ID gidx.PrefixedID "json:\"id\" graphql:\"id\""
			} "json:\"server\" graphql:\"server\""
			ServerMemoryType struct {
				ID gidx.PrefixedID "json:\"id\" graphql:\"id\""
			} "json:\"serverMemoryType\" graphql:\"serverMemoryType\""
		} "json:\"serverMemory\" graphql:\"serverMemory\""
	} "json:\"serverMemoryUpdate\" graphql:\"serverMemoryUpdate\""
}
type ServerMotherboardCreate struct {
	ServerMotherboardCreate struct {
		ServerMotherboard struct {
			ID        gidx.PrefixedID "json:\"id\" graphql:\"id\""
			Serial    string          "json:\"serial\" graphql:\"serial\""
			CreatedAt time.Time       "json:\"createdAt\" graphql:\"createdAt\""
			Server    struct {
				ID gidx.PrefixedID "json:\"id\" graphql:\"id\""
			} "json:\"server\" graphql:\"server\""
			UpdatedAt             time.Time "json:\"updatedAt\" graphql:\"updatedAt\""
			ServerMotherboardType struct {
				ID gidx.PrefixedID "json:\"id\" graphql:\"id\""
			} "json:\"serverMotherboardType\" graphql:\"serverMotherboardType\""
		} "json:\"serverMotherboard\" graphql:\"serverMotherboard\""
	} "json:\"serverMotherboardCreate\" graphql:\"serverMotherboardCreate\""
}
type ServerMotherboardDelete struct {
	ServerMotherboardDelete struct {
		DeletedID gidx.PrefixedID "json:\"deletedID\" graphql:\"deletedID\""
	} "json:\"serverMotherboardDelete\" graphql:\"serverMotherboardDelete\""
}
type ServerMotherboardTypeCreate struct {
	ServerMotherboardTypeCreate struct {
		ServerMotherboardType struct {
			ID        gidx.PrefixedID "json:\"id\" graphql:\"id\""
			Model     string          "json:\"model\" graphql:\"model\""
			Vendor    string          "json:\"vendor\" graphql:\"vendor\""
			CreatedAt time.Time       "json:\"createdAt\" graphql:\"createdAt\""
			UpdatedAt time.Time       "json:\"updatedAt\" graphql:\"updatedAt\""
		} "json:\"serverMotherboardType\" graphql:\"serverMotherboardType\""
	} "json:\"serverMotherboardTypeCreate\" graphql:\"serverMotherboardTypeCreate\""
}
type ServerMotherboardTypeDelete struct {
	ServerMotherboardTypeDelete struct {
		DeletedID gidx.PrefixedID "json:\"deletedID\" graphql:\"deletedID\""
	} "json:\"serverMotherboardTypeDelete\" graphql:\"serverMotherboardTypeDelete\""
}
type ServerMotherboardTypeUpdate struct {
	ServerMotherboardTypeUpdate struct {
		ServerMotherboardType struct {
			ID        gidx.PrefixedID "json:\"id\" graphql:\"id\""
			Model     string          "json:\"model\" graphql:\"model\""
			Vendor    string          "json:\"vendor\" graphql:\"vendor\""
			CreatedAt time.Time       "json:\"createdAt\" graphql:\"createdAt\""
			UpdatedAt time.Time       "json:\"updatedAt\" graphql:\"updatedAt\""
		} "json:\"serverMotherboardType\" graphql:\"serverMotherboardType\""
	} "json:\"serverMotherboardTypeUpdate\" graphql:\"serverMotherboardTypeUpdate\""
}
type ServerMotherboardUpdate struct {
	ServerMotherboardUpdate struct {
		ServerMotherboard struct {
			ID        gidx.PrefixedID "json:\"id\" graphql:\"id\""
			Serial    string          "json:\"serial\" graphql:\"serial\""
			CreatedAt time.Time       "json:\"createdAt\" graphql:\"createdAt\""
			Server    struct {
				ID gidx.PrefixedID "json:\"id\" graphql:\"id\""
			} "json:\"server\" graphql:\"server\""
			UpdatedAt             time.Time "json:\"updatedAt\" graphql:\"updatedAt\""
			ServerMotherboardType struct {
				ID gidx.PrefixedID "json:\"id\" graphql:\"id\""
			} "json:\"serverMotherboardType\" graphql:\"serverMotherboardType\""
		} "json:\"serverMotherboard\" graphql:\"serverMotherboard\""
	} "json:\"serverMotherboardUpdate\" graphql:\"serverMotherboardUpdate\""
}
type ServerTypeCreate struct {
	ServerTypeCreate struct {
		ServerType struct {
			ID    gidx.PrefixedID "json:\"id\" graphql:\"id\""
			Name  string          "json:\"name\" graphql:\"name\""
			Owner struct {
				ID gidx.PrefixedID "json:\"id\" graphql:\"id\""
			} "json:\"owner\" graphql:\"owner\""
			CreatedAt time.Time "json:\"createdAt\" graphql:\"createdAt\""
			UpdatedAt time.Time "json:\"updatedAt\" graphql:\"updatedAt\""
		} "json:\"serverType\" graphql:\"serverType\""
	} "json:\"serverTypeCreate\" graphql:\"serverTypeCreate\""
}
type ServerTypeDelete struct {
	ServerTypeDelete struct {
		DeletedID gidx.PrefixedID "json:\"deletedID\" graphql:\"deletedID\""
	} "json:\"serverTypeDelete\" graphql:\"serverTypeDelete\""
}
type ServerTypeUpdate struct {
	ServerTypeUpdate struct {
		ServerType struct {
			ID    gidx.PrefixedID "json:\"id\" graphql:\"id\""
			Name  string          "json:\"name\" graphql:\"name\""
			Owner struct {
				ID gidx.PrefixedID "json:\"id\" graphql:\"id\""
			} "json:\"owner\" graphql:\"owner\""
			CreatedAt time.Time "json:\"createdAt\" graphql:\"createdAt\""
			UpdatedAt time.Time "json:\"updatedAt\" graphql:\"updatedAt\""
		} "json:\"serverType\" graphql:\"serverType\""
	} "json:\"serverTypeUpdate\" graphql:\"serverTypeUpdate\""
}
type ServerUpdate struct {
	ServerUpdate struct {
		Server struct {
			ID        gidx.PrefixedID "json:\"id\" graphql:\"id\""
			Name      string          "json:\"name\" graphql:\"name\""
			CreatedAt time.Time       "json:\"createdAt\" graphql:\"createdAt\""
			UpdatedAt time.Time       "json:\"updatedAt\" graphql:\"updatedAt\""
		} "json:\"server\" graphql:\"server\""
	} "json:\"serverUpdate\" graphql:\"serverUpdate\""
}

const GetHardDriveDocument = `query GetHardDrive ($id: ID!) {
	serverHardDrive(id: $id) {
		id
		serial
		server {
			id
		}
		createdAt
		updatedAt
		serverHardDriveType {
			id
		}
	}
}
`

func (c *Client) GetHardDrive(ctx context.Context, id gidx.PrefixedID, httpRequestOptions ...client.HTTPRequestOption) (*GetHardDrive, error) {
	vars := map[string]interface{}{
		"id": id,
	}

	var res GetHardDrive
	if err := c.Client.Post(ctx, "GetHardDrive", GetHardDriveDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const GetHardDriveTypeDocument = `query GetHardDriveType ($id: ID!) {
	serverHardDriveType(id: $id) {
		id
		type
		model
		speed
		vendor
		capacity
		createdAt
		updatedAt
		hardDrive {
			totalCount
		}
	}
}
`

func (c *Client) GetHardDriveType(ctx context.Context, id gidx.PrefixedID, httpRequestOptions ...client.HTTPRequestOption) (*GetHardDriveType, error) {
	vars := map[string]interface{}{
		"id": id,
	}

	var res GetHardDriveType
	if err := c.Client.Post(ctx, "GetHardDriveType", GetHardDriveTypeDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const GetOwnerServersDocument = `query GetOwnerServers ($id: ID!, $orderBy: ServerOrder) {
	_entities(representations: {__typename:"ResourceOwner",id:$id}) {
		... on ResourceOwner {
			servers(orderBy: $orderBy) {
				edges {
					node {
						id
						name
					}
				}
			}
		}
	}
}
`

func (c *Client) GetOwnerServers(ctx context.Context, id gidx.PrefixedID, orderBy *ServerOrder, httpRequestOptions ...client.HTTPRequestOption) (*GetOwnerServers, error) {
	vars := map[string]interface{}{
		"id":      id,
		"orderBy": orderBy,
	}

	var res GetOwnerServers
	if err := c.Client.Post(ctx, "GetOwnerServers", GetOwnerServersDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const GetServerDocument = `query GetServer ($id: ID!) {
	server(id: $id) {
		id
		name
		description
		owner {
			id
		}
		location {
			id
		}
		serverProvider {
			id
		}
		createdAt
		updatedAt
	}
}
`

func (c *Client) GetServer(ctx context.Context, id gidx.PrefixedID, httpRequestOptions ...client.HTTPRequestOption) (*GetServer, error) {
	vars := map[string]interface{}{
		"id": id,
	}

	var res GetServer
	if err := c.Client.Post(ctx, "GetServer", GetServerDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const GetServerCPUDocument = `query GetServerCPU ($id: ID!) {
	serverCPU(id: $id) {
		id
		serial
		server {
			id
		}
		createdAt
		updatedAt
		serverCPUType {
			id
		}
	}
}
`

func (c *Client) GetServerCPU(ctx context.Context, id gidx.PrefixedID, httpRequestOptions ...client.HTTPRequestOption) (*GetServerCPU, error) {
	vars := map[string]interface{}{
		"id": id,
	}

	var res GetServerCPU
	if err := c.Client.Post(ctx, "GetServerCPU", GetServerCPUDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const GetServerCPUTypeDocument = `query GetServerCPUType ($id: ID!) {
	serverCPUType(id: $id) {
		id
		vendor
		model
		coreCount
		clockSpeed
		createdAt
		updatedAt
	}
}
`

func (c *Client) GetServerCPUType(ctx context.Context, id gidx.PrefixedID, httpRequestOptions ...client.HTTPRequestOption) (*GetServerCPUType, error) {
	vars := map[string]interface{}{
		"id": id,
	}

	var res GetServerCPUType
	if err := c.Client.Post(ctx, "GetServerCPUType", GetServerCPUTypeDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const GetServerChassisDocument = `query GetServerChassis ($id: ID!) {
	serverChassis(id: $id) {
		id
		serial
		server {
			id
		}
		serverChassisType {
			id
		}
		createdAt
		updatedAt
	}
}
`

func (c *Client) GetServerChassis(ctx context.Context, id gidx.PrefixedID, httpRequestOptions ...client.HTTPRequestOption) (*GetServerChassis, error) {
	vars := map[string]interface{}{
		"id": id,
	}

	var res GetServerChassis
	if err := c.Client.Post(ctx, "GetServerChassis", GetServerChassisDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const GetServerChassisTypeDocument = `query GetServerChassisType ($id: ID!) {
	serverChassisType(id: $id) {
		id
		model
		vendor
		height
		createdAt
		updatedAt
		isFullDepth
	}
}
`

func (c *Client) GetServerChassisType(ctx context.Context, id gidx.PrefixedID, httpRequestOptions ...client.HTTPRequestOption) (*GetServerChassisType, error) {
	vars := map[string]interface{}{
		"id": id,
	}

	var res GetServerChassisType
	if err := c.Client.Post(ctx, "GetServerChassisType", GetServerChassisTypeDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const GetServerComponentDocument = `query GetServerComponent ($id: ID!) {
	serverComponent(id: $id) {
		id
		name
		model
		vendor
		serial
		server {
			id
		}
		serverComponentType {
			id
		}
		createdAt
		updatedAt
	}
}
`

func (c *Client) GetServerComponent(ctx context.Context, id gidx.PrefixedID, httpRequestOptions ...client.HTTPRequestOption) (*GetServerComponent, error) {
	vars := map[string]interface{}{
		"id": id,
	}

	var res GetServerComponent
	if err := c.Client.Post(ctx, "GetServerComponent", GetServerComponentDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const GetServerComponentTypeDocument = `query GetServerComponentType ($id: ID!) {
	serverComponentType(id: $id) {
		id
		name
		createdAt
		updatedAt
	}
}
`

func (c *Client) GetServerComponentType(ctx context.Context, id gidx.PrefixedID, httpRequestOptions ...client.HTTPRequestOption) (*GetServerComponentType, error) {
	vars := map[string]interface{}{
		"id": id,
	}

	var res GetServerComponentType
	if err := c.Client.Post(ctx, "GetServerComponentType", GetServerComponentTypeDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const GetServerMemoryDocument = `query GetServerMemory ($id: ID!) {
	serverMemory(id: $id) {
		id
		serial
		createdAt
		updatedAt
		server {
			id
		}
		serverMemoryType {
			id
		}
	}
}
`

func (c *Client) GetServerMemory(ctx context.Context, id gidx.PrefixedID, httpRequestOptions ...client.HTTPRequestOption) (*GetServerMemory, error) {
	vars := map[string]interface{}{
		"id": id,
	}

	var res GetServerMemory
	if err := c.Client.Post(ctx, "GetServerMemory", GetServerMemoryDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const GetServerMemoryTypeDocument = `query GetServerMemoryType ($id: ID!) {
	serverMemoryType(id: $id) {
		id
		size
		createdAt
		updatedAt
		model
		speed
		vendor
	}
}
`

func (c *Client) GetServerMemoryType(ctx context.Context, id gidx.PrefixedID, httpRequestOptions ...client.HTTPRequestOption) (*GetServerMemoryType, error) {
	vars := map[string]interface{}{
		"id": id,
	}

	var res GetServerMemoryType
	if err := c.Client.Post(ctx, "GetServerMemoryType", GetServerMemoryTypeDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const GetServerMotherboardDocument = `query GetServerMotherboard ($id: ID!) {
	serverMotherboard(id: $id) {
		id
		serial
		createdAt
		server {
			id
		}
		updatedAt
		serverMotherboardType {
			id
		}
	}
}
`

func (c *Client) GetServerMotherboard(ctx context.Context, id gidx.PrefixedID, httpRequestOptions ...client.HTTPRequestOption) (*GetServerMotherboard, error) {
	vars := map[string]interface{}{
		"id": id,
	}

	var res GetServerMotherboard
	if err := c.Client.Post(ctx, "GetServerMotherboard", GetServerMotherboardDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const GetServerMotherboardTypeDocument = `query GetServerMotherboardType ($id: ID!) {
	serverMotherboardType(id: $id) {
		id
		model
		vendor
		createdAt
		updatedAt
	}
}
`

func (c *Client) GetServerMotherboardType(ctx context.Context, id gidx.PrefixedID, httpRequestOptions ...client.HTTPRequestOption) (*GetServerMotherboardType, error) {
	vars := map[string]interface{}{
		"id": id,
	}

	var res GetServerMotherboardType
	if err := c.Client.Post(ctx, "GetServerMotherboardType", GetServerMotherboardTypeDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const GetServerTypeDocument = `query GetServerType ($id: ID!) {
	serverType(id: $id) {
		id
		name
		owner {
			id
		}
		createdAt
		updatedAt
	}
}
`

func (c *Client) GetServerType(ctx context.Context, id gidx.PrefixedID, httpRequestOptions ...client.HTTPRequestOption) (*GetServerType, error) {
	vars := map[string]interface{}{
		"id": id,
	}

	var res GetServerType
	if err := c.Client.Post(ctx, "GetServerType", GetServerTypeDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const ServerCPUCreateDocument = `mutation ServerCPUCreate ($input: CreateServerCPUInput!) {
	serverCPUCreate(input: $input) {
		serverCPU {
			id
			serial
			server {
				id
			}
			createdAt
			updatedAt
			serverCPUType {
				id
			}
		}
	}
}
`

func (c *Client) ServerCPUCreate(ctx context.Context, input CreateServerCPUInput, httpRequestOptions ...client.HTTPRequestOption) (*ServerCPUCreate, error) {
	vars := map[string]interface{}{
		"input": input,
	}

	var res ServerCPUCreate
	if err := c.Client.Post(ctx, "ServerCPUCreate", ServerCPUCreateDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const ServerCPUDeleteDocument = `mutation ServerCPUDelete ($id: ID!) {
	serverCPUDelete(id: $id) {
		deletedID
	}
}
`

func (c *Client) ServerCPUDelete(ctx context.Context, id gidx.PrefixedID, httpRequestOptions ...client.HTTPRequestOption) (*ServerCPUDelete, error) {
	vars := map[string]interface{}{
		"id": id,
	}

	var res ServerCPUDelete
	if err := c.Client.Post(ctx, "ServerCPUDelete", ServerCPUDeleteDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const ServerCPUTypeCreateDocument = `mutation ServerCPUTypeCreate ($input: CreateServerCPUTypeInput!) {
	serverCPUTypeCreate(input: $input) {
		serverCPUType {
			id
			vendor
			model
			coreCount
			clockSpeed
			createdAt
			updatedAt
		}
	}
}
`

func (c *Client) ServerCPUTypeCreate(ctx context.Context, input CreateServerCPUTypeInput, httpRequestOptions ...client.HTTPRequestOption) (*ServerCPUTypeCreate, error) {
	vars := map[string]interface{}{
		"input": input,
	}

	var res ServerCPUTypeCreate
	if err := c.Client.Post(ctx, "ServerCPUTypeCreate", ServerCPUTypeCreateDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const ServerCPUTypeDeleteDocument = `mutation ServerCPUTypeDelete ($id: ID!) {
	serverCPUTypeDelete(id: $id) {
		deletedID
	}
}
`

func (c *Client) ServerCPUTypeDelete(ctx context.Context, id gidx.PrefixedID, httpRequestOptions ...client.HTTPRequestOption) (*ServerCPUTypeDelete, error) {
	vars := map[string]interface{}{
		"id": id,
	}

	var res ServerCPUTypeDelete
	if err := c.Client.Post(ctx, "ServerCPUTypeDelete", ServerCPUTypeDeleteDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const ServerCPUTypeUpdateDocument = `mutation ServerCPUTypeUpdate ($id: ID!, $input: UpdateServerCPUTypeInput!) {
	serverCPUTypeUpdate(id: $id, input: $input) {
		serverCPUType {
			id
			vendor
			model
			coreCount
			clockSpeed
			createdAt
			updatedAt
		}
	}
}
`

func (c *Client) ServerCPUTypeUpdate(ctx context.Context, id gidx.PrefixedID, input UpdateServerCPUTypeInput, httpRequestOptions ...client.HTTPRequestOption) (*ServerCPUTypeUpdate, error) {
	vars := map[string]interface{}{
		"id":    id,
		"input": input,
	}

	var res ServerCPUTypeUpdate
	if err := c.Client.Post(ctx, "ServerCPUTypeUpdate", ServerCPUTypeUpdateDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const ServerCPUUpdateDocument = `mutation ServerCPUUpdate ($id: ID!, $input: UpdateServerCPUInput!) {
	serverCPUUpdate(id: $id, input: $input) {
		serverCPU {
			id
			serial
			server {
				id
			}
			createdAt
			updatedAt
			serverCPUType {
				id
			}
		}
	}
}
`

func (c *Client) ServerCPUUpdate(ctx context.Context, id gidx.PrefixedID, input UpdateServerCPUInput, httpRequestOptions ...client.HTTPRequestOption) (*ServerCPUUpdate, error) {
	vars := map[string]interface{}{
		"id":    id,
		"input": input,
	}

	var res ServerCPUUpdate
	if err := c.Client.Post(ctx, "ServerCPUUpdate", ServerCPUUpdateDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const ServerChassisCreateDocument = `mutation ServerChassisCreate ($input: CreateServerChassisInput!) {
	serverChassisCreate(input: $input) {
		serverChassis {
			id
			serial
			server {
				id
			}
			serverChassisType {
				id
			}
			createdAt
			updatedAt
		}
	}
}
`

func (c *Client) ServerChassisCreate(ctx context.Context, input CreateServerChassisInput, httpRequestOptions ...client.HTTPRequestOption) (*ServerChassisCreate, error) {
	vars := map[string]interface{}{
		"input": input,
	}

	var res ServerChassisCreate
	if err := c.Client.Post(ctx, "ServerChassisCreate", ServerChassisCreateDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const ServerChassisDeleteDocument = `mutation ServerChassisDelete ($id: ID!) {
	serverChassisDelete(id: $id) {
		deletedID
	}
}
`

func (c *Client) ServerChassisDelete(ctx context.Context, id gidx.PrefixedID, httpRequestOptions ...client.HTTPRequestOption) (*ServerChassisDelete, error) {
	vars := map[string]interface{}{
		"id": id,
	}

	var res ServerChassisDelete
	if err := c.Client.Post(ctx, "ServerChassisDelete", ServerChassisDeleteDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const ServerChassisTypeCreateDocument = `mutation ServerChassisTypeCreate ($input: CreateServerChassisTypeInput!) {
	serverChassisTypeCreate(input: $input) {
		serverChassisType {
			id
			model
			vendor
			height
			createdAt
			updatedAt
			isFullDepth
		}
	}
}
`

func (c *Client) ServerChassisTypeCreate(ctx context.Context, input CreateServerChassisTypeInput, httpRequestOptions ...client.HTTPRequestOption) (*ServerChassisTypeCreate, error) {
	vars := map[string]interface{}{
		"input": input,
	}

	var res ServerChassisTypeCreate
	if err := c.Client.Post(ctx, "ServerChassisTypeCreate", ServerChassisTypeCreateDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const ServerChassisTypeDeleteDocument = `mutation ServerChassisTypeDelete ($id: ID!) {
	serverChassisTypeDelete(id: $id) {
		deletedID
	}
}
`

func (c *Client) ServerChassisTypeDelete(ctx context.Context, id gidx.PrefixedID, httpRequestOptions ...client.HTTPRequestOption) (*ServerChassisTypeDelete, error) {
	vars := map[string]interface{}{
		"id": id,
	}

	var res ServerChassisTypeDelete
	if err := c.Client.Post(ctx, "ServerChassisTypeDelete", ServerChassisTypeDeleteDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const ServerChassisTypeUpdateDocument = `mutation ServerChassisTypeUpdate ($id: ID!, $input: UpdateServerChassisTypeInput!) {
	serverChassisTypeUpdate(id: $id, input: $input) {
		serverChassisType {
			id
			model
			vendor
			height
			createdAt
			updatedAt
			isFullDepth
		}
	}
}
`

func (c *Client) ServerChassisTypeUpdate(ctx context.Context, id gidx.PrefixedID, input UpdateServerChassisTypeInput, httpRequestOptions ...client.HTTPRequestOption) (*ServerChassisTypeUpdate, error) {
	vars := map[string]interface{}{
		"id":    id,
		"input": input,
	}

	var res ServerChassisTypeUpdate
	if err := c.Client.Post(ctx, "ServerChassisTypeUpdate", ServerChassisTypeUpdateDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const ServerChassisUpdateDocument = `mutation ServerChassisUpdate ($id: ID!, $input: UpdateServerChassisInput!) {
	serverChassisUpdate(id: $id, input: $input) {
		serverChassis {
			id
			serial
			server {
				id
			}
			serverChassisType {
				id
			}
			createdAt
			updatedAt
		}
	}
}
`

func (c *Client) ServerChassisUpdate(ctx context.Context, id gidx.PrefixedID, input UpdateServerChassisInput, httpRequestOptions ...client.HTTPRequestOption) (*ServerChassisUpdate, error) {
	vars := map[string]interface{}{
		"id":    id,
		"input": input,
	}

	var res ServerChassisUpdate
	if err := c.Client.Post(ctx, "ServerChassisUpdate", ServerChassisUpdateDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const ServerComponentCreateDocument = `mutation ServerComponentCreate ($input: CreateServerComponentInput!) {
	serverComponentCreate(input: $input) {
		serverComponent {
			id
			name
			model
			vendor
			serial
			server {
				id
			}
			serverComponentType {
				id
			}
			createdAt
			updatedAt
		}
	}
}
`

func (c *Client) ServerComponentCreate(ctx context.Context, input CreateServerComponentInput, httpRequestOptions ...client.HTTPRequestOption) (*ServerComponentCreate, error) {
	vars := map[string]interface{}{
		"input": input,
	}

	var res ServerComponentCreate
	if err := c.Client.Post(ctx, "ServerComponentCreate", ServerComponentCreateDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const ServerComponentDeleteDocument = `mutation ServerComponentDelete ($id: ID!) {
	serverComponentDelete(id: $id) {
		deletedID
	}
}
`

func (c *Client) ServerComponentDelete(ctx context.Context, id gidx.PrefixedID, httpRequestOptions ...client.HTTPRequestOption) (*ServerComponentDelete, error) {
	vars := map[string]interface{}{
		"id": id,
	}

	var res ServerComponentDelete
	if err := c.Client.Post(ctx, "ServerComponentDelete", ServerComponentDeleteDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const ServerComponentTypeCreateDocument = `mutation ServerComponentTypeCreate ($input: CreateServerComponentTypeInput!) {
	serverComponentTypeCreate(input: $input) {
		serverComponentType {
			id
			name
			createdAt
			updatedAt
		}
	}
}
`

func (c *Client) ServerComponentTypeCreate(ctx context.Context, input CreateServerComponentTypeInput, httpRequestOptions ...client.HTTPRequestOption) (*ServerComponentTypeCreate, error) {
	vars := map[string]interface{}{
		"input": input,
	}

	var res ServerComponentTypeCreate
	if err := c.Client.Post(ctx, "ServerComponentTypeCreate", ServerComponentTypeCreateDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const ServerComponentTypeDeleteDocument = `mutation ServerComponentTypeDelete ($id: ID!) {
	serverComponentTypeDelete(id: $id) {
		deletedID
	}
}
`

func (c *Client) ServerComponentTypeDelete(ctx context.Context, id gidx.PrefixedID, httpRequestOptions ...client.HTTPRequestOption) (*ServerComponentTypeDelete, error) {
	vars := map[string]interface{}{
		"id": id,
	}

	var res ServerComponentTypeDelete
	if err := c.Client.Post(ctx, "ServerComponentTypeDelete", ServerComponentTypeDeleteDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const ServerComponentTypeUpdateDocument = `mutation ServerComponentTypeUpdate ($id: ID!, $input: UpdateServerComponentTypeInput!) {
	serverComponentTypeUpdate(id: $id, input: $input) {
		serverComponentType {
			id
			name
			createdAt
			updatedAt
		}
	}
}
`

func (c *Client) ServerComponentTypeUpdate(ctx context.Context, id gidx.PrefixedID, input UpdateServerComponentTypeInput, httpRequestOptions ...client.HTTPRequestOption) (*ServerComponentTypeUpdate, error) {
	vars := map[string]interface{}{
		"id":    id,
		"input": input,
	}

	var res ServerComponentTypeUpdate
	if err := c.Client.Post(ctx, "ServerComponentTypeUpdate", ServerComponentTypeUpdateDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const ServerComponentUpdateDocument = `mutation ServerComponentUpdate ($id: ID!, $input: UpdateServerComponentInput!) {
	serverComponentUpdate(id: $id, input: $input) {
		serverComponent {
			id
			name
			model
			vendor
			serial
			server {
				id
			}
			serverComponentType {
				id
			}
			createdAt
			updatedAt
		}
	}
}
`

func (c *Client) ServerComponentUpdate(ctx context.Context, id gidx.PrefixedID, input UpdateServerComponentInput, httpRequestOptions ...client.HTTPRequestOption) (*ServerComponentUpdate, error) {
	vars := map[string]interface{}{
		"id":    id,
		"input": input,
	}

	var res ServerComponentUpdate
	if err := c.Client.Post(ctx, "ServerComponentUpdate", ServerComponentUpdateDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const ServerCreateDocument = `mutation ServerCreate ($input: CreateServerInput!) {
	serverCreate(input: $input) {
		server {
			id
			name
			serverProvider {
				id
			}
			owner {
				id
			}
			location {
				id
			}
			createdAt
			updatedAt
		}
	}
}
`

func (c *Client) ServerCreate(ctx context.Context, input CreateServerInput, httpRequestOptions ...client.HTTPRequestOption) (*ServerCreate, error) {
	vars := map[string]interface{}{
		"input": input,
	}

	var res ServerCreate
	if err := c.Client.Post(ctx, "ServerCreate", ServerCreateDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const ServerDeleteDocument = `mutation ServerDelete ($id: ID!) {
	serverDelete(id: $id) {
		deletedID
	}
}
`

func (c *Client) ServerDelete(ctx context.Context, id gidx.PrefixedID, httpRequestOptions ...client.HTTPRequestOption) (*ServerDelete, error) {
	vars := map[string]interface{}{
		"id": id,
	}

	var res ServerDelete
	if err := c.Client.Post(ctx, "ServerDelete", ServerDeleteDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const ServerHardDriveCreateDocument = `mutation ServerHardDriveCreate ($input: CreateServerHardDriveInput!) {
	serverHardDriveCreate(input: $input) {
		serverHardDrive {
			id
			serial
			server {
				id
			}
			createdAt
			updatedAt
			serverHardDriveType {
				id
			}
		}
	}
}
`

func (c *Client) ServerHardDriveCreate(ctx context.Context, input CreateServerHardDriveInput, httpRequestOptions ...client.HTTPRequestOption) (*ServerHardDriveCreate, error) {
	vars := map[string]interface{}{
		"input": input,
	}

	var res ServerHardDriveCreate
	if err := c.Client.Post(ctx, "ServerHardDriveCreate", ServerHardDriveCreateDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const ServerHardDriveDeleteDocument = `mutation ServerHardDriveDelete ($id: ID!) {
	serverHardDriveDelete(id: $id) {
		deletedID
	}
}
`

func (c *Client) ServerHardDriveDelete(ctx context.Context, id gidx.PrefixedID, httpRequestOptions ...client.HTTPRequestOption) (*ServerHardDriveDelete, error) {
	vars := map[string]interface{}{
		"id": id,
	}

	var res ServerHardDriveDelete
	if err := c.Client.Post(ctx, "ServerHardDriveDelete", ServerHardDriveDeleteDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const ServerHardDriveTypeCreateDocument = `mutation ServerHardDriveTypeCreate ($input: CreateServerHardDriveTypeInput!) {
	serverHardDriveTypeCreate(input: $input) {
		serverHardDriveType {
			id
			type
			model
			speed
			vendor
			capacity
			createdAt
			updatedAt
			hardDrive {
				totalCount
			}
		}
	}
}
`

func (c *Client) ServerHardDriveTypeCreate(ctx context.Context, input CreateServerHardDriveTypeInput, httpRequestOptions ...client.HTTPRequestOption) (*ServerHardDriveTypeCreate, error) {
	vars := map[string]interface{}{
		"input": input,
	}

	var res ServerHardDriveTypeCreate
	if err := c.Client.Post(ctx, "ServerHardDriveTypeCreate", ServerHardDriveTypeCreateDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const ServerHardDriveTypeDeleteDocument = `mutation ServerHardDriveTypeDelete ($id: ID!) {
	serverHardDriveTypeDelete(id: $id) {
		deletedID
	}
}
`

func (c *Client) ServerHardDriveTypeDelete(ctx context.Context, id gidx.PrefixedID, httpRequestOptions ...client.HTTPRequestOption) (*ServerHardDriveTypeDelete, error) {
	vars := map[string]interface{}{
		"id": id,
	}

	var res ServerHardDriveTypeDelete
	if err := c.Client.Post(ctx, "ServerHardDriveTypeDelete", ServerHardDriveTypeDeleteDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const ServerHardDriveTypeUpdateDocument = `mutation ServerHardDriveTypeUpdate ($id: ID!, $input: UpdateServerHardDriveTypeInput!) {
	serverHardDriveTypeUpdate(id: $id, input: $input) {
		serverHardDriveType {
			id
			type
			model
			speed
			vendor
			capacity
			createdAt
			updatedAt
			hardDrive {
				totalCount
			}
		}
	}
}
`

func (c *Client) ServerHardDriveTypeUpdate(ctx context.Context, id gidx.PrefixedID, input UpdateServerHardDriveTypeInput, httpRequestOptions ...client.HTTPRequestOption) (*ServerHardDriveTypeUpdate, error) {
	vars := map[string]interface{}{
		"id":    id,
		"input": input,
	}

	var res ServerHardDriveTypeUpdate
	if err := c.Client.Post(ctx, "ServerHardDriveTypeUpdate", ServerHardDriveTypeUpdateDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const ServerHardDriveUpdateDocument = `mutation ServerHardDriveUpdate ($id: ID!, $input: UpdateServerHardDriveInput!) {
	serverHardDriveUpdate(id: $id, input: $input) {
		serverHardDrive {
			id
			serial
			server {
				id
			}
			createdAt
			updatedAt
			serverHardDriveType {
				id
			}
		}
	}
}
`

func (c *Client) ServerHardDriveUpdate(ctx context.Context, id gidx.PrefixedID, input UpdateServerHardDriveInput, httpRequestOptions ...client.HTTPRequestOption) (*ServerHardDriveUpdate, error) {
	vars := map[string]interface{}{
		"id":    id,
		"input": input,
	}

	var res ServerHardDriveUpdate
	if err := c.Client.Post(ctx, "ServerHardDriveUpdate", ServerHardDriveUpdateDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const ServerMemoryCreateDocument = `mutation ServerMemoryCreate ($input: CreateServerMemoryInput!) {
	serverMemoryCreate(input: $input) {
		serverMemory {
			id
			serial
			createdAt
			updatedAt
			server {
				id
			}
			serverMemoryType {
				id
			}
		}
	}
}
`

func (c *Client) ServerMemoryCreate(ctx context.Context, input CreateServerMemoryInput, httpRequestOptions ...client.HTTPRequestOption) (*ServerMemoryCreate, error) {
	vars := map[string]interface{}{
		"input": input,
	}

	var res ServerMemoryCreate
	if err := c.Client.Post(ctx, "ServerMemoryCreate", ServerMemoryCreateDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const ServerMemoryDeleteDocument = `mutation ServerMemoryDelete ($id: ID!) {
	serverMemoryDelete(id: $id) {
		deletedID
	}
}
`

func (c *Client) ServerMemoryDelete(ctx context.Context, id gidx.PrefixedID, httpRequestOptions ...client.HTTPRequestOption) (*ServerMemoryDelete, error) {
	vars := map[string]interface{}{
		"id": id,
	}

	var res ServerMemoryDelete
	if err := c.Client.Post(ctx, "ServerMemoryDelete", ServerMemoryDeleteDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const ServerMemoryTypeCreateDocument = `mutation ServerMemoryTypeCreate ($input: CreateServerMemoryTypeInput!) {
	serverMemoryTypeCreate(input: $input) {
		serverMemoryType {
			id
			size
			createdAt
			updatedAt
			model
			speed
			vendor
		}
	}
}
`

func (c *Client) ServerMemoryTypeCreate(ctx context.Context, input CreateServerMemoryTypeInput, httpRequestOptions ...client.HTTPRequestOption) (*ServerMemoryTypeCreate, error) {
	vars := map[string]interface{}{
		"input": input,
	}

	var res ServerMemoryTypeCreate
	if err := c.Client.Post(ctx, "ServerMemoryTypeCreate", ServerMemoryTypeCreateDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const ServerMemoryTypeDeleteDocument = `mutation ServerMemoryTypeDelete ($id: ID!) {
	serverMemoryTypeDelete(id: $id) {
		deletedID
	}
}
`

func (c *Client) ServerMemoryTypeDelete(ctx context.Context, id gidx.PrefixedID, httpRequestOptions ...client.HTTPRequestOption) (*ServerMemoryTypeDelete, error) {
	vars := map[string]interface{}{
		"id": id,
	}

	var res ServerMemoryTypeDelete
	if err := c.Client.Post(ctx, "ServerMemoryTypeDelete", ServerMemoryTypeDeleteDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const ServerMemoryTypeUpdateDocument = `mutation ServerMemoryTypeUpdate ($id: ID!, $input: UpdateServerMemoryTypeInput!) {
	serverMemoryTypeUpdate(id: $id, input: $input) {
		serverMemoryType {
			id
			size
			createdAt
			updatedAt
			model
			speed
			vendor
		}
	}
}
`

func (c *Client) ServerMemoryTypeUpdate(ctx context.Context, id gidx.PrefixedID, input UpdateServerMemoryTypeInput, httpRequestOptions ...client.HTTPRequestOption) (*ServerMemoryTypeUpdate, error) {
	vars := map[string]interface{}{
		"id":    id,
		"input": input,
	}

	var res ServerMemoryTypeUpdate
	if err := c.Client.Post(ctx, "ServerMemoryTypeUpdate", ServerMemoryTypeUpdateDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const ServerMemoryUpdateDocument = `mutation ServerMemoryUpdate ($id: ID!, $input: UpdateServerMemoryInput!) {
	serverMemoryUpdate(id: $id, input: $input) {
		serverMemory {
			id
			serial
			createdAt
			updatedAt
			server {
				id
			}
			serverMemoryType {
				id
			}
		}
	}
}
`

func (c *Client) ServerMemoryUpdate(ctx context.Context, id gidx.PrefixedID, input UpdateServerMemoryInput, httpRequestOptions ...client.HTTPRequestOption) (*ServerMemoryUpdate, error) {
	vars := map[string]interface{}{
		"id":    id,
		"input": input,
	}

	var res ServerMemoryUpdate
	if err := c.Client.Post(ctx, "ServerMemoryUpdate", ServerMemoryUpdateDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const ServerMotherboardCreateDocument = `mutation ServerMotherboardCreate ($input: CreateServerMotherboardInput!) {
	serverMotherboardCreate(input: $input) {
		serverMotherboard {
			id
			serial
			createdAt
			server {
				id
			}
			updatedAt
			serverMotherboardType {
				id
			}
		}
	}
}
`

func (c *Client) ServerMotherboardCreate(ctx context.Context, input CreateServerMotherboardInput, httpRequestOptions ...client.HTTPRequestOption) (*ServerMotherboardCreate, error) {
	vars := map[string]interface{}{
		"input": input,
	}

	var res ServerMotherboardCreate
	if err := c.Client.Post(ctx, "ServerMotherboardCreate", ServerMotherboardCreateDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const ServerMotherboardDeleteDocument = `mutation ServerMotherboardDelete ($id: ID!) {
	serverMotherboardDelete(id: $id) {
		deletedID
	}
}
`

func (c *Client) ServerMotherboardDelete(ctx context.Context, id gidx.PrefixedID, httpRequestOptions ...client.HTTPRequestOption) (*ServerMotherboardDelete, error) {
	vars := map[string]interface{}{
		"id": id,
	}

	var res ServerMotherboardDelete
	if err := c.Client.Post(ctx, "ServerMotherboardDelete", ServerMotherboardDeleteDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const ServerMotherboardTypeCreateDocument = `mutation ServerMotherboardTypeCreate ($input: CreateServerMotherboardTypeInput!) {
	serverMotherboardTypeCreate(input: $input) {
		serverMotherboardType {
			id
			model
			vendor
			createdAt
			updatedAt
		}
	}
}
`

func (c *Client) ServerMotherboardTypeCreate(ctx context.Context, input CreateServerMotherboardTypeInput, httpRequestOptions ...client.HTTPRequestOption) (*ServerMotherboardTypeCreate, error) {
	vars := map[string]interface{}{
		"input": input,
	}

	var res ServerMotherboardTypeCreate
	if err := c.Client.Post(ctx, "ServerMotherboardTypeCreate", ServerMotherboardTypeCreateDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const ServerMotherboardTypeDeleteDocument = `mutation ServerMotherboardTypeDelete ($id: ID!) {
	serverMotherboardTypeDelete(id: $id) {
		deletedID
	}
}
`

func (c *Client) ServerMotherboardTypeDelete(ctx context.Context, id gidx.PrefixedID, httpRequestOptions ...client.HTTPRequestOption) (*ServerMotherboardTypeDelete, error) {
	vars := map[string]interface{}{
		"id": id,
	}

	var res ServerMotherboardTypeDelete
	if err := c.Client.Post(ctx, "ServerMotherboardTypeDelete", ServerMotherboardTypeDeleteDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const ServerMotherboardTypeUpdateDocument = `mutation ServerMotherboardTypeUpdate ($id: ID!, $input: UpdateServerMotherboardTypeInput!) {
	serverMotherboardTypeUpdate(id: $id, input: $input) {
		serverMotherboardType {
			id
			model
			vendor
			createdAt
			updatedAt
		}
	}
}
`

func (c *Client) ServerMotherboardTypeUpdate(ctx context.Context, id gidx.PrefixedID, input UpdateServerMotherboardTypeInput, httpRequestOptions ...client.HTTPRequestOption) (*ServerMotherboardTypeUpdate, error) {
	vars := map[string]interface{}{
		"id":    id,
		"input": input,
	}

	var res ServerMotherboardTypeUpdate
	if err := c.Client.Post(ctx, "ServerMotherboardTypeUpdate", ServerMotherboardTypeUpdateDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const ServerMotherboardUpdateDocument = `mutation ServerMotherboardUpdate ($id: ID!, $input: UpdateServerMotherboardInput!) {
	serverMotherboardUpdate(id: $id, input: $input) {
		serverMotherboard {
			id
			serial
			createdAt
			server {
				id
			}
			updatedAt
			serverMotherboardType {
				id
			}
		}
	}
}
`

func (c *Client) ServerMotherboardUpdate(ctx context.Context, id gidx.PrefixedID, input UpdateServerMotherboardInput, httpRequestOptions ...client.HTTPRequestOption) (*ServerMotherboardUpdate, error) {
	vars := map[string]interface{}{
		"id":    id,
		"input": input,
	}

	var res ServerMotherboardUpdate
	if err := c.Client.Post(ctx, "ServerMotherboardUpdate", ServerMotherboardUpdateDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const ServerTypeCreateDocument = `mutation ServerTypeCreate ($input: CreateServerTypeInput!) {
	serverTypeCreate(input: $input) {
		serverType {
			id
			name
			owner {
				id
			}
			createdAt
			updatedAt
		}
	}
}
`

func (c *Client) ServerTypeCreate(ctx context.Context, input CreateServerTypeInput, httpRequestOptions ...client.HTTPRequestOption) (*ServerTypeCreate, error) {
	vars := map[string]interface{}{
		"input": input,
	}

	var res ServerTypeCreate
	if err := c.Client.Post(ctx, "ServerTypeCreate", ServerTypeCreateDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const ServerTypeDeleteDocument = `mutation ServerTypeDelete ($id: ID!) {
	serverTypeDelete(id: $id) {
		deletedID
	}
}
`

func (c *Client) ServerTypeDelete(ctx context.Context, id gidx.PrefixedID, httpRequestOptions ...client.HTTPRequestOption) (*ServerTypeDelete, error) {
	vars := map[string]interface{}{
		"id": id,
	}

	var res ServerTypeDelete
	if err := c.Client.Post(ctx, "ServerTypeDelete", ServerTypeDeleteDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const ServerTypeUpdateDocument = `mutation ServerTypeUpdate ($id: ID!, $input: UpdateServerTypeInput!) {
	serverTypeUpdate(id: $id, input: $input) {
		serverType {
			id
			name
			owner {
				id
			}
			createdAt
			updatedAt
		}
	}
}
`

func (c *Client) ServerTypeUpdate(ctx context.Context, id gidx.PrefixedID, input UpdateServerTypeInput, httpRequestOptions ...client.HTTPRequestOption) (*ServerTypeUpdate, error) {
	vars := map[string]interface{}{
		"id":    id,
		"input": input,
	}

	var res ServerTypeUpdate
	if err := c.Client.Post(ctx, "ServerTypeUpdate", ServerTypeUpdateDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const ServerUpdateDocument = `mutation ServerUpdate ($id: ID!, $input: UpdateServerInput!) {
	serverUpdate(id: $id, input: $input) {
		server {
			id
			name
			createdAt
			updatedAt
		}
	}
}
`

func (c *Client) ServerUpdate(ctx context.Context, id gidx.PrefixedID, input UpdateServerInput, httpRequestOptions ...client.HTTPRequestOption) (*ServerUpdate, error) {
	vars := map[string]interface{}{
		"id":    id,
		"input": input,
	}

	var res ServerUpdate
	if err := c.Client.Post(ctx, "ServerUpdate", ServerUpdateDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}
