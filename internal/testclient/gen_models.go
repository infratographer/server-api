// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package testclient

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"go.infratographer.com/server-api/internal/ent/generated"
	"go.infratographer.com/x/gidx"
)

type IPAddressable interface {
	IsIPAddressable()
	GetID() gidx.PrefixedID
}

// An object with an ID.
// Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
type Node interface {
	IsNode()
	// The id of the object.
	GetID() gidx.PrefixedID
}

type Entity interface {
	IsEntity()
}

// Input information to create a server cpu.
type CreateServerCPUInput struct {
	// The serial number of the server cpu.
	Serial          string          `json:"serial"`
	ServerID        gidx.PrefixedID `json:"serverID"`
	ServerCPUTypeID gidx.PrefixedID `json:"serverCPUTypeID"`
}

// Input information to create a server cpu type.
type CreateServerCPUTypeInput struct {
	// The name of the vendor for the server cpu type.
	Vendor string `json:"vendor"`
	// The mode of the server cpu type.
	Model string `json:"model"`
	// The clock speed of the server cpu type.
	ClockSpeed string `json:"clockSpeed"`
	// The number of cores for the server cpu type.
	CoreCount int64             `json:"coreCount"`
	CPUIDs    []gidx.PrefixedID `json:"cpuIDs,omitempty"`
}

// Input information to create a server chassis.
type CreateServerChassisInput struct {
	// The ID for the parent of this chassis.
	ParentChassisID gidx.PrefixedID `json:"parentChassisID"`
	// The serial number of the server chassis.
	Serial              string          `json:"serial"`
	ServerID            gidx.PrefixedID `json:"serverID"`
	ServerChassisTypeID gidx.PrefixedID `json:"serverChassisTypeID"`
}

// Input information to create a server chassis type.
type CreateServerChassisTypeInput struct {
	// The name of the vendor for the server chassis type.
	Vendor string `json:"vendor"`
	// The mode of the server chassis type.
	Model string `json:"model"`
	// The height of the server chassis type.
	Height string `json:"height"`
	// Whether the server chassis type is full depth.
	IsFullDepth bool `json:"isFullDepth"`
	// The ID for the parent of this chassis type.
	ParentChassisTypeID gidx.PrefixedID   `json:"parentChassisTypeID"`
	ChassiIDs           []gidx.PrefixedID `json:"chassiIDs,omitempty"`
}

// Input information to create a server component.
type CreateServerComponentInput struct {
	// The name of the server component.
	Name string `json:"name"`
	// The name of the vendor of the server component.
	Vendor string `json:"vendor"`
	// The model of the server component.
	Model string `json:"model"`
	// The serial number of the server component.
	Serial          string          `json:"serial"`
	ComponentTypeID gidx.PrefixedID `json:"componentTypeID"`
	ServerID        gidx.PrefixedID `json:"serverID"`
}

// Input information to create a server component type.
type CreateServerComponentTypeInput struct {
	// The name of the server component type.
	Name string `json:"name"`
}

// Input information to create a server hard drive.
type CreateServerHardDriveInput struct {
	// The serial for the server hard drive.
	Serial          string          `json:"serial"`
	ServerID        gidx.PrefixedID `json:"serverID"`
	HardDriveTypeID gidx.PrefixedID `json:"hardDriveTypeID"`
}

// Input information to create a server hard drive type.
type CreateServerHardDriveTypeInput struct {
	// The name of the vendor for the server hard drive type.
	Vendor string `json:"vendor"`
	// The mode of the server chassis type.
	Model string `json:"model"`
	// The speed of the server hard drive type.
	Speed string `json:"speed"`
	// The type of the server hard drive type.
	Type string `json:"type"`
	// The capacity of the server hard drive type.
	Capacity     string            `json:"capacity"`
	HardDriveIDs []gidx.PrefixedID `json:"hardDriveIDs,omitempty"`
}

// Create a new server.
type CreateServerInput struct {
	// The name of the server.
	Name string `json:"name"`
	// The description of the server.
	Description *string `json:"description,omitempty"`
	// The ID for the owner of this server.
	OwnerID gidx.PrefixedID `json:"ownerID"`
	// The ID for the location of this server.
	LocationID   gidx.PrefixedID   `json:"locationID"`
	ProviderID   gidx.PrefixedID   `json:"providerID"`
	ServerTypeID gidx.PrefixedID   `json:"serverTypeID"`
	ComponentIDs []gidx.PrefixedID `json:"componentIDs,omitempty"`
}

// Input information to create a server memory.
type CreateServerMemoryInput struct {
	// The serial of the server memory.
	Serial             string          `json:"serial"`
	ServerID           gidx.PrefixedID `json:"serverID"`
	ServerMemoryTypeID gidx.PrefixedID `json:"serverMemoryTypeID"`
}

// Input information to create a server memory type.
type CreateServerMemoryTypeInput struct {
	// The name of the vendor for the server chassis type.
	Vendor string `json:"vendor"`
	// The mode of the server chassis type.
	Model string `json:"model"`
	// The speed of the server memory type.
	Speed string `json:"speed"`
	// The size of the server memory type.
	Size      string            `json:"size"`
	MemoryIDs []gidx.PrefixedID `json:"memoryIDs,omitempty"`
}

// Input information to create a server motherboard.
type CreateServerMotherboardInput struct {
	// The serial of the server motherboard
	Serial                  string          `json:"serial"`
	ServerID                gidx.PrefixedID `json:"serverID"`
	ServerMotherboardTypeID gidx.PrefixedID `json:"serverMotherboardTypeID"`
}

// Input information to create a server motherboard type.
type CreateServerMotherboardTypeInput struct {
	// The name of the vendor for the server motherboard type.
	Vendor string `json:"vendor"`
	// The mode of the server chassis type.
	Model          string            `json:"model"`
	MotherboardIDs []gidx.PrefixedID `json:"motherboardIDs,omitempty"`
}

// Input information to create a server network card type.
type CreateServerNetworkCardInput struct {
	// The serial number for the server network card.
	Serial            string            `json:"serial"`
	NetworkCardTypeID gidx.PrefixedID   `json:"networkCardTypeID"`
	ServerID          gidx.PrefixedID   `json:"serverID"`
	NetworkPortIDs    []gidx.PrefixedID `json:"networkPortIDs,omitempty"`
}

// Input information to create a server network card type.
type CreateServerNetworkCardTypeInput struct {
	// The name of the vendor for the server network card type.
	Vendor string `json:"vendor"`
	// The model of the server network card type.
	Model string `json:"model"`
	// The number of ports on the server network card type.
	PortCount      int64             `json:"portCount"`
	NetworkCardIDs []gidx.PrefixedID `json:"networkCardIDs,omitempty"`
}

// Input information to create a server network card type.
type CreateServerNetworkPortInput struct {
	// The mac address for the server network port.
	MacAddress    string          `json:"macAddress"`
	NetworkCardID gidx.PrefixedID `json:"networkCardID"`
}

// Input information to create a server power supply.
type CreateServerPowerSupplyInput struct {
	// The serial of the server power supply.
	Serial                  string          `json:"serial"`
	ServerID                gidx.PrefixedID `json:"serverID"`
	ServerPowerSupplyTypeID gidx.PrefixedID `json:"serverPowerSupplyTypeID"`
}

// Input information to create a server power supply type.
type CreateServerPowerSupplyTypeInput struct {
	// The name of the vendor for the server power supply type.
	Vendor string `json:"vendor"`
	// The mode of the server power supply type.
	Model string `json:"model"`
	// The watts of the server power supply type.
	Watts string `json:"watts"`
}

// Input information to create a server provider.
type CreateServerProviderInput struct {
	// The name of the server provider.
	Name string `json:"name"`
	// The ID for the resource provider of this server.
	ResourceProviderID gidx.PrefixedID `json:"resourceProviderID"`
}

// Input information to create a server type.
type CreateServerTypeInput struct {
	// The name of the server type.
	Name string `json:"name"`
	// The ID for the owner of this server type.
	OwnerID gidx.PrefixedID `json:"ownerID"`
}

// Information about pagination in a connection.
// https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
type PageInfo struct {
	// When paginating forwards, are there more items?
	HasNextPage bool `json:"hasNextPage"`
	// When paginating backwards, are there more items?
	HasPreviousPage bool `json:"hasPreviousPage"`
	// When paginating backwards, the cursor to continue.
	StartCursor *string `json:"startCursor,omitempty"`
	// When paginating forwards, the cursor to continue.
	EndCursor *string `json:"endCursor,omitempty"`
}

type Server struct {
	// The ID of the server.
	ID        gidx.PrefixedID `json:"id"`
	CreatedAt time.Time       `json:"createdAt"`
	UpdatedAt time.Time       `json:"updatedAt"`
	// The name of the server.
	Name string `json:"name"`
	// The description of the server.
	Description *string `json:"description,omitempty"`
	// The server provider for the server.
	Provider   generated.Provider        `json:"serverProvider"`
	ServerType ServerType                `json:"serverType"`
	Components ServerComponentConnection `json:"components"`
}

func (Server) IsIPAddressable()            {}
func (this Server) GetID() gidx.PrefixedID { return this.ID }

func (Server) IsNode() {}

// The id of the object.

func (Server) IsEntity() {}

type ServerCPU struct {
	// The ID of the server cpu.
	ID        gidx.PrefixedID `json:"id"`
	CreatedAt time.Time       `json:"createdAt"`
	UpdatedAt time.Time       `json:"updatedAt"`
	// The serial number of the server cpu.
	Serial        string        `json:"serial"`
	Server        Server        `json:"server"`
	ServerCPUType ServerCPUType `json:"serverCPUType"`
}

func (ServerCPU) IsNode() {}

// The id of the object.
func (this ServerCPU) GetID() gidx.PrefixedID { return this.ID }

func (ServerCPU) IsEntity() {}

// A connection to a list of items.
type ServerCPUConnection struct {
	// A list of edges.
	Edges []*ServerCPUEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// Return response from serverCPUCreate
type ServerCPUCreatePayload struct {
	// The created server cpu.
	ServerCPU ServerCPU `json:"serverCPU"`
}

// Return response from serverCPUDelete
type ServerCPUDeletePayload struct {
	// The ID of the deleted server cpu.
	DeletedID gidx.PrefixedID `json:"deletedID"`
}

// An edge in a connection.
type ServerCPUEdge struct {
	// The item at the end of the edge.
	Node *ServerCPU `json:"node,omitempty"`
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
}

// Ordering options for ServerCPU connections
type ServerCPUOrder struct {
	// The ordering direction.
	Direction OrderDirection `json:"direction"`
	// The field by which to order ServerCPUs.
	Field ServerCPUOrderField `json:"field"`
}

type ServerCPUType struct {
	// The ID of the server cpu type.
	ID        gidx.PrefixedID `json:"id"`
	CreatedAt time.Time       `json:"createdAt"`
	UpdatedAt time.Time       `json:"updatedAt"`
	// The name of the vendor for the server cpu type.
	Vendor string `json:"vendor"`
	// The mode of the server cpu type.
	Model string `json:"model"`
	// The clock speed of the server cpu type.
	ClockSpeed string `json:"clockSpeed"`
	// The number of cores for the server cpu type.
	CoreCount int64               `json:"coreCount"`
	CPU       ServerCPUConnection `json:"cpu"`
}

func (ServerCPUType) IsNode() {}

// The id of the object.
func (this ServerCPUType) GetID() gidx.PrefixedID { return this.ID }

func (ServerCPUType) IsEntity() {}

// A connection to a list of items.
type ServerCPUTypeConnection struct {
	// A list of edges.
	Edges []*ServerCPUTypeEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// Return response from serverCPUTypeCreate
type ServerCPUTypeCreatePayload struct {
	// The created server cpu type.
	ServerCPUType ServerCPUType `json:"serverCPUType"`
}

// Return response from serverCPUTypeDelete
type ServerCPUTypeDeletePayload struct {
	// The ID of the deleted server cpu type.
	DeletedID gidx.PrefixedID `json:"deletedID"`
}

// An edge in a connection.
type ServerCPUTypeEdge struct {
	// The item at the end of the edge.
	Node *ServerCPUType `json:"node,omitempty"`
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
}

// Ordering options for ServerCPUType connections
type ServerCPUTypeOrder struct {
	// The ordering direction.
	Direction OrderDirection `json:"direction"`
	// The field by which to order ServerCPUTypes.
	Field ServerCPUTypeOrderField `json:"field"`
}

// Return response from serverCPUTypeUpdate
type ServerCPUTypeUpdatePayload struct {
	// The updated server cpu type.
	ServerCPUType ServerCPUType `json:"serverCPUType"`
}

// ServerCPUTypeWhereInput is used for filtering ServerCPUType objects.
// Input was generated by ent.
type ServerCPUTypeWhereInput struct {
	Not *ServerCPUTypeWhereInput   `json:"not,omitempty"`
	And []*ServerCPUTypeWhereInput `json:"and,omitempty"`
	Or  []*ServerCPUTypeWhereInput `json:"or,omitempty"`
	// id field predicates
	ID      *gidx.PrefixedID  `json:"id,omitempty"`
	IDNeq   *gidx.PrefixedID  `json:"idNEQ,omitempty"`
	IDIn    []gidx.PrefixedID `json:"idIn,omitempty"`
	IDNotIn []gidx.PrefixedID `json:"idNotIn,omitempty"`
	IDGt    *gidx.PrefixedID  `json:"idGT,omitempty"`
	IDGte   *gidx.PrefixedID  `json:"idGTE,omitempty"`
	IDLt    *gidx.PrefixedID  `json:"idLT,omitempty"`
	IDLte   *gidx.PrefixedID  `json:"idLTE,omitempty"`
	// created_at field predicates
	CreatedAt      *time.Time   `json:"createdAt,omitempty"`
	CreatedAtNeq   *time.Time   `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []*time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []*time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGt    *time.Time   `json:"createdAtGT,omitempty"`
	CreatedAtGte   *time.Time   `json:"createdAtGTE,omitempty"`
	CreatedAtLt    *time.Time   `json:"createdAtLT,omitempty"`
	CreatedAtLte   *time.Time   `json:"createdAtLTE,omitempty"`
	// updated_at field predicates
	UpdatedAt      *time.Time   `json:"updatedAt,omitempty"`
	UpdatedAtNeq   *time.Time   `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []*time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []*time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGt    *time.Time   `json:"updatedAtGT,omitempty"`
	UpdatedAtGte   *time.Time   `json:"updatedAtGTE,omitempty"`
	UpdatedAtLt    *time.Time   `json:"updatedAtLT,omitempty"`
	UpdatedAtLte   *time.Time   `json:"updatedAtLTE,omitempty"`
	// vendor field predicates
	Vendor             *string  `json:"vendor,omitempty"`
	VendorNeq          *string  `json:"vendorNEQ,omitempty"`
	VendorIn           []string `json:"vendorIn,omitempty"`
	VendorNotIn        []string `json:"vendorNotIn,omitempty"`
	VendorGt           *string  `json:"vendorGT,omitempty"`
	VendorGte          *string  `json:"vendorGTE,omitempty"`
	VendorLt           *string  `json:"vendorLT,omitempty"`
	VendorLte          *string  `json:"vendorLTE,omitempty"`
	VendorContains     *string  `json:"vendorContains,omitempty"`
	VendorHasPrefix    *string  `json:"vendorHasPrefix,omitempty"`
	VendorHasSuffix    *string  `json:"vendorHasSuffix,omitempty"`
	VendorEqualFold    *string  `json:"vendorEqualFold,omitempty"`
	VendorContainsFold *string  `json:"vendorContainsFold,omitempty"`
	// model field predicates
	Model             *string  `json:"model,omitempty"`
	ModelNeq          *string  `json:"modelNEQ,omitempty"`
	ModelIn           []string `json:"modelIn,omitempty"`
	ModelNotIn        []string `json:"modelNotIn,omitempty"`
	ModelGt           *string  `json:"modelGT,omitempty"`
	ModelGte          *string  `json:"modelGTE,omitempty"`
	ModelLt           *string  `json:"modelLT,omitempty"`
	ModelLte          *string  `json:"modelLTE,omitempty"`
	ModelContains     *string  `json:"modelContains,omitempty"`
	ModelHasPrefix    *string  `json:"modelHasPrefix,omitempty"`
	ModelHasSuffix    *string  `json:"modelHasSuffix,omitempty"`
	ModelEqualFold    *string  `json:"modelEqualFold,omitempty"`
	ModelContainsFold *string  `json:"modelContainsFold,omitempty"`
	// clock_speed field predicates
	ClockSpeed             *string  `json:"clockSpeed,omitempty"`
	ClockSpeedNeq          *string  `json:"clockSpeedNEQ,omitempty"`
	ClockSpeedIn           []string `json:"clockSpeedIn,omitempty"`
	ClockSpeedNotIn        []string `json:"clockSpeedNotIn,omitempty"`
	ClockSpeedGt           *string  `json:"clockSpeedGT,omitempty"`
	ClockSpeedGte          *string  `json:"clockSpeedGTE,omitempty"`
	ClockSpeedLt           *string  `json:"clockSpeedLT,omitempty"`
	ClockSpeedLte          *string  `json:"clockSpeedLTE,omitempty"`
	ClockSpeedContains     *string  `json:"clockSpeedContains,omitempty"`
	ClockSpeedHasPrefix    *string  `json:"clockSpeedHasPrefix,omitempty"`
	ClockSpeedHasSuffix    *string  `json:"clockSpeedHasSuffix,omitempty"`
	ClockSpeedEqualFold    *string  `json:"clockSpeedEqualFold,omitempty"`
	ClockSpeedContainsFold *string  `json:"clockSpeedContainsFold,omitempty"`
	// core_count field predicates
	CoreCount      *int64  `json:"coreCount,omitempty"`
	CoreCountNeq   *int64  `json:"coreCountNEQ,omitempty"`
	CoreCountIn    []int64 `json:"coreCountIn,omitempty"`
	CoreCountNotIn []int64 `json:"coreCountNotIn,omitempty"`
	CoreCountGt    *int64  `json:"coreCountGT,omitempty"`
	CoreCountGte   *int64  `json:"coreCountGTE,omitempty"`
	CoreCountLt    *int64  `json:"coreCountLT,omitempty"`
	CoreCountLte   *int64  `json:"coreCountLTE,omitempty"`
	// cpu edge predicates
	HasCPU     *bool                  `json:"hasCPU,omitempty"`
	HasCPUWith []*ServerCPUWhereInput `json:"hasCPUWith,omitempty"`
}

// Return response from serverCPUUpdate
type ServerCPUUpdatePayload struct {
	// The updated server cpu.
	ServerCPU ServerCPU `json:"serverCPU"`
}

// ServerCPUWhereInput is used for filtering ServerCPU objects.
// Input was generated by ent.
type ServerCPUWhereInput struct {
	Not *ServerCPUWhereInput   `json:"not,omitempty"`
	And []*ServerCPUWhereInput `json:"and,omitempty"`
	Or  []*ServerCPUWhereInput `json:"or,omitempty"`
	// id field predicates
	ID      *gidx.PrefixedID  `json:"id,omitempty"`
	IDNeq   *gidx.PrefixedID  `json:"idNEQ,omitempty"`
	IDIn    []gidx.PrefixedID `json:"idIn,omitempty"`
	IDNotIn []gidx.PrefixedID `json:"idNotIn,omitempty"`
	IDGt    *gidx.PrefixedID  `json:"idGT,omitempty"`
	IDGte   *gidx.PrefixedID  `json:"idGTE,omitempty"`
	IDLt    *gidx.PrefixedID  `json:"idLT,omitempty"`
	IDLte   *gidx.PrefixedID  `json:"idLTE,omitempty"`
	// created_at field predicates
	CreatedAt      *time.Time   `json:"createdAt,omitempty"`
	CreatedAtNeq   *time.Time   `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []*time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []*time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGt    *time.Time   `json:"createdAtGT,omitempty"`
	CreatedAtGte   *time.Time   `json:"createdAtGTE,omitempty"`
	CreatedAtLt    *time.Time   `json:"createdAtLT,omitempty"`
	CreatedAtLte   *time.Time   `json:"createdAtLTE,omitempty"`
	// updated_at field predicates
	UpdatedAt      *time.Time   `json:"updatedAt,omitempty"`
	UpdatedAtNeq   *time.Time   `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []*time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []*time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGt    *time.Time   `json:"updatedAtGT,omitempty"`
	UpdatedAtGte   *time.Time   `json:"updatedAtGTE,omitempty"`
	UpdatedAtLt    *time.Time   `json:"updatedAtLT,omitempty"`
	UpdatedAtLte   *time.Time   `json:"updatedAtLTE,omitempty"`
	// serial field predicates
	Serial             *string  `json:"serial,omitempty"`
	SerialNeq          *string  `json:"serialNEQ,omitempty"`
	SerialIn           []string `json:"serialIn,omitempty"`
	SerialNotIn        []string `json:"serialNotIn,omitempty"`
	SerialGt           *string  `json:"serialGT,omitempty"`
	SerialGte          *string  `json:"serialGTE,omitempty"`
	SerialLt           *string  `json:"serialLT,omitempty"`
	SerialLte          *string  `json:"serialLTE,omitempty"`
	SerialContains     *string  `json:"serialContains,omitempty"`
	SerialHasPrefix    *string  `json:"serialHasPrefix,omitempty"`
	SerialHasSuffix    *string  `json:"serialHasSuffix,omitempty"`
	SerialEqualFold    *string  `json:"serialEqualFold,omitempty"`
	SerialContainsFold *string  `json:"serialContainsFold,omitempty"`
	// server edge predicates
	HasServer     *bool               `json:"hasServer,omitempty"`
	HasServerWith []*ServerWhereInput `json:"hasServerWith,omitempty"`
	// server_cpu_type edge predicates
	HasServerCPUType     *bool                      `json:"hasServerCPUType,omitempty"`
	HasServerCPUTypeWith []*ServerCPUTypeWhereInput `json:"hasServerCPUTypeWith,omitempty"`
}

type ServerChassis struct {
	// The ID of the server chassis.
	ID        gidx.PrefixedID `json:"id"`
	CreatedAt time.Time       `json:"createdAt"`
	UpdatedAt time.Time       `json:"updatedAt"`
	// The serial number of the server chassis.
	Serial            string            `json:"serial"`
	Server            Server            `json:"server"`
	ServerChassisType ServerChassisType `json:"serverChassisType"`
}

func (ServerChassis) IsNode() {}

// The id of the object.
func (this ServerChassis) GetID() gidx.PrefixedID { return this.ID }

func (ServerChassis) IsEntity() {}

// A connection to a list of items.
type ServerChassisConnection struct {
	// A list of edges.
	Edges []*ServerChassisEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// Return response from serverChassisCreate
type ServerChassisCreatePayload struct {
	// The created server chassis.
	ServerChassis ServerChassis `json:"serverChassis"`
}

// Return response from serverChassisDelete
type ServerChassisDeletePayload struct {
	// The ID of the deleted server chassis.
	DeletedID gidx.PrefixedID `json:"deletedID"`
}

// An edge in a connection.
type ServerChassisEdge struct {
	// The item at the end of the edge.
	Node *ServerChassis `json:"node,omitempty"`
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
}

// Ordering options for ServerChassis connections
type ServerChassisOrder struct {
	// The ordering direction.
	Direction OrderDirection `json:"direction"`
	// The field by which to order ServerChasses.
	Field ServerChassisOrderField `json:"field"`
}

type ServerChassisType struct {
	// The ID of the server chassis type.
	ID        gidx.PrefixedID `json:"id"`
	CreatedAt time.Time       `json:"createdAt"`
	UpdatedAt time.Time       `json:"updatedAt"`
	// The name of the vendor for the server chassis type.
	Vendor string `json:"vendor"`
	// The mode of the server chassis type.
	Model string `json:"model"`
	// The height of the server chassis type.
	Height string `json:"height"`
	// Whether the server chassis type is full depth.
	IsFullDepth bool                    `json:"isFullDepth"`
	Chassis     ServerChassisConnection `json:"chassis"`
}

func (ServerChassisType) IsNode() {}

// The id of the object.
func (this ServerChassisType) GetID() gidx.PrefixedID { return this.ID }

func (ServerChassisType) IsEntity() {}

// A connection to a list of items.
type ServerChassisTypeConnection struct {
	// A list of edges.
	Edges []*ServerChassisTypeEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// Return response from serverChassisTypeCreate
type ServerChassisTypeCreatePayload struct {
	// The created server chassis type.
	ServerChassisType ServerChassisType `json:"serverChassisType"`
}

// Return response from serverChassisTypeDelete
type ServerChassisTypeDeletePayload struct {
	// The ID of the deleted server chassis type.
	DeletedID gidx.PrefixedID `json:"deletedID"`
}

// An edge in a connection.
type ServerChassisTypeEdge struct {
	// The item at the end of the edge.
	Node *ServerChassisType `json:"node,omitempty"`
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
}

// Ordering options for ServerChassisType connections
type ServerChassisTypeOrder struct {
	// The ordering direction.
	Direction OrderDirection `json:"direction"`
	// The field by which to order ServerChassisTypes.
	Field ServerChassisTypeOrderField `json:"field"`
}

// Return response from serverChassisTypeUpdate
type ServerChassisTypeUpdatePayload struct {
	// The updated server chassis type.
	ServerChassisType ServerChassisType `json:"serverChassisType"`
}

// ServerChassisTypeWhereInput is used for filtering ServerChassisType objects.
// Input was generated by ent.
type ServerChassisTypeWhereInput struct {
	Not *ServerChassisTypeWhereInput   `json:"not,omitempty"`
	And []*ServerChassisTypeWhereInput `json:"and,omitempty"`
	Or  []*ServerChassisTypeWhereInput `json:"or,omitempty"`
	// id field predicates
	ID      *gidx.PrefixedID  `json:"id,omitempty"`
	IDNeq   *gidx.PrefixedID  `json:"idNEQ,omitempty"`
	IDIn    []gidx.PrefixedID `json:"idIn,omitempty"`
	IDNotIn []gidx.PrefixedID `json:"idNotIn,omitempty"`
	IDGt    *gidx.PrefixedID  `json:"idGT,omitempty"`
	IDGte   *gidx.PrefixedID  `json:"idGTE,omitempty"`
	IDLt    *gidx.PrefixedID  `json:"idLT,omitempty"`
	IDLte   *gidx.PrefixedID  `json:"idLTE,omitempty"`
	// created_at field predicates
	CreatedAt      *time.Time   `json:"createdAt,omitempty"`
	CreatedAtNeq   *time.Time   `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []*time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []*time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGt    *time.Time   `json:"createdAtGT,omitempty"`
	CreatedAtGte   *time.Time   `json:"createdAtGTE,omitempty"`
	CreatedAtLt    *time.Time   `json:"createdAtLT,omitempty"`
	CreatedAtLte   *time.Time   `json:"createdAtLTE,omitempty"`
	// updated_at field predicates
	UpdatedAt      *time.Time   `json:"updatedAt,omitempty"`
	UpdatedAtNeq   *time.Time   `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []*time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []*time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGt    *time.Time   `json:"updatedAtGT,omitempty"`
	UpdatedAtGte   *time.Time   `json:"updatedAtGTE,omitempty"`
	UpdatedAtLt    *time.Time   `json:"updatedAtLT,omitempty"`
	UpdatedAtLte   *time.Time   `json:"updatedAtLTE,omitempty"`
	// vendor field predicates
	Vendor             *string  `json:"vendor,omitempty"`
	VendorNeq          *string  `json:"vendorNEQ,omitempty"`
	VendorIn           []string `json:"vendorIn,omitempty"`
	VendorNotIn        []string `json:"vendorNotIn,omitempty"`
	VendorGt           *string  `json:"vendorGT,omitempty"`
	VendorGte          *string  `json:"vendorGTE,omitempty"`
	VendorLt           *string  `json:"vendorLT,omitempty"`
	VendorLte          *string  `json:"vendorLTE,omitempty"`
	VendorContains     *string  `json:"vendorContains,omitempty"`
	VendorHasPrefix    *string  `json:"vendorHasPrefix,omitempty"`
	VendorHasSuffix    *string  `json:"vendorHasSuffix,omitempty"`
	VendorEqualFold    *string  `json:"vendorEqualFold,omitempty"`
	VendorContainsFold *string  `json:"vendorContainsFold,omitempty"`
	// model field predicates
	Model             *string  `json:"model,omitempty"`
	ModelNeq          *string  `json:"modelNEQ,omitempty"`
	ModelIn           []string `json:"modelIn,omitempty"`
	ModelNotIn        []string `json:"modelNotIn,omitempty"`
	ModelGt           *string  `json:"modelGT,omitempty"`
	ModelGte          *string  `json:"modelGTE,omitempty"`
	ModelLt           *string  `json:"modelLT,omitempty"`
	ModelLte          *string  `json:"modelLTE,omitempty"`
	ModelContains     *string  `json:"modelContains,omitempty"`
	ModelHasPrefix    *string  `json:"modelHasPrefix,omitempty"`
	ModelHasSuffix    *string  `json:"modelHasSuffix,omitempty"`
	ModelEqualFold    *string  `json:"modelEqualFold,omitempty"`
	ModelContainsFold *string  `json:"modelContainsFold,omitempty"`
	// height field predicates
	Height             *string  `json:"height,omitempty"`
	HeightNeq          *string  `json:"heightNEQ,omitempty"`
	HeightIn           []string `json:"heightIn,omitempty"`
	HeightNotIn        []string `json:"heightNotIn,omitempty"`
	HeightGt           *string  `json:"heightGT,omitempty"`
	HeightGte          *string  `json:"heightGTE,omitempty"`
	HeightLt           *string  `json:"heightLT,omitempty"`
	HeightLte          *string  `json:"heightLTE,omitempty"`
	HeightContains     *string  `json:"heightContains,omitempty"`
	HeightHasPrefix    *string  `json:"heightHasPrefix,omitempty"`
	HeightHasSuffix    *string  `json:"heightHasSuffix,omitempty"`
	HeightEqualFold    *string  `json:"heightEqualFold,omitempty"`
	HeightContainsFold *string  `json:"heightContainsFold,omitempty"`
	// is_full_depth field predicates
	IsFullDepth    *bool `json:"isFullDepth,omitempty"`
	IsFullDepthNeq *bool `json:"isFullDepthNEQ,omitempty"`
	// chassis edge predicates
	HasChassis     *bool                      `json:"hasChassis,omitempty"`
	HasChassisWith []*ServerChassisWhereInput `json:"hasChassisWith,omitempty"`
}

// Return response from serverChassisUpdate
type ServerChassisUpdatePayload struct {
	// The updated server chassis.
	ServerChassis ServerChassis `json:"serverChassis"`
}

// ServerChassisWhereInput is used for filtering ServerChassis objects.
// Input was generated by ent.
type ServerChassisWhereInput struct {
	Not *ServerChassisWhereInput   `json:"not,omitempty"`
	And []*ServerChassisWhereInput `json:"and,omitempty"`
	Or  []*ServerChassisWhereInput `json:"or,omitempty"`
	// id field predicates
	ID      *gidx.PrefixedID  `json:"id,omitempty"`
	IDNeq   *gidx.PrefixedID  `json:"idNEQ,omitempty"`
	IDIn    []gidx.PrefixedID `json:"idIn,omitempty"`
	IDNotIn []gidx.PrefixedID `json:"idNotIn,omitempty"`
	IDGt    *gidx.PrefixedID  `json:"idGT,omitempty"`
	IDGte   *gidx.PrefixedID  `json:"idGTE,omitempty"`
	IDLt    *gidx.PrefixedID  `json:"idLT,omitempty"`
	IDLte   *gidx.PrefixedID  `json:"idLTE,omitempty"`
	// created_at field predicates
	CreatedAt      *time.Time   `json:"createdAt,omitempty"`
	CreatedAtNeq   *time.Time   `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []*time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []*time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGt    *time.Time   `json:"createdAtGT,omitempty"`
	CreatedAtGte   *time.Time   `json:"createdAtGTE,omitempty"`
	CreatedAtLt    *time.Time   `json:"createdAtLT,omitempty"`
	CreatedAtLte   *time.Time   `json:"createdAtLTE,omitempty"`
	// updated_at field predicates
	UpdatedAt      *time.Time   `json:"updatedAt,omitempty"`
	UpdatedAtNeq   *time.Time   `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []*time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []*time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGt    *time.Time   `json:"updatedAtGT,omitempty"`
	UpdatedAtGte   *time.Time   `json:"updatedAtGTE,omitempty"`
	UpdatedAtLt    *time.Time   `json:"updatedAtLT,omitempty"`
	UpdatedAtLte   *time.Time   `json:"updatedAtLTE,omitempty"`
	// serial field predicates
	Serial             *string  `json:"serial,omitempty"`
	SerialNeq          *string  `json:"serialNEQ,omitempty"`
	SerialIn           []string `json:"serialIn,omitempty"`
	SerialNotIn        []string `json:"serialNotIn,omitempty"`
	SerialGt           *string  `json:"serialGT,omitempty"`
	SerialGte          *string  `json:"serialGTE,omitempty"`
	SerialLt           *string  `json:"serialLT,omitempty"`
	SerialLte          *string  `json:"serialLTE,omitempty"`
	SerialContains     *string  `json:"serialContains,omitempty"`
	SerialHasPrefix    *string  `json:"serialHasPrefix,omitempty"`
	SerialHasSuffix    *string  `json:"serialHasSuffix,omitempty"`
	SerialEqualFold    *string  `json:"serialEqualFold,omitempty"`
	SerialContainsFold *string  `json:"serialContainsFold,omitempty"`
	// server edge predicates
	HasServer     *bool               `json:"hasServer,omitempty"`
	HasServerWith []*ServerWhereInput `json:"hasServerWith,omitempty"`
	// server_chassis_type edge predicates
	HasServerChassisType     *bool                          `json:"hasServerChassisType,omitempty"`
	HasServerChassisTypeWith []*ServerChassisTypeWhereInput `json:"hasServerChassisTypeWith,omitempty"`
}

type ServerComponent struct {
	// The ID of the server component.
	ID        gidx.PrefixedID `json:"id"`
	CreatedAt time.Time       `json:"createdAt"`
	UpdatedAt time.Time       `json:"updatedAt"`
	// The name of the server component.
	Name string `json:"name"`
	// The name of the vendor of the server component.
	Vendor string `json:"vendor"`
	// The model of the server component.
	Model string `json:"model"`
	// The serial number of the server component.
	Serial string `json:"serial"`
	// The server component type for the server component.
	ComponentType ServerComponentType `json:"serverComponentType"`
	Server        Server              `json:"server"`
}

func (ServerComponent) IsNode() {}

// The id of the object.
func (this ServerComponent) GetID() gidx.PrefixedID { return this.ID }

func (ServerComponent) IsEntity() {}

// A connection to a list of items.
type ServerComponentConnection struct {
	// A list of edges.
	Edges []*ServerComponentEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// Return response from serverComponentCreate
type ServerComponentCreatePayload struct {
	// The created server component.
	ServerComponent ServerComponent `json:"serverComponent"`
}

// Return response from serverComponentDelete
type ServerComponentDeletePayload struct {
	// The ID of the deleted server component.
	DeletedID gidx.PrefixedID `json:"deletedID"`
}

// An edge in a connection.
type ServerComponentEdge struct {
	// The item at the end of the edge.
	Node *ServerComponent `json:"node,omitempty"`
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
}

// Ordering options for ServerComponent connections
type ServerComponentOrder struct {
	// The ordering direction.
	Direction OrderDirection `json:"direction"`
	// The field by which to order ServerComponents.
	Field ServerComponentOrderField `json:"field"`
}

type ServerComponentType struct {
	// The ID of the server component type.
	ID        gidx.PrefixedID `json:"id"`
	CreatedAt time.Time       `json:"createdAt"`
	UpdatedAt time.Time       `json:"updatedAt"`
	// The name of the server component type.
	Name string `json:"name"`
}

func (ServerComponentType) IsNode() {}

// The id of the object.
func (this ServerComponentType) GetID() gidx.PrefixedID { return this.ID }

func (ServerComponentType) IsEntity() {}

// A connection to a list of items.
type ServerComponentTypeConnection struct {
	// A list of edges.
	Edges []*ServerComponentTypeEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// Return response from serverComponentTypeCreate
type ServerComponentTypeCreatePayload struct {
	// The created server component type.
	ServerComponentType ServerComponentType `json:"serverComponentType"`
}

// Return response from serverComponentTypeDelete
type ServerComponentTypeDeletePayload struct {
	// The ID of the deleted server component type.
	DeletedID gidx.PrefixedID `json:"deletedID"`
}

// An edge in a connection.
type ServerComponentTypeEdge struct {
	// The item at the end of the edge.
	Node *ServerComponentType `json:"node,omitempty"`
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
}

// Ordering options for ServerComponentType connections
type ServerComponentTypeOrder struct {
	// The ordering direction.
	Direction OrderDirection `json:"direction"`
	// The field by which to order ServerComponentTypes.
	Field ServerComponentTypeOrderField `json:"field"`
}

// Return response from serverComponentTypeUpdate
type ServerComponentTypeUpdatePayload struct {
	// The updated server component type.
	ServerComponentType ServerComponentType `json:"serverComponentType"`
}

// ServerComponentTypeWhereInput is used for filtering ServerComponentType objects.
// Input was generated by ent.
type ServerComponentTypeWhereInput struct {
	Not *ServerComponentTypeWhereInput   `json:"not,omitempty"`
	And []*ServerComponentTypeWhereInput `json:"and,omitempty"`
	Or  []*ServerComponentTypeWhereInput `json:"or,omitempty"`
	// id field predicates
	ID      *gidx.PrefixedID  `json:"id,omitempty"`
	IDNeq   *gidx.PrefixedID  `json:"idNEQ,omitempty"`
	IDIn    []gidx.PrefixedID `json:"idIn,omitempty"`
	IDNotIn []gidx.PrefixedID `json:"idNotIn,omitempty"`
	IDGt    *gidx.PrefixedID  `json:"idGT,omitempty"`
	IDGte   *gidx.PrefixedID  `json:"idGTE,omitempty"`
	IDLt    *gidx.PrefixedID  `json:"idLT,omitempty"`
	IDLte   *gidx.PrefixedID  `json:"idLTE,omitempty"`
	// created_at field predicates
	CreatedAt      *time.Time   `json:"createdAt,omitempty"`
	CreatedAtNeq   *time.Time   `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []*time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []*time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGt    *time.Time   `json:"createdAtGT,omitempty"`
	CreatedAtGte   *time.Time   `json:"createdAtGTE,omitempty"`
	CreatedAtLt    *time.Time   `json:"createdAtLT,omitempty"`
	CreatedAtLte   *time.Time   `json:"createdAtLTE,omitempty"`
	// updated_at field predicates
	UpdatedAt      *time.Time   `json:"updatedAt,omitempty"`
	UpdatedAtNeq   *time.Time   `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []*time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []*time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGt    *time.Time   `json:"updatedAtGT,omitempty"`
	UpdatedAtGte   *time.Time   `json:"updatedAtGTE,omitempty"`
	UpdatedAtLt    *time.Time   `json:"updatedAtLT,omitempty"`
	UpdatedAtLte   *time.Time   `json:"updatedAtLTE,omitempty"`
	// name field predicates
	Name             *string  `json:"name,omitempty"`
	NameNeq          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGt           *string  `json:"nameGT,omitempty"`
	NameGte          *string  `json:"nameGTE,omitempty"`
	NameLt           *string  `json:"nameLT,omitempty"`
	NameLte          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`
}

// Return response from serverComponentUpdate
type ServerComponentUpdatePayload struct {
	// The updated server component.
	ServerComponent ServerComponent `json:"serverComponent"`
}

// ServerComponentWhereInput is used for filtering ServerComponent objects.
// Input was generated by ent.
type ServerComponentWhereInput struct {
	Not *ServerComponentWhereInput   `json:"not,omitempty"`
	And []*ServerComponentWhereInput `json:"and,omitempty"`
	Or  []*ServerComponentWhereInput `json:"or,omitempty"`
	// id field predicates
	ID      *gidx.PrefixedID  `json:"id,omitempty"`
	IDNeq   *gidx.PrefixedID  `json:"idNEQ,omitempty"`
	IDIn    []gidx.PrefixedID `json:"idIn,omitempty"`
	IDNotIn []gidx.PrefixedID `json:"idNotIn,omitempty"`
	IDGt    *gidx.PrefixedID  `json:"idGT,omitempty"`
	IDGte   *gidx.PrefixedID  `json:"idGTE,omitempty"`
	IDLt    *gidx.PrefixedID  `json:"idLT,omitempty"`
	IDLte   *gidx.PrefixedID  `json:"idLTE,omitempty"`
	// created_at field predicates
	CreatedAt      *time.Time   `json:"createdAt,omitempty"`
	CreatedAtNeq   *time.Time   `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []*time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []*time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGt    *time.Time   `json:"createdAtGT,omitempty"`
	CreatedAtGte   *time.Time   `json:"createdAtGTE,omitempty"`
	CreatedAtLt    *time.Time   `json:"createdAtLT,omitempty"`
	CreatedAtLte   *time.Time   `json:"createdAtLTE,omitempty"`
	// updated_at field predicates
	UpdatedAt      *time.Time   `json:"updatedAt,omitempty"`
	UpdatedAtNeq   *time.Time   `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []*time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []*time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGt    *time.Time   `json:"updatedAtGT,omitempty"`
	UpdatedAtGte   *time.Time   `json:"updatedAtGTE,omitempty"`
	UpdatedAtLt    *time.Time   `json:"updatedAtLT,omitempty"`
	UpdatedAtLte   *time.Time   `json:"updatedAtLTE,omitempty"`
	// name field predicates
	Name             *string  `json:"name,omitempty"`
	NameNeq          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGt           *string  `json:"nameGT,omitempty"`
	NameGte          *string  `json:"nameGTE,omitempty"`
	NameLt           *string  `json:"nameLT,omitempty"`
	NameLte          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`
	// vendor field predicates
	Vendor             *string  `json:"vendor,omitempty"`
	VendorNeq          *string  `json:"vendorNEQ,omitempty"`
	VendorIn           []string `json:"vendorIn,omitempty"`
	VendorNotIn        []string `json:"vendorNotIn,omitempty"`
	VendorGt           *string  `json:"vendorGT,omitempty"`
	VendorGte          *string  `json:"vendorGTE,omitempty"`
	VendorLt           *string  `json:"vendorLT,omitempty"`
	VendorLte          *string  `json:"vendorLTE,omitempty"`
	VendorContains     *string  `json:"vendorContains,omitempty"`
	VendorHasPrefix    *string  `json:"vendorHasPrefix,omitempty"`
	VendorHasSuffix    *string  `json:"vendorHasSuffix,omitempty"`
	VendorEqualFold    *string  `json:"vendorEqualFold,omitempty"`
	VendorContainsFold *string  `json:"vendorContainsFold,omitempty"`
	// model field predicates
	Model             *string  `json:"model,omitempty"`
	ModelNeq          *string  `json:"modelNEQ,omitempty"`
	ModelIn           []string `json:"modelIn,omitempty"`
	ModelNotIn        []string `json:"modelNotIn,omitempty"`
	ModelGt           *string  `json:"modelGT,omitempty"`
	ModelGte          *string  `json:"modelGTE,omitempty"`
	ModelLt           *string  `json:"modelLT,omitempty"`
	ModelLte          *string  `json:"modelLTE,omitempty"`
	ModelContains     *string  `json:"modelContains,omitempty"`
	ModelHasPrefix    *string  `json:"modelHasPrefix,omitempty"`
	ModelHasSuffix    *string  `json:"modelHasSuffix,omitempty"`
	ModelEqualFold    *string  `json:"modelEqualFold,omitempty"`
	ModelContainsFold *string  `json:"modelContainsFold,omitempty"`
	// serial field predicates
	Serial             *string  `json:"serial,omitempty"`
	SerialNeq          *string  `json:"serialNEQ,omitempty"`
	SerialIn           []string `json:"serialIn,omitempty"`
	SerialNotIn        []string `json:"serialNotIn,omitempty"`
	SerialGt           *string  `json:"serialGT,omitempty"`
	SerialGte          *string  `json:"serialGTE,omitempty"`
	SerialLt           *string  `json:"serialLT,omitempty"`
	SerialLte          *string  `json:"serialLTE,omitempty"`
	SerialContains     *string  `json:"serialContains,omitempty"`
	SerialHasPrefix    *string  `json:"serialHasPrefix,omitempty"`
	SerialHasSuffix    *string  `json:"serialHasSuffix,omitempty"`
	SerialEqualFold    *string  `json:"serialEqualFold,omitempty"`
	SerialContainsFold *string  `json:"serialContainsFold,omitempty"`
	// component_type edge predicates
	HasComponentType     *bool                            `json:"hasComponentType,omitempty"`
	HasComponentTypeWith []*ServerComponentTypeWhereInput `json:"hasComponentTypeWith,omitempty"`
	// server edge predicates
	HasServer     *bool               `json:"hasServer,omitempty"`
	HasServerWith []*ServerWhereInput `json:"hasServerWith,omitempty"`
}

// A connection to a list of items.
type ServerConnection struct {
	// A list of edges.
	Edges []*ServerEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// Return response from serverCreate
type ServerCreatePayload struct {
	// The created server.
	Server Server `json:"server"`
}

// Return response from serverDelete
type ServerDeletePayload struct {
	// The ID of the deleted server.
	DeletedID gidx.PrefixedID `json:"deletedID"`
}

// An edge in a connection.
type ServerEdge struct {
	// The item at the end of the edge.
	Node *Server `json:"node,omitempty"`
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
}

type ServerHardDrive struct {
	// The ID of the server hard drive type.
	ID        gidx.PrefixedID `json:"id"`
	CreatedAt time.Time       `json:"createdAt"`
	UpdatedAt time.Time       `json:"updatedAt"`
	// The serial for the server hard drive.
	Serial        string              `json:"serial"`
	Server        Server              `json:"server"`
	HardDriveType ServerHardDriveType `json:"hardDriveType"`
}

func (ServerHardDrive) IsNode() {}

// The id of the object.
func (this ServerHardDrive) GetID() gidx.PrefixedID { return this.ID }

func (ServerHardDrive) IsEntity() {}

// A connection to a list of items.
type ServerHardDriveConnection struct {
	// A list of edges.
	Edges []*ServerHardDriveEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// Return response from serverHardDriveCreate
type ServerHardDriveCreatePayload struct {
	// The created server hard drive.
	ServerHardDrive ServerHardDrive `json:"serverHardDrive"`
}

// Return response from serverHardDriveDelete
type ServerHardDriveDeletePayload struct {
	// The ID of the deleted server hard drive.
	DeletedID gidx.PrefixedID `json:"deletedID"`
}

// An edge in a connection.
type ServerHardDriveEdge struct {
	// The item at the end of the edge.
	Node *ServerHardDrive `json:"node,omitempty"`
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
}

// Ordering options for ServerHardDrive connections
type ServerHardDriveOrder struct {
	// The ordering direction.
	Direction OrderDirection `json:"direction"`
	// The field by which to order ServerHardDrives.
	Field ServerHardDriveOrderField `json:"field"`
}

type ServerHardDriveType struct {
	// The ID of the server hard drive type.
	ID        gidx.PrefixedID `json:"id"`
	CreatedAt time.Time       `json:"createdAt"`
	UpdatedAt time.Time       `json:"updatedAt"`
	// The name of the vendor for the server hard drive type.
	Vendor string `json:"vendor"`
	// The mode of the server chassis type.
	Model string `json:"model"`
	// The speed of the server hard drive type.
	Speed string `json:"speed"`
	// The type of the server hard drive type.
	Type string `json:"type"`
	// The capacity of the server hard drive type.
	Capacity  string                    `json:"capacity"`
	HardDrive ServerHardDriveConnection `json:"hardDrive"`
}

func (ServerHardDriveType) IsNode() {}

// The id of the object.
func (this ServerHardDriveType) GetID() gidx.PrefixedID { return this.ID }

func (ServerHardDriveType) IsEntity() {}

// A connection to a list of items.
type ServerHardDriveTypeConnection struct {
	// A list of edges.
	Edges []*ServerHardDriveTypeEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// Return response from serverHardDriveTypeCreate
type ServerHardDriveTypeCreatePayload struct {
	// The created server hard drive type.
	ServerHardDriveType ServerHardDriveType `json:"serverHardDriveType"`
}

// Return response from serverHardDriveTypeDelete
type ServerHardDriveTypeDeletePayload struct {
	// The ID of the deleted server hard drive type.
	DeletedID gidx.PrefixedID `json:"deletedID"`
}

// An edge in a connection.
type ServerHardDriveTypeEdge struct {
	// The item at the end of the edge.
	Node *ServerHardDriveType `json:"node,omitempty"`
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
}

// Ordering options for ServerHardDriveType connections
type ServerHardDriveTypeOrder struct {
	// The ordering direction.
	Direction OrderDirection `json:"direction"`
	// The field by which to order ServerHardDriveTypes.
	Field ServerHardDriveTypeOrderField `json:"field"`
}

// Return response from serverHardDriveTypeUpdate
type ServerHardDriveTypeUpdatePayload struct {
	// The updated server hard drive type.
	ServerHardDriveType ServerHardDriveType `json:"serverHardDriveType"`
}

// ServerHardDriveTypeWhereInput is used for filtering ServerHardDriveType objects.
// Input was generated by ent.
type ServerHardDriveTypeWhereInput struct {
	Not *ServerHardDriveTypeWhereInput   `json:"not,omitempty"`
	And []*ServerHardDriveTypeWhereInput `json:"and,omitempty"`
	Or  []*ServerHardDriveTypeWhereInput `json:"or,omitempty"`
	// id field predicates
	ID      *gidx.PrefixedID  `json:"id,omitempty"`
	IDNeq   *gidx.PrefixedID  `json:"idNEQ,omitempty"`
	IDIn    []gidx.PrefixedID `json:"idIn,omitempty"`
	IDNotIn []gidx.PrefixedID `json:"idNotIn,omitempty"`
	IDGt    *gidx.PrefixedID  `json:"idGT,omitempty"`
	IDGte   *gidx.PrefixedID  `json:"idGTE,omitempty"`
	IDLt    *gidx.PrefixedID  `json:"idLT,omitempty"`
	IDLte   *gidx.PrefixedID  `json:"idLTE,omitempty"`
	// created_at field predicates
	CreatedAt      *time.Time   `json:"createdAt,omitempty"`
	CreatedAtNeq   *time.Time   `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []*time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []*time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGt    *time.Time   `json:"createdAtGT,omitempty"`
	CreatedAtGte   *time.Time   `json:"createdAtGTE,omitempty"`
	CreatedAtLt    *time.Time   `json:"createdAtLT,omitempty"`
	CreatedAtLte   *time.Time   `json:"createdAtLTE,omitempty"`
	// updated_at field predicates
	UpdatedAt      *time.Time   `json:"updatedAt,omitempty"`
	UpdatedAtNeq   *time.Time   `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []*time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []*time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGt    *time.Time   `json:"updatedAtGT,omitempty"`
	UpdatedAtGte   *time.Time   `json:"updatedAtGTE,omitempty"`
	UpdatedAtLt    *time.Time   `json:"updatedAtLT,omitempty"`
	UpdatedAtLte   *time.Time   `json:"updatedAtLTE,omitempty"`
	// vendor field predicates
	Vendor             *string  `json:"vendor,omitempty"`
	VendorNeq          *string  `json:"vendorNEQ,omitempty"`
	VendorIn           []string `json:"vendorIn,omitempty"`
	VendorNotIn        []string `json:"vendorNotIn,omitempty"`
	VendorGt           *string  `json:"vendorGT,omitempty"`
	VendorGte          *string  `json:"vendorGTE,omitempty"`
	VendorLt           *string  `json:"vendorLT,omitempty"`
	VendorLte          *string  `json:"vendorLTE,omitempty"`
	VendorContains     *string  `json:"vendorContains,omitempty"`
	VendorHasPrefix    *string  `json:"vendorHasPrefix,omitempty"`
	VendorHasSuffix    *string  `json:"vendorHasSuffix,omitempty"`
	VendorEqualFold    *string  `json:"vendorEqualFold,omitempty"`
	VendorContainsFold *string  `json:"vendorContainsFold,omitempty"`
	// model field predicates
	Model             *string  `json:"model,omitempty"`
	ModelNeq          *string  `json:"modelNEQ,omitempty"`
	ModelIn           []string `json:"modelIn,omitempty"`
	ModelNotIn        []string `json:"modelNotIn,omitempty"`
	ModelGt           *string  `json:"modelGT,omitempty"`
	ModelGte          *string  `json:"modelGTE,omitempty"`
	ModelLt           *string  `json:"modelLT,omitempty"`
	ModelLte          *string  `json:"modelLTE,omitempty"`
	ModelContains     *string  `json:"modelContains,omitempty"`
	ModelHasPrefix    *string  `json:"modelHasPrefix,omitempty"`
	ModelHasSuffix    *string  `json:"modelHasSuffix,omitempty"`
	ModelEqualFold    *string  `json:"modelEqualFold,omitempty"`
	ModelContainsFold *string  `json:"modelContainsFold,omitempty"`
	// speed field predicates
	Speed             *string  `json:"speed,omitempty"`
	SpeedNeq          *string  `json:"speedNEQ,omitempty"`
	SpeedIn           []string `json:"speedIn,omitempty"`
	SpeedNotIn        []string `json:"speedNotIn,omitempty"`
	SpeedGt           *string  `json:"speedGT,omitempty"`
	SpeedGte          *string  `json:"speedGTE,omitempty"`
	SpeedLt           *string  `json:"speedLT,omitempty"`
	SpeedLte          *string  `json:"speedLTE,omitempty"`
	SpeedContains     *string  `json:"speedContains,omitempty"`
	SpeedHasPrefix    *string  `json:"speedHasPrefix,omitempty"`
	SpeedHasSuffix    *string  `json:"speedHasSuffix,omitempty"`
	SpeedEqualFold    *string  `json:"speedEqualFold,omitempty"`
	SpeedContainsFold *string  `json:"speedContainsFold,omitempty"`
	// type field predicates
	Type             *string  `json:"type,omitempty"`
	TypeNeq          *string  `json:"typeNEQ,omitempty"`
	TypeIn           []string `json:"typeIn,omitempty"`
	TypeNotIn        []string `json:"typeNotIn,omitempty"`
	TypeGt           *string  `json:"typeGT,omitempty"`
	TypeGte          *string  `json:"typeGTE,omitempty"`
	TypeLt           *string  `json:"typeLT,omitempty"`
	TypeLte          *string  `json:"typeLTE,omitempty"`
	TypeContains     *string  `json:"typeContains,omitempty"`
	TypeHasPrefix    *string  `json:"typeHasPrefix,omitempty"`
	TypeHasSuffix    *string  `json:"typeHasSuffix,omitempty"`
	TypeEqualFold    *string  `json:"typeEqualFold,omitempty"`
	TypeContainsFold *string  `json:"typeContainsFold,omitempty"`
	// capacity field predicates
	Capacity             *string  `json:"capacity,omitempty"`
	CapacityNeq          *string  `json:"capacityNEQ,omitempty"`
	CapacityIn           []string `json:"capacityIn,omitempty"`
	CapacityNotIn        []string `json:"capacityNotIn,omitempty"`
	CapacityGt           *string  `json:"capacityGT,omitempty"`
	CapacityGte          *string  `json:"capacityGTE,omitempty"`
	CapacityLt           *string  `json:"capacityLT,omitempty"`
	CapacityLte          *string  `json:"capacityLTE,omitempty"`
	CapacityContains     *string  `json:"capacityContains,omitempty"`
	CapacityHasPrefix    *string  `json:"capacityHasPrefix,omitempty"`
	CapacityHasSuffix    *string  `json:"capacityHasSuffix,omitempty"`
	CapacityEqualFold    *string  `json:"capacityEqualFold,omitempty"`
	CapacityContainsFold *string  `json:"capacityContainsFold,omitempty"`
	// hard_drive edge predicates
	HasHardDrive     *bool                        `json:"hasHardDrive,omitempty"`
	HasHardDriveWith []*ServerHardDriveWhereInput `json:"hasHardDriveWith,omitempty"`
}

// Return response from serverHardDriveUpdate
type ServerHardDriveUpdatePayload struct {
	// The updated server hard drive.
	ServerHardDrive ServerHardDrive `json:"serverHardDrive"`
}

// ServerHardDriveWhereInput is used for filtering ServerHardDrive objects.
// Input was generated by ent.
type ServerHardDriveWhereInput struct {
	Not *ServerHardDriveWhereInput   `json:"not,omitempty"`
	And []*ServerHardDriveWhereInput `json:"and,omitempty"`
	Or  []*ServerHardDriveWhereInput `json:"or,omitempty"`
	// id field predicates
	ID      *gidx.PrefixedID  `json:"id,omitempty"`
	IDNeq   *gidx.PrefixedID  `json:"idNEQ,omitempty"`
	IDIn    []gidx.PrefixedID `json:"idIn,omitempty"`
	IDNotIn []gidx.PrefixedID `json:"idNotIn,omitempty"`
	IDGt    *gidx.PrefixedID  `json:"idGT,omitempty"`
	IDGte   *gidx.PrefixedID  `json:"idGTE,omitempty"`
	IDLt    *gidx.PrefixedID  `json:"idLT,omitempty"`
	IDLte   *gidx.PrefixedID  `json:"idLTE,omitempty"`
	// created_at field predicates
	CreatedAt      *time.Time   `json:"createdAt,omitempty"`
	CreatedAtNeq   *time.Time   `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []*time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []*time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGt    *time.Time   `json:"createdAtGT,omitempty"`
	CreatedAtGte   *time.Time   `json:"createdAtGTE,omitempty"`
	CreatedAtLt    *time.Time   `json:"createdAtLT,omitempty"`
	CreatedAtLte   *time.Time   `json:"createdAtLTE,omitempty"`
	// updated_at field predicates
	UpdatedAt      *time.Time   `json:"updatedAt,omitempty"`
	UpdatedAtNeq   *time.Time   `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []*time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []*time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGt    *time.Time   `json:"updatedAtGT,omitempty"`
	UpdatedAtGte   *time.Time   `json:"updatedAtGTE,omitempty"`
	UpdatedAtLt    *time.Time   `json:"updatedAtLT,omitempty"`
	UpdatedAtLte   *time.Time   `json:"updatedAtLTE,omitempty"`
	// serial field predicates
	Serial             *string  `json:"serial,omitempty"`
	SerialNeq          *string  `json:"serialNEQ,omitempty"`
	SerialIn           []string `json:"serialIn,omitempty"`
	SerialNotIn        []string `json:"serialNotIn,omitempty"`
	SerialGt           *string  `json:"serialGT,omitempty"`
	SerialGte          *string  `json:"serialGTE,omitempty"`
	SerialLt           *string  `json:"serialLT,omitempty"`
	SerialLte          *string  `json:"serialLTE,omitempty"`
	SerialContains     *string  `json:"serialContains,omitempty"`
	SerialHasPrefix    *string  `json:"serialHasPrefix,omitempty"`
	SerialHasSuffix    *string  `json:"serialHasSuffix,omitempty"`
	SerialEqualFold    *string  `json:"serialEqualFold,omitempty"`
	SerialContainsFold *string  `json:"serialContainsFold,omitempty"`
	// server edge predicates
	HasServer     *bool               `json:"hasServer,omitempty"`
	HasServerWith []*ServerWhereInput `json:"hasServerWith,omitempty"`
	// hard_drive_type edge predicates
	HasHardDriveType     *bool                            `json:"hasHardDriveType,omitempty"`
	HasHardDriveTypeWith []*ServerHardDriveTypeWhereInput `json:"hasHardDriveTypeWith,omitempty"`
}

type ServerMemory struct {
	// The ID of the server memory.
	ID        gidx.PrefixedID `json:"id"`
	CreatedAt time.Time       `json:"createdAt"`
	UpdatedAt time.Time       `json:"updatedAt"`
	// The serial of the server memory.
	Serial           string           `json:"serial"`
	Server           Server           `json:"server"`
	ServerMemoryType ServerMemoryType `json:"serverMemoryType"`
}

func (ServerMemory) IsNode() {}

// The id of the object.
func (this ServerMemory) GetID() gidx.PrefixedID { return this.ID }

func (ServerMemory) IsEntity() {}

// A connection to a list of items.
type ServerMemoryConnection struct {
	// A list of edges.
	Edges []*ServerMemoryEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// Return response from serverMemoryCreate
type ServerMemoryCreatePayload struct {
	// The created server memory.
	ServerMemory ServerMemory `json:"serverMemory"`
}

// Return response from serverMemoryDelete
type ServerMemoryDeletePayload struct {
	// The ID of the deleted server memory.
	DeletedID gidx.PrefixedID `json:"deletedID"`
}

// An edge in a connection.
type ServerMemoryEdge struct {
	// The item at the end of the edge.
	Node *ServerMemory `json:"node,omitempty"`
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
}

// Ordering options for ServerMemory connections
type ServerMemoryOrder struct {
	// The ordering direction.
	Direction OrderDirection `json:"direction"`
	// The field by which to order ServerMemories.
	Field ServerMemoryOrderField `json:"field"`
}

type ServerMemoryType struct {
	// The ID of the server memory type.
	ID        gidx.PrefixedID `json:"id"`
	CreatedAt time.Time       `json:"createdAt"`
	UpdatedAt time.Time       `json:"updatedAt"`
	// The name of the vendor for the server chassis type.
	Vendor string `json:"vendor"`
	// The mode of the server chassis type.
	Model string `json:"model"`
	// The speed of the server memory type.
	Speed string `json:"speed"`
	// The size of the server memory type.
	Size   string                 `json:"size"`
	Memory ServerMemoryConnection `json:"memory"`
}

func (ServerMemoryType) IsNode() {}

// The id of the object.
func (this ServerMemoryType) GetID() gidx.PrefixedID { return this.ID }

func (ServerMemoryType) IsEntity() {}

// A connection to a list of items.
type ServerMemoryTypeConnection struct {
	// A list of edges.
	Edges []*ServerMemoryTypeEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// Return response from serverMemoryTypeCreate
type ServerMemoryTypeCreatePayload struct {
	// The created server memory type.
	ServerMemoryType ServerMemoryType `json:"serverMemoryType"`
}

// Return response from serverMemoryTypeDelete
type ServerMemoryTypeDeletePayload struct {
	// The ID of the deleted server memory type.
	DeletedID gidx.PrefixedID `json:"deletedID"`
}

// An edge in a connection.
type ServerMemoryTypeEdge struct {
	// The item at the end of the edge.
	Node *ServerMemoryType `json:"node,omitempty"`
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
}

// Ordering options for ServerMemoryType connections
type ServerMemoryTypeOrder struct {
	// The ordering direction.
	Direction OrderDirection `json:"direction"`
	// The field by which to order ServerMemoryTypes.
	Field ServerMemoryTypeOrderField `json:"field"`
}

// Return response from serverMemoryTypeUpdate
type ServerMemoryTypeUpdatePayload struct {
	// The updated server memory type.
	ServerMemoryType ServerMemoryType `json:"serverMemoryType"`
}

// ServerMemoryTypeWhereInput is used for filtering ServerMemoryType objects.
// Input was generated by ent.
type ServerMemoryTypeWhereInput struct {
	Not *ServerMemoryTypeWhereInput   `json:"not,omitempty"`
	And []*ServerMemoryTypeWhereInput `json:"and,omitempty"`
	Or  []*ServerMemoryTypeWhereInput `json:"or,omitempty"`
	// id field predicates
	ID      *gidx.PrefixedID  `json:"id,omitempty"`
	IDNeq   *gidx.PrefixedID  `json:"idNEQ,omitempty"`
	IDIn    []gidx.PrefixedID `json:"idIn,omitempty"`
	IDNotIn []gidx.PrefixedID `json:"idNotIn,omitempty"`
	IDGt    *gidx.PrefixedID  `json:"idGT,omitempty"`
	IDGte   *gidx.PrefixedID  `json:"idGTE,omitempty"`
	IDLt    *gidx.PrefixedID  `json:"idLT,omitempty"`
	IDLte   *gidx.PrefixedID  `json:"idLTE,omitempty"`
	// created_at field predicates
	CreatedAt      *time.Time   `json:"createdAt,omitempty"`
	CreatedAtNeq   *time.Time   `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []*time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []*time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGt    *time.Time   `json:"createdAtGT,omitempty"`
	CreatedAtGte   *time.Time   `json:"createdAtGTE,omitempty"`
	CreatedAtLt    *time.Time   `json:"createdAtLT,omitempty"`
	CreatedAtLte   *time.Time   `json:"createdAtLTE,omitempty"`
	// updated_at field predicates
	UpdatedAt      *time.Time   `json:"updatedAt,omitempty"`
	UpdatedAtNeq   *time.Time   `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []*time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []*time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGt    *time.Time   `json:"updatedAtGT,omitempty"`
	UpdatedAtGte   *time.Time   `json:"updatedAtGTE,omitempty"`
	UpdatedAtLt    *time.Time   `json:"updatedAtLT,omitempty"`
	UpdatedAtLte   *time.Time   `json:"updatedAtLTE,omitempty"`
	// vendor field predicates
	Vendor             *string  `json:"vendor,omitempty"`
	VendorNeq          *string  `json:"vendorNEQ,omitempty"`
	VendorIn           []string `json:"vendorIn,omitempty"`
	VendorNotIn        []string `json:"vendorNotIn,omitempty"`
	VendorGt           *string  `json:"vendorGT,omitempty"`
	VendorGte          *string  `json:"vendorGTE,omitempty"`
	VendorLt           *string  `json:"vendorLT,omitempty"`
	VendorLte          *string  `json:"vendorLTE,omitempty"`
	VendorContains     *string  `json:"vendorContains,omitempty"`
	VendorHasPrefix    *string  `json:"vendorHasPrefix,omitempty"`
	VendorHasSuffix    *string  `json:"vendorHasSuffix,omitempty"`
	VendorEqualFold    *string  `json:"vendorEqualFold,omitempty"`
	VendorContainsFold *string  `json:"vendorContainsFold,omitempty"`
	// model field predicates
	Model             *string  `json:"model,omitempty"`
	ModelNeq          *string  `json:"modelNEQ,omitempty"`
	ModelIn           []string `json:"modelIn,omitempty"`
	ModelNotIn        []string `json:"modelNotIn,omitempty"`
	ModelGt           *string  `json:"modelGT,omitempty"`
	ModelGte          *string  `json:"modelGTE,omitempty"`
	ModelLt           *string  `json:"modelLT,omitempty"`
	ModelLte          *string  `json:"modelLTE,omitempty"`
	ModelContains     *string  `json:"modelContains,omitempty"`
	ModelHasPrefix    *string  `json:"modelHasPrefix,omitempty"`
	ModelHasSuffix    *string  `json:"modelHasSuffix,omitempty"`
	ModelEqualFold    *string  `json:"modelEqualFold,omitempty"`
	ModelContainsFold *string  `json:"modelContainsFold,omitempty"`
	// speed field predicates
	Speed             *string  `json:"speed,omitempty"`
	SpeedNeq          *string  `json:"speedNEQ,omitempty"`
	SpeedIn           []string `json:"speedIn,omitempty"`
	SpeedNotIn        []string `json:"speedNotIn,omitempty"`
	SpeedGt           *string  `json:"speedGT,omitempty"`
	SpeedGte          *string  `json:"speedGTE,omitempty"`
	SpeedLt           *string  `json:"speedLT,omitempty"`
	SpeedLte          *string  `json:"speedLTE,omitempty"`
	SpeedContains     *string  `json:"speedContains,omitempty"`
	SpeedHasPrefix    *string  `json:"speedHasPrefix,omitempty"`
	SpeedHasSuffix    *string  `json:"speedHasSuffix,omitempty"`
	SpeedEqualFold    *string  `json:"speedEqualFold,omitempty"`
	SpeedContainsFold *string  `json:"speedContainsFold,omitempty"`
	// size field predicates
	Size             *string  `json:"size,omitempty"`
	SizeNeq          *string  `json:"sizeNEQ,omitempty"`
	SizeIn           []string `json:"sizeIn,omitempty"`
	SizeNotIn        []string `json:"sizeNotIn,omitempty"`
	SizeGt           *string  `json:"sizeGT,omitempty"`
	SizeGte          *string  `json:"sizeGTE,omitempty"`
	SizeLt           *string  `json:"sizeLT,omitempty"`
	SizeLte          *string  `json:"sizeLTE,omitempty"`
	SizeContains     *string  `json:"sizeContains,omitempty"`
	SizeHasPrefix    *string  `json:"sizeHasPrefix,omitempty"`
	SizeHasSuffix    *string  `json:"sizeHasSuffix,omitempty"`
	SizeEqualFold    *string  `json:"sizeEqualFold,omitempty"`
	SizeContainsFold *string  `json:"sizeContainsFold,omitempty"`
	// memory edge predicates
	HasMemory     *bool                     `json:"hasMemory,omitempty"`
	HasMemoryWith []*ServerMemoryWhereInput `json:"hasMemoryWith,omitempty"`
}

// Return response from serverMemoryUpdate
type ServerMemoryUpdatePayload struct {
	// The updated server memory.
	ServerMemory ServerMemory `json:"serverMemory"`
}

// ServerMemoryWhereInput is used for filtering ServerMemory objects.
// Input was generated by ent.
type ServerMemoryWhereInput struct {
	Not *ServerMemoryWhereInput   `json:"not,omitempty"`
	And []*ServerMemoryWhereInput `json:"and,omitempty"`
	Or  []*ServerMemoryWhereInput `json:"or,omitempty"`
	// id field predicates
	ID      *gidx.PrefixedID  `json:"id,omitempty"`
	IDNeq   *gidx.PrefixedID  `json:"idNEQ,omitempty"`
	IDIn    []gidx.PrefixedID `json:"idIn,omitempty"`
	IDNotIn []gidx.PrefixedID `json:"idNotIn,omitempty"`
	IDGt    *gidx.PrefixedID  `json:"idGT,omitempty"`
	IDGte   *gidx.PrefixedID  `json:"idGTE,omitempty"`
	IDLt    *gidx.PrefixedID  `json:"idLT,omitempty"`
	IDLte   *gidx.PrefixedID  `json:"idLTE,omitempty"`
	// created_at field predicates
	CreatedAt      *time.Time   `json:"createdAt,omitempty"`
	CreatedAtNeq   *time.Time   `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []*time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []*time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGt    *time.Time   `json:"createdAtGT,omitempty"`
	CreatedAtGte   *time.Time   `json:"createdAtGTE,omitempty"`
	CreatedAtLt    *time.Time   `json:"createdAtLT,omitempty"`
	CreatedAtLte   *time.Time   `json:"createdAtLTE,omitempty"`
	// updated_at field predicates
	UpdatedAt      *time.Time   `json:"updatedAt,omitempty"`
	UpdatedAtNeq   *time.Time   `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []*time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []*time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGt    *time.Time   `json:"updatedAtGT,omitempty"`
	UpdatedAtGte   *time.Time   `json:"updatedAtGTE,omitempty"`
	UpdatedAtLt    *time.Time   `json:"updatedAtLT,omitempty"`
	UpdatedAtLte   *time.Time   `json:"updatedAtLTE,omitempty"`
	// serial field predicates
	Serial             *string  `json:"serial,omitempty"`
	SerialNeq          *string  `json:"serialNEQ,omitempty"`
	SerialIn           []string `json:"serialIn,omitempty"`
	SerialNotIn        []string `json:"serialNotIn,omitempty"`
	SerialGt           *string  `json:"serialGT,omitempty"`
	SerialGte          *string  `json:"serialGTE,omitempty"`
	SerialLt           *string  `json:"serialLT,omitempty"`
	SerialLte          *string  `json:"serialLTE,omitempty"`
	SerialContains     *string  `json:"serialContains,omitempty"`
	SerialHasPrefix    *string  `json:"serialHasPrefix,omitempty"`
	SerialHasSuffix    *string  `json:"serialHasSuffix,omitempty"`
	SerialEqualFold    *string  `json:"serialEqualFold,omitempty"`
	SerialContainsFold *string  `json:"serialContainsFold,omitempty"`
	// server edge predicates
	HasServer     *bool               `json:"hasServer,omitempty"`
	HasServerWith []*ServerWhereInput `json:"hasServerWith,omitempty"`
	// server_memory_type edge predicates
	HasServerMemoryType     *bool                         `json:"hasServerMemoryType,omitempty"`
	HasServerMemoryTypeWith []*ServerMemoryTypeWhereInput `json:"hasServerMemoryTypeWith,omitempty"`
}

type ServerMotherboard struct {
	// The ID of the server motherboard.
	ID        gidx.PrefixedID `json:"id"`
	CreatedAt time.Time       `json:"createdAt"`
	UpdatedAt time.Time       `json:"updatedAt"`
	// The serial of the server motherboard
	Serial                string                `json:"serial"`
	Server                Server                `json:"server"`
	ServerMotherboardType ServerMotherboardType `json:"serverMotherboardType"`
}

func (ServerMotherboard) IsNode() {}

// The id of the object.
func (this ServerMotherboard) GetID() gidx.PrefixedID { return this.ID }

func (ServerMotherboard) IsEntity() {}

// A connection to a list of items.
type ServerMotherboardConnection struct {
	// A list of edges.
	Edges []*ServerMotherboardEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// Return response from serverMotherboardCreate
type ServerMotherboardCreatePayload struct {
	// The created server motherboard.
	ServerMotherboard ServerMotherboard `json:"serverMotherboard"`
}

// Return response from serverMotherboardDelete
type ServerMotherboardDeletePayload struct {
	// The ID of the deleted server motherboard.
	DeletedID gidx.PrefixedID `json:"deletedID"`
}

// An edge in a connection.
type ServerMotherboardEdge struct {
	// The item at the end of the edge.
	Node *ServerMotherboard `json:"node,omitempty"`
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
}

// Ordering options for ServerMotherboard connections
type ServerMotherboardOrder struct {
	// The ordering direction.
	Direction OrderDirection `json:"direction"`
	// The field by which to order ServerMotherboards.
	Field ServerMotherboardOrderField `json:"field"`
}

type ServerMotherboardType struct {
	// The ID of the server motherboard type.
	ID        gidx.PrefixedID `json:"id"`
	CreatedAt time.Time       `json:"createdAt"`
	UpdatedAt time.Time       `json:"updatedAt"`
	// The name of the vendor for the server motherboard type.
	Vendor string `json:"vendor"`
	// The mode of the server chassis type.
	Model       string                      `json:"model"`
	Motherboard ServerMotherboardConnection `json:"motherboard"`
}

func (ServerMotherboardType) IsNode() {}

// The id of the object.
func (this ServerMotherboardType) GetID() gidx.PrefixedID { return this.ID }

func (ServerMotherboardType) IsEntity() {}

// A connection to a list of items.
type ServerMotherboardTypeConnection struct {
	// A list of edges.
	Edges []*ServerMotherboardTypeEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// Return response from serverMotherboardTypeCreate
type ServerMotherboardTypeCreatePayload struct {
	// The created server motherboard type.
	ServerMotherboardType ServerMotherboardType `json:"serverMotherboardType"`
}

// Return response from serverMotherboardTypeDelete
type ServerMotherboardTypeDeletePayload struct {
	// The ID of the deleted server motherboard type.
	DeletedID gidx.PrefixedID `json:"deletedID"`
}

// An edge in a connection.
type ServerMotherboardTypeEdge struct {
	// The item at the end of the edge.
	Node *ServerMotherboardType `json:"node,omitempty"`
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
}

// Ordering options for ServerMotherboardType connections
type ServerMotherboardTypeOrder struct {
	// The ordering direction.
	Direction OrderDirection `json:"direction"`
	// The field by which to order ServerMotherboardTypes.
	Field ServerMotherboardTypeOrderField `json:"field"`
}

// Return response from serverMotherboardTypeUpdate
type ServerMotherboardTypeUpdatePayload struct {
	// The updated server motherboard type.
	ServerMotherboardType ServerMotherboardType `json:"serverMotherboardType"`
}

// ServerMotherboardTypeWhereInput is used for filtering ServerMotherboardType objects.
// Input was generated by ent.
type ServerMotherboardTypeWhereInput struct {
	Not *ServerMotherboardTypeWhereInput   `json:"not,omitempty"`
	And []*ServerMotherboardTypeWhereInput `json:"and,omitempty"`
	Or  []*ServerMotherboardTypeWhereInput `json:"or,omitempty"`
	// id field predicates
	ID      *gidx.PrefixedID  `json:"id,omitempty"`
	IDNeq   *gidx.PrefixedID  `json:"idNEQ,omitempty"`
	IDIn    []gidx.PrefixedID `json:"idIn,omitempty"`
	IDNotIn []gidx.PrefixedID `json:"idNotIn,omitempty"`
	IDGt    *gidx.PrefixedID  `json:"idGT,omitempty"`
	IDGte   *gidx.PrefixedID  `json:"idGTE,omitempty"`
	IDLt    *gidx.PrefixedID  `json:"idLT,omitempty"`
	IDLte   *gidx.PrefixedID  `json:"idLTE,omitempty"`
	// created_at field predicates
	CreatedAt      *time.Time   `json:"createdAt,omitempty"`
	CreatedAtNeq   *time.Time   `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []*time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []*time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGt    *time.Time   `json:"createdAtGT,omitempty"`
	CreatedAtGte   *time.Time   `json:"createdAtGTE,omitempty"`
	CreatedAtLt    *time.Time   `json:"createdAtLT,omitempty"`
	CreatedAtLte   *time.Time   `json:"createdAtLTE,omitempty"`
	// updated_at field predicates
	UpdatedAt      *time.Time   `json:"updatedAt,omitempty"`
	UpdatedAtNeq   *time.Time   `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []*time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []*time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGt    *time.Time   `json:"updatedAtGT,omitempty"`
	UpdatedAtGte   *time.Time   `json:"updatedAtGTE,omitempty"`
	UpdatedAtLt    *time.Time   `json:"updatedAtLT,omitempty"`
	UpdatedAtLte   *time.Time   `json:"updatedAtLTE,omitempty"`
	// vendor field predicates
	Vendor             *string  `json:"vendor,omitempty"`
	VendorNeq          *string  `json:"vendorNEQ,omitempty"`
	VendorIn           []string `json:"vendorIn,omitempty"`
	VendorNotIn        []string `json:"vendorNotIn,omitempty"`
	VendorGt           *string  `json:"vendorGT,omitempty"`
	VendorGte          *string  `json:"vendorGTE,omitempty"`
	VendorLt           *string  `json:"vendorLT,omitempty"`
	VendorLte          *string  `json:"vendorLTE,omitempty"`
	VendorContains     *string  `json:"vendorContains,omitempty"`
	VendorHasPrefix    *string  `json:"vendorHasPrefix,omitempty"`
	VendorHasSuffix    *string  `json:"vendorHasSuffix,omitempty"`
	VendorEqualFold    *string  `json:"vendorEqualFold,omitempty"`
	VendorContainsFold *string  `json:"vendorContainsFold,omitempty"`
	// model field predicates
	Model             *string  `json:"model,omitempty"`
	ModelNeq          *string  `json:"modelNEQ,omitempty"`
	ModelIn           []string `json:"modelIn,omitempty"`
	ModelNotIn        []string `json:"modelNotIn,omitempty"`
	ModelGt           *string  `json:"modelGT,omitempty"`
	ModelGte          *string  `json:"modelGTE,omitempty"`
	ModelLt           *string  `json:"modelLT,omitempty"`
	ModelLte          *string  `json:"modelLTE,omitempty"`
	ModelContains     *string  `json:"modelContains,omitempty"`
	ModelHasPrefix    *string  `json:"modelHasPrefix,omitempty"`
	ModelHasSuffix    *string  `json:"modelHasSuffix,omitempty"`
	ModelEqualFold    *string  `json:"modelEqualFold,omitempty"`
	ModelContainsFold *string  `json:"modelContainsFold,omitempty"`
	// motherboard edge predicates
	HasMotherboard     *bool                          `json:"hasMotherboard,omitempty"`
	HasMotherboardWith []*ServerMotherboardWhereInput `json:"hasMotherboardWith,omitempty"`
}

// Return response from serverMotherboardUpdate
type ServerMotherboardUpdatePayload struct {
	// The updated server motherboard.
	ServerMotherboard ServerMotherboard `json:"serverMotherboard"`
}

// ServerMotherboardWhereInput is used for filtering ServerMotherboard objects.
// Input was generated by ent.
type ServerMotherboardWhereInput struct {
	Not *ServerMotherboardWhereInput   `json:"not,omitempty"`
	And []*ServerMotherboardWhereInput `json:"and,omitempty"`
	Or  []*ServerMotherboardWhereInput `json:"or,omitempty"`
	// id field predicates
	ID      *gidx.PrefixedID  `json:"id,omitempty"`
	IDNeq   *gidx.PrefixedID  `json:"idNEQ,omitempty"`
	IDIn    []gidx.PrefixedID `json:"idIn,omitempty"`
	IDNotIn []gidx.PrefixedID `json:"idNotIn,omitempty"`
	IDGt    *gidx.PrefixedID  `json:"idGT,omitempty"`
	IDGte   *gidx.PrefixedID  `json:"idGTE,omitempty"`
	IDLt    *gidx.PrefixedID  `json:"idLT,omitempty"`
	IDLte   *gidx.PrefixedID  `json:"idLTE,omitempty"`
	// created_at field predicates
	CreatedAt      *time.Time   `json:"createdAt,omitempty"`
	CreatedAtNeq   *time.Time   `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []*time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []*time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGt    *time.Time   `json:"createdAtGT,omitempty"`
	CreatedAtGte   *time.Time   `json:"createdAtGTE,omitempty"`
	CreatedAtLt    *time.Time   `json:"createdAtLT,omitempty"`
	CreatedAtLte   *time.Time   `json:"createdAtLTE,omitempty"`
	// updated_at field predicates
	UpdatedAt      *time.Time   `json:"updatedAt,omitempty"`
	UpdatedAtNeq   *time.Time   `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []*time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []*time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGt    *time.Time   `json:"updatedAtGT,omitempty"`
	UpdatedAtGte   *time.Time   `json:"updatedAtGTE,omitempty"`
	UpdatedAtLt    *time.Time   `json:"updatedAtLT,omitempty"`
	UpdatedAtLte   *time.Time   `json:"updatedAtLTE,omitempty"`
	// serial field predicates
	Serial             *string  `json:"serial,omitempty"`
	SerialNeq          *string  `json:"serialNEQ,omitempty"`
	SerialIn           []string `json:"serialIn,omitempty"`
	SerialNotIn        []string `json:"serialNotIn,omitempty"`
	SerialGt           *string  `json:"serialGT,omitempty"`
	SerialGte          *string  `json:"serialGTE,omitempty"`
	SerialLt           *string  `json:"serialLT,omitempty"`
	SerialLte          *string  `json:"serialLTE,omitempty"`
	SerialContains     *string  `json:"serialContains,omitempty"`
	SerialHasPrefix    *string  `json:"serialHasPrefix,omitempty"`
	SerialHasSuffix    *string  `json:"serialHasSuffix,omitempty"`
	SerialEqualFold    *string  `json:"serialEqualFold,omitempty"`
	SerialContainsFold *string  `json:"serialContainsFold,omitempty"`
	// server edge predicates
	HasServer     *bool               `json:"hasServer,omitempty"`
	HasServerWith []*ServerWhereInput `json:"hasServerWith,omitempty"`
	// server_motherboard_type edge predicates
	HasServerMotherboardType     *bool                              `json:"hasServerMotherboardType,omitempty"`
	HasServerMotherboardTypeWith []*ServerMotherboardTypeWhereInput `json:"hasServerMotherboardTypeWith,omitempty"`
}

type ServerNetworkCard struct {
	// The ID of the server network card type.
	ID        gidx.PrefixedID `json:"id"`
	CreatedAt time.Time       `json:"createdAt"`
	UpdatedAt time.Time       `json:"updatedAt"`
	// The serial number for the server network card.
	Serial          string                      `json:"serial"`
	NetworkCardType ServerNetworkCardType       `json:"networkCardType"`
	Server          Server                      `json:"server"`
	NetworkPort     ServerNetworkPortConnection `json:"networkPort"`
}

func (ServerNetworkCard) IsNode() {}

// The id of the object.
func (this ServerNetworkCard) GetID() gidx.PrefixedID { return this.ID }

func (ServerNetworkCard) IsEntity() {}

// A connection to a list of items.
type ServerNetworkCardConnection struct {
	// A list of edges.
	Edges []*ServerNetworkCardEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// Return response from serverNetworkCardCreate
type ServerNetworkCardCreatePayload struct {
	// The created server network card.
	ServerNetworkCard ServerNetworkCard `json:"serverNetworkCard"`
}

// Return response from serverNetworkCardDelete
type ServerNetworkCardDeletePayload struct {
	// The ID of the deleted server network card.
	DeletedID gidx.PrefixedID `json:"deletedID"`
}

// An edge in a connection.
type ServerNetworkCardEdge struct {
	// The item at the end of the edge.
	Node *ServerNetworkCard `json:"node,omitempty"`
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
}

// Ordering options for ServerNetworkCard connections
type ServerNetworkCardOrder struct {
	// The ordering direction.
	Direction OrderDirection `json:"direction"`
	// The field by which to order ServerNetworkCards.
	Field ServerNetworkCardOrderField `json:"field"`
}

type ServerNetworkCardType struct {
	// The ID of the server network card type.
	ID        gidx.PrefixedID `json:"id"`
	CreatedAt time.Time       `json:"createdAt"`
	UpdatedAt time.Time       `json:"updatedAt"`
	// The name of the vendor for the server network card type.
	Vendor string `json:"vendor"`
	// The model of the server network card type.
	Model string `json:"model"`
	// The number of ports on the server network card type.
	PortCount   int64                       `json:"portCount"`
	NetworkCard ServerNetworkCardConnection `json:"networkCard"`
}

func (ServerNetworkCardType) IsNode() {}

// The id of the object.
func (this ServerNetworkCardType) GetID() gidx.PrefixedID { return this.ID }

func (ServerNetworkCardType) IsEntity() {}

// A connection to a list of items.
type ServerNetworkCardTypeConnection struct {
	// A list of edges.
	Edges []*ServerNetworkCardTypeEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// Return response from serverNetworkCardTypeCreate
type ServerNetworkCardTypeCreatePayload struct {
	// The created server network card type.
	ServerNetworkCardType ServerNetworkCardType `json:"serverNetworkCardType"`
}

// Return response from serverNetworkCardTypeDelete
type ServerNetworkCardTypeDeletePayload struct {
	// The ID of the deleted server network card type.
	DeletedID gidx.PrefixedID `json:"deletedID"`
}

// An edge in a connection.
type ServerNetworkCardTypeEdge struct {
	// The item at the end of the edge.
	Node *ServerNetworkCardType `json:"node,omitempty"`
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
}

// Ordering options for ServerNetworkCardType connections
type ServerNetworkCardTypeOrder struct {
	// The ordering direction.
	Direction OrderDirection `json:"direction"`
	// The field by which to order ServerNetworkCardTypes.
	Field ServerNetworkCardTypeOrderField `json:"field"`
}

// Return response from serverNetworkCardTypeUpdate
type ServerNetworkCardTypeUpdatePayload struct {
	// The updated server network card type.
	ServerNetworkCardType ServerNetworkCardType `json:"serverNetworkCardType"`
}

// ServerNetworkCardTypeWhereInput is used for filtering ServerNetworkCardType objects.
// Input was generated by ent.
type ServerNetworkCardTypeWhereInput struct {
	Not *ServerNetworkCardTypeWhereInput   `json:"not,omitempty"`
	And []*ServerNetworkCardTypeWhereInput `json:"and,omitempty"`
	Or  []*ServerNetworkCardTypeWhereInput `json:"or,omitempty"`
	// id field predicates
	ID      *gidx.PrefixedID  `json:"id,omitempty"`
	IDNeq   *gidx.PrefixedID  `json:"idNEQ,omitempty"`
	IDIn    []gidx.PrefixedID `json:"idIn,omitempty"`
	IDNotIn []gidx.PrefixedID `json:"idNotIn,omitempty"`
	IDGt    *gidx.PrefixedID  `json:"idGT,omitempty"`
	IDGte   *gidx.PrefixedID  `json:"idGTE,omitempty"`
	IDLt    *gidx.PrefixedID  `json:"idLT,omitempty"`
	IDLte   *gidx.PrefixedID  `json:"idLTE,omitempty"`
	// created_at field predicates
	CreatedAt      *time.Time   `json:"createdAt,omitempty"`
	CreatedAtNeq   *time.Time   `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []*time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []*time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGt    *time.Time   `json:"createdAtGT,omitempty"`
	CreatedAtGte   *time.Time   `json:"createdAtGTE,omitempty"`
	CreatedAtLt    *time.Time   `json:"createdAtLT,omitempty"`
	CreatedAtLte   *time.Time   `json:"createdAtLTE,omitempty"`
	// updated_at field predicates
	UpdatedAt      *time.Time   `json:"updatedAt,omitempty"`
	UpdatedAtNeq   *time.Time   `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []*time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []*time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGt    *time.Time   `json:"updatedAtGT,omitempty"`
	UpdatedAtGte   *time.Time   `json:"updatedAtGTE,omitempty"`
	UpdatedAtLt    *time.Time   `json:"updatedAtLT,omitempty"`
	UpdatedAtLte   *time.Time   `json:"updatedAtLTE,omitempty"`
	// vendor field predicates
	Vendor             *string  `json:"vendor,omitempty"`
	VendorNeq          *string  `json:"vendorNEQ,omitempty"`
	VendorIn           []string `json:"vendorIn,omitempty"`
	VendorNotIn        []string `json:"vendorNotIn,omitempty"`
	VendorGt           *string  `json:"vendorGT,omitempty"`
	VendorGte          *string  `json:"vendorGTE,omitempty"`
	VendorLt           *string  `json:"vendorLT,omitempty"`
	VendorLte          *string  `json:"vendorLTE,omitempty"`
	VendorContains     *string  `json:"vendorContains,omitempty"`
	VendorHasPrefix    *string  `json:"vendorHasPrefix,omitempty"`
	VendorHasSuffix    *string  `json:"vendorHasSuffix,omitempty"`
	VendorEqualFold    *string  `json:"vendorEqualFold,omitempty"`
	VendorContainsFold *string  `json:"vendorContainsFold,omitempty"`
	// model field predicates
	Model             *string  `json:"model,omitempty"`
	ModelNeq          *string  `json:"modelNEQ,omitempty"`
	ModelIn           []string `json:"modelIn,omitempty"`
	ModelNotIn        []string `json:"modelNotIn,omitempty"`
	ModelGt           *string  `json:"modelGT,omitempty"`
	ModelGte          *string  `json:"modelGTE,omitempty"`
	ModelLt           *string  `json:"modelLT,omitempty"`
	ModelLte          *string  `json:"modelLTE,omitempty"`
	ModelContains     *string  `json:"modelContains,omitempty"`
	ModelHasPrefix    *string  `json:"modelHasPrefix,omitempty"`
	ModelHasSuffix    *string  `json:"modelHasSuffix,omitempty"`
	ModelEqualFold    *string  `json:"modelEqualFold,omitempty"`
	ModelContainsFold *string  `json:"modelContainsFold,omitempty"`
	// port_count field predicates
	PortCount      *int64  `json:"portCount,omitempty"`
	PortCountNeq   *int64  `json:"portCountNEQ,omitempty"`
	PortCountIn    []int64 `json:"portCountIn,omitempty"`
	PortCountNotIn []int64 `json:"portCountNotIn,omitempty"`
	PortCountGt    *int64  `json:"portCountGT,omitempty"`
	PortCountGte   *int64  `json:"portCountGTE,omitempty"`
	PortCountLt    *int64  `json:"portCountLT,omitempty"`
	PortCountLte   *int64  `json:"portCountLTE,omitempty"`
	// network_card edge predicates
	HasNetworkCard     *bool                          `json:"hasNetworkCard,omitempty"`
	HasNetworkCardWith []*ServerNetworkCardWhereInput `json:"hasNetworkCardWith,omitempty"`
}

// Return response from serverNetworkCardUpdate
type ServerNetworkCardUpdatePayload struct {
	// The updated server network card.
	ServerNetworkCard ServerNetworkCard `json:"serverNetworkCard"`
}

// ServerNetworkCardWhereInput is used for filtering ServerNetworkCard objects.
// Input was generated by ent.
type ServerNetworkCardWhereInput struct {
	Not *ServerNetworkCardWhereInput   `json:"not,omitempty"`
	And []*ServerNetworkCardWhereInput `json:"and,omitempty"`
	Or  []*ServerNetworkCardWhereInput `json:"or,omitempty"`
	// id field predicates
	ID      *gidx.PrefixedID  `json:"id,omitempty"`
	IDNeq   *gidx.PrefixedID  `json:"idNEQ,omitempty"`
	IDIn    []gidx.PrefixedID `json:"idIn,omitempty"`
	IDNotIn []gidx.PrefixedID `json:"idNotIn,omitempty"`
	IDGt    *gidx.PrefixedID  `json:"idGT,omitempty"`
	IDGte   *gidx.PrefixedID  `json:"idGTE,omitempty"`
	IDLt    *gidx.PrefixedID  `json:"idLT,omitempty"`
	IDLte   *gidx.PrefixedID  `json:"idLTE,omitempty"`
	// created_at field predicates
	CreatedAt      *time.Time   `json:"createdAt,omitempty"`
	CreatedAtNeq   *time.Time   `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []*time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []*time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGt    *time.Time   `json:"createdAtGT,omitempty"`
	CreatedAtGte   *time.Time   `json:"createdAtGTE,omitempty"`
	CreatedAtLt    *time.Time   `json:"createdAtLT,omitempty"`
	CreatedAtLte   *time.Time   `json:"createdAtLTE,omitempty"`
	// updated_at field predicates
	UpdatedAt      *time.Time   `json:"updatedAt,omitempty"`
	UpdatedAtNeq   *time.Time   `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []*time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []*time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGt    *time.Time   `json:"updatedAtGT,omitempty"`
	UpdatedAtGte   *time.Time   `json:"updatedAtGTE,omitempty"`
	UpdatedAtLt    *time.Time   `json:"updatedAtLT,omitempty"`
	UpdatedAtLte   *time.Time   `json:"updatedAtLTE,omitempty"`
	// serial field predicates
	Serial             *string  `json:"serial,omitempty"`
	SerialNeq          *string  `json:"serialNEQ,omitempty"`
	SerialIn           []string `json:"serialIn,omitempty"`
	SerialNotIn        []string `json:"serialNotIn,omitempty"`
	SerialGt           *string  `json:"serialGT,omitempty"`
	SerialGte          *string  `json:"serialGTE,omitempty"`
	SerialLt           *string  `json:"serialLT,omitempty"`
	SerialLte          *string  `json:"serialLTE,omitempty"`
	SerialContains     *string  `json:"serialContains,omitempty"`
	SerialHasPrefix    *string  `json:"serialHasPrefix,omitempty"`
	SerialHasSuffix    *string  `json:"serialHasSuffix,omitempty"`
	SerialEqualFold    *string  `json:"serialEqualFold,omitempty"`
	SerialContainsFold *string  `json:"serialContainsFold,omitempty"`
	// network_card_type edge predicates
	HasNetworkCardType     *bool                              `json:"hasNetworkCardType,omitempty"`
	HasNetworkCardTypeWith []*ServerNetworkCardTypeWhereInput `json:"hasNetworkCardTypeWith,omitempty"`
	// server edge predicates
	HasServer     *bool               `json:"hasServer,omitempty"`
	HasServerWith []*ServerWhereInput `json:"hasServerWith,omitempty"`
	// network_port edge predicates
	HasNetworkPort     *bool                          `json:"hasNetworkPort,omitempty"`
	HasNetworkPortWith []*ServerNetworkPortWhereInput `json:"hasNetworkPortWith,omitempty"`
}

type ServerNetworkPort struct {
	// The ID of the server network card type.
	ID        gidx.PrefixedID `json:"id"`
	CreatedAt time.Time       `json:"createdAt"`
	UpdatedAt time.Time       `json:"updatedAt"`
	// The mac address for the server network port.
	MacAddress  string            `json:"macAddress"`
	NetworkCard ServerNetworkCard `json:"networkCard"`
}

func (ServerNetworkPort) IsNode() {}

// The id of the object.
func (this ServerNetworkPort) GetID() gidx.PrefixedID { return this.ID }

func (ServerNetworkPort) IsEntity() {}

// A connection to a list of items.
type ServerNetworkPortConnection struct {
	// A list of edges.
	Edges []*ServerNetworkPortEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// Return response from serverNetworkPortCreate
type ServerNetworkPortCreatePayload struct {
	// The created server network port.
	ServerNetworkPort ServerNetworkPort `json:"serverNetworkPort"`
}

// Return response from serverNetworkPortDelete
type ServerNetworkPortDeletePayload struct {
	// The ID of the deleted server network port.
	DeletedID gidx.PrefixedID `json:"deletedID"`
}

// An edge in a connection.
type ServerNetworkPortEdge struct {
	// The item at the end of the edge.
	Node *ServerNetworkPort `json:"node,omitempty"`
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
}

// Ordering options for ServerNetworkPort connections
type ServerNetworkPortOrder struct {
	// The ordering direction.
	Direction OrderDirection `json:"direction"`
	// The field by which to order ServerNetworkPorts.
	Field ServerNetworkPortOrderField `json:"field"`
}

// Return response from serverNetworkPortUpdate
type ServerNetworkPortUpdatePayload struct {
	// The updated server network port.
	ServerNetworkPort ServerNetworkPort `json:"serverNetworkPort"`
}

// ServerNetworkPortWhereInput is used for filtering ServerNetworkPort objects.
// Input was generated by ent.
type ServerNetworkPortWhereInput struct {
	Not *ServerNetworkPortWhereInput   `json:"not,omitempty"`
	And []*ServerNetworkPortWhereInput `json:"and,omitempty"`
	Or  []*ServerNetworkPortWhereInput `json:"or,omitempty"`
	// id field predicates
	ID      *gidx.PrefixedID  `json:"id,omitempty"`
	IDNeq   *gidx.PrefixedID  `json:"idNEQ,omitempty"`
	IDIn    []gidx.PrefixedID `json:"idIn,omitempty"`
	IDNotIn []gidx.PrefixedID `json:"idNotIn,omitempty"`
	IDGt    *gidx.PrefixedID  `json:"idGT,omitempty"`
	IDGte   *gidx.PrefixedID  `json:"idGTE,omitempty"`
	IDLt    *gidx.PrefixedID  `json:"idLT,omitempty"`
	IDLte   *gidx.PrefixedID  `json:"idLTE,omitempty"`
	// created_at field predicates
	CreatedAt      *time.Time   `json:"createdAt,omitempty"`
	CreatedAtNeq   *time.Time   `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []*time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []*time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGt    *time.Time   `json:"createdAtGT,omitempty"`
	CreatedAtGte   *time.Time   `json:"createdAtGTE,omitempty"`
	CreatedAtLt    *time.Time   `json:"createdAtLT,omitempty"`
	CreatedAtLte   *time.Time   `json:"createdAtLTE,omitempty"`
	// updated_at field predicates
	UpdatedAt      *time.Time   `json:"updatedAt,omitempty"`
	UpdatedAtNeq   *time.Time   `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []*time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []*time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGt    *time.Time   `json:"updatedAtGT,omitempty"`
	UpdatedAtGte   *time.Time   `json:"updatedAtGTE,omitempty"`
	UpdatedAtLt    *time.Time   `json:"updatedAtLT,omitempty"`
	UpdatedAtLte   *time.Time   `json:"updatedAtLTE,omitempty"`
	// mac_address field predicates
	MacAddress             *string  `json:"macAddress,omitempty"`
	MacAddressNeq          *string  `json:"macAddressNEQ,omitempty"`
	MacAddressIn           []string `json:"macAddressIn,omitempty"`
	MacAddressNotIn        []string `json:"macAddressNotIn,omitempty"`
	MacAddressGt           *string  `json:"macAddressGT,omitempty"`
	MacAddressGte          *string  `json:"macAddressGTE,omitempty"`
	MacAddressLt           *string  `json:"macAddressLT,omitempty"`
	MacAddressLte          *string  `json:"macAddressLTE,omitempty"`
	MacAddressContains     *string  `json:"macAddressContains,omitempty"`
	MacAddressHasPrefix    *string  `json:"macAddressHasPrefix,omitempty"`
	MacAddressHasSuffix    *string  `json:"macAddressHasSuffix,omitempty"`
	MacAddressEqualFold    *string  `json:"macAddressEqualFold,omitempty"`
	MacAddressContainsFold *string  `json:"macAddressContainsFold,omitempty"`
	// network_card edge predicates
	HasNetworkCard     *bool                          `json:"hasNetworkCard,omitempty"`
	HasNetworkCardWith []*ServerNetworkCardWhereInput `json:"hasNetworkCardWith,omitempty"`
}

// Ordering options for Server connections
type ServerOrder struct {
	// The ordering direction.
	Direction OrderDirection `json:"direction"`
	// The field by which to order Servers.
	Field ServerOrderField `json:"field"`
}

type ServerPowerSupply struct {
	// The ID of the server power supply type.
	ID        gidx.PrefixedID `json:"id"`
	CreatedAt time.Time       `json:"createdAt"`
	UpdatedAt time.Time       `json:"updatedAt"`
	// The serial of the server power supply.
	Serial                string                `json:"serial"`
	Server                Server                `json:"server"`
	ServerPowerSupplyType ServerPowerSupplyType `json:"serverPowerSupplyType"`
}

func (ServerPowerSupply) IsNode() {}

// The id of the object.
func (this ServerPowerSupply) GetID() gidx.PrefixedID { return this.ID }

func (ServerPowerSupply) IsEntity() {}

// A connection to a list of items.
type ServerPowerSupplyConnection struct {
	// A list of edges.
	Edges []*ServerPowerSupplyEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// Return response from serverPowerSupplyCreate
type ServerPowerSupplyCreatePayload struct {
	// The created server power supply.
	ServerPowerSupply ServerPowerSupply `json:"serverPowerSupply"`
}

// Return response from serverPowerSupplyDelete
type ServerPowerSupplyDeletePayload struct {
	// The ID of the deleted server power supply.
	DeletedID gidx.PrefixedID `json:"deletedID"`
}

// An edge in a connection.
type ServerPowerSupplyEdge struct {
	// The item at the end of the edge.
	Node *ServerPowerSupply `json:"node,omitempty"`
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
}

// Ordering options for ServerPowerSupply connections
type ServerPowerSupplyOrder struct {
	// The ordering direction.
	Direction OrderDirection `json:"direction"`
	// The field by which to order ServerPowerSupplies.
	Field ServerPowerSupplyOrderField `json:"field"`
}

type ServerPowerSupplyType struct {
	// The ID of the server power supply type.
	ID        gidx.PrefixedID `json:"id"`
	CreatedAt time.Time       `json:"createdAt"`
	UpdatedAt time.Time       `json:"updatedAt"`
	// The name of the vendor for the server power supply type.
	Vendor string `json:"vendor"`
	// The mode of the server power supply type.
	Model string `json:"model"`
	// The watts of the server power supply type.
	Watts string `json:"watts"`
}

func (ServerPowerSupplyType) IsNode() {}

// The id of the object.
func (this ServerPowerSupplyType) GetID() gidx.PrefixedID { return this.ID }

func (ServerPowerSupplyType) IsEntity() {}

// A connection to a list of items.
type ServerPowerSupplyTypeConnection struct {
	// A list of edges.
	Edges []*ServerPowerSupplyTypeEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// Return response from serverPowerSupplyTypeCreate
type ServerPowerSupplyTypeCreatePayload struct {
	// The created server power supply type.
	ServerPowerSupplyType ServerPowerSupplyType `json:"serverPowerSupplyType"`
}

// Return response from serverPowerSupplyTypeDelete
type ServerPowerSupplyTypeDeletePayload struct {
	// The ID of the deleted server power supply type.
	DeletedID gidx.PrefixedID `json:"deletedID"`
}

// An edge in a connection.
type ServerPowerSupplyTypeEdge struct {
	// The item at the end of the edge.
	Node *ServerPowerSupplyType `json:"node,omitempty"`
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
}

// Ordering options for ServerPowerSupplyType connections
type ServerPowerSupplyTypeOrder struct {
	// The ordering direction.
	Direction OrderDirection `json:"direction"`
	// The field by which to order ServerPowerSupplyTypes.
	Field ServerPowerSupplyTypeOrderField `json:"field"`
}

// Return response from serverPowerSupplyTypeUpdate
type ServerPowerSupplyTypeUpdatePayload struct {
	// The updated server power supply type.
	ServerPowerSupplyType ServerPowerSupplyType `json:"serverPowerSupplyType"`
}

// ServerPowerSupplyTypeWhereInput is used for filtering ServerPowerSupplyType objects.
// Input was generated by ent.
type ServerPowerSupplyTypeWhereInput struct {
	Not *ServerPowerSupplyTypeWhereInput   `json:"not,omitempty"`
	And []*ServerPowerSupplyTypeWhereInput `json:"and,omitempty"`
	Or  []*ServerPowerSupplyTypeWhereInput `json:"or,omitempty"`
	// id field predicates
	ID      *gidx.PrefixedID  `json:"id,omitempty"`
	IDNeq   *gidx.PrefixedID  `json:"idNEQ,omitempty"`
	IDIn    []gidx.PrefixedID `json:"idIn,omitempty"`
	IDNotIn []gidx.PrefixedID `json:"idNotIn,omitempty"`
	IDGt    *gidx.PrefixedID  `json:"idGT,omitempty"`
	IDGte   *gidx.PrefixedID  `json:"idGTE,omitempty"`
	IDLt    *gidx.PrefixedID  `json:"idLT,omitempty"`
	IDLte   *gidx.PrefixedID  `json:"idLTE,omitempty"`
	// created_at field predicates
	CreatedAt      *time.Time   `json:"createdAt,omitempty"`
	CreatedAtNeq   *time.Time   `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []*time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []*time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGt    *time.Time   `json:"createdAtGT,omitempty"`
	CreatedAtGte   *time.Time   `json:"createdAtGTE,omitempty"`
	CreatedAtLt    *time.Time   `json:"createdAtLT,omitempty"`
	CreatedAtLte   *time.Time   `json:"createdAtLTE,omitempty"`
	// updated_at field predicates
	UpdatedAt      *time.Time   `json:"updatedAt,omitempty"`
	UpdatedAtNeq   *time.Time   `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []*time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []*time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGt    *time.Time   `json:"updatedAtGT,omitempty"`
	UpdatedAtGte   *time.Time   `json:"updatedAtGTE,omitempty"`
	UpdatedAtLt    *time.Time   `json:"updatedAtLT,omitempty"`
	UpdatedAtLte   *time.Time   `json:"updatedAtLTE,omitempty"`
	// vendor field predicates
	Vendor             *string  `json:"vendor,omitempty"`
	VendorNeq          *string  `json:"vendorNEQ,omitempty"`
	VendorIn           []string `json:"vendorIn,omitempty"`
	VendorNotIn        []string `json:"vendorNotIn,omitempty"`
	VendorGt           *string  `json:"vendorGT,omitempty"`
	VendorGte          *string  `json:"vendorGTE,omitempty"`
	VendorLt           *string  `json:"vendorLT,omitempty"`
	VendorLte          *string  `json:"vendorLTE,omitempty"`
	VendorContains     *string  `json:"vendorContains,omitempty"`
	VendorHasPrefix    *string  `json:"vendorHasPrefix,omitempty"`
	VendorHasSuffix    *string  `json:"vendorHasSuffix,omitempty"`
	VendorEqualFold    *string  `json:"vendorEqualFold,omitempty"`
	VendorContainsFold *string  `json:"vendorContainsFold,omitempty"`
	// model field predicates
	Model             *string  `json:"model,omitempty"`
	ModelNeq          *string  `json:"modelNEQ,omitempty"`
	ModelIn           []string `json:"modelIn,omitempty"`
	ModelNotIn        []string `json:"modelNotIn,omitempty"`
	ModelGt           *string  `json:"modelGT,omitempty"`
	ModelGte          *string  `json:"modelGTE,omitempty"`
	ModelLt           *string  `json:"modelLT,omitempty"`
	ModelLte          *string  `json:"modelLTE,omitempty"`
	ModelContains     *string  `json:"modelContains,omitempty"`
	ModelHasPrefix    *string  `json:"modelHasPrefix,omitempty"`
	ModelHasSuffix    *string  `json:"modelHasSuffix,omitempty"`
	ModelEqualFold    *string  `json:"modelEqualFold,omitempty"`
	ModelContainsFold *string  `json:"modelContainsFold,omitempty"`
	// watts field predicates
	Watts             *string  `json:"watts,omitempty"`
	WattsNeq          *string  `json:"wattsNEQ,omitempty"`
	WattsIn           []string `json:"wattsIn,omitempty"`
	WattsNotIn        []string `json:"wattsNotIn,omitempty"`
	WattsGt           *string  `json:"wattsGT,omitempty"`
	WattsGte          *string  `json:"wattsGTE,omitempty"`
	WattsLt           *string  `json:"wattsLT,omitempty"`
	WattsLte          *string  `json:"wattsLTE,omitempty"`
	WattsContains     *string  `json:"wattsContains,omitempty"`
	WattsHasPrefix    *string  `json:"wattsHasPrefix,omitempty"`
	WattsHasSuffix    *string  `json:"wattsHasSuffix,omitempty"`
	WattsEqualFold    *string  `json:"wattsEqualFold,omitempty"`
	WattsContainsFold *string  `json:"wattsContainsFold,omitempty"`
}

// Return response from serverPowerSupplyUpdate
type ServerPowerSupplyUpdatePayload struct {
	// The updated server power supply.
	ServerPowerSupply ServerPowerSupply `json:"serverPowerSupply"`
}

// ServerPowerSupplyWhereInput is used for filtering ServerPowerSupply objects.
// Input was generated by ent.
type ServerPowerSupplyWhereInput struct {
	Not *ServerPowerSupplyWhereInput   `json:"not,omitempty"`
	And []*ServerPowerSupplyWhereInput `json:"and,omitempty"`
	Or  []*ServerPowerSupplyWhereInput `json:"or,omitempty"`
	// id field predicates
	ID      *gidx.PrefixedID  `json:"id,omitempty"`
	IDNeq   *gidx.PrefixedID  `json:"idNEQ,omitempty"`
	IDIn    []gidx.PrefixedID `json:"idIn,omitempty"`
	IDNotIn []gidx.PrefixedID `json:"idNotIn,omitempty"`
	IDGt    *gidx.PrefixedID  `json:"idGT,omitempty"`
	IDGte   *gidx.PrefixedID  `json:"idGTE,omitempty"`
	IDLt    *gidx.PrefixedID  `json:"idLT,omitempty"`
	IDLte   *gidx.PrefixedID  `json:"idLTE,omitempty"`
	// created_at field predicates
	CreatedAt      *time.Time   `json:"createdAt,omitempty"`
	CreatedAtNeq   *time.Time   `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []*time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []*time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGt    *time.Time   `json:"createdAtGT,omitempty"`
	CreatedAtGte   *time.Time   `json:"createdAtGTE,omitempty"`
	CreatedAtLt    *time.Time   `json:"createdAtLT,omitempty"`
	CreatedAtLte   *time.Time   `json:"createdAtLTE,omitempty"`
	// updated_at field predicates
	UpdatedAt      *time.Time   `json:"updatedAt,omitempty"`
	UpdatedAtNeq   *time.Time   `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []*time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []*time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGt    *time.Time   `json:"updatedAtGT,omitempty"`
	UpdatedAtGte   *time.Time   `json:"updatedAtGTE,omitempty"`
	UpdatedAtLt    *time.Time   `json:"updatedAtLT,omitempty"`
	UpdatedAtLte   *time.Time   `json:"updatedAtLTE,omitempty"`
	// serial field predicates
	Serial             *string  `json:"serial,omitempty"`
	SerialNeq          *string  `json:"serialNEQ,omitempty"`
	SerialIn           []string `json:"serialIn,omitempty"`
	SerialNotIn        []string `json:"serialNotIn,omitempty"`
	SerialGt           *string  `json:"serialGT,omitempty"`
	SerialGte          *string  `json:"serialGTE,omitempty"`
	SerialLt           *string  `json:"serialLT,omitempty"`
	SerialLte          *string  `json:"serialLTE,omitempty"`
	SerialContains     *string  `json:"serialContains,omitempty"`
	SerialHasPrefix    *string  `json:"serialHasPrefix,omitempty"`
	SerialHasSuffix    *string  `json:"serialHasSuffix,omitempty"`
	SerialEqualFold    *string  `json:"serialEqualFold,omitempty"`
	SerialContainsFold *string  `json:"serialContainsFold,omitempty"`
	// server edge predicates
	HasServer     *bool               `json:"hasServer,omitempty"`
	HasServerWith []*ServerWhereInput `json:"hasServerWith,omitempty"`
	// server_power_supply_type edge predicates
	HasServerPowerSupplyType     *bool                              `json:"hasServerPowerSupplyType,omitempty"`
	HasServerPowerSupplyTypeWith []*ServerPowerSupplyTypeWhereInput `json:"hasServerPowerSupplyTypeWith,omitempty"`
}

// A connection to a list of items.
type ServerProviderConnection struct {
	// A list of edges.
	Edges []*ServerProviderEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// Return response from serverProviderCreate
type ServerProviderCreatePayload struct {
	// The created server provider.
	ServerProvider generated.Provider `json:"serverProvider"`
}

// Return response from serverProviderDelete
type ServerProviderDeletePayload struct {
	// The ID of the deleted server provider.
	DeletedID gidx.PrefixedID `json:"deletedID"`
}

// An edge in a connection.
type ServerProviderEdge struct {
	// The item at the end of the edge.
	Node *generated.Provider `json:"node,omitempty"`
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
}

// Ordering options for ServerProvider connections
type ServerProviderOrder struct {
	// The ordering direction.
	Direction OrderDirection `json:"direction"`
	// The field by which to order ServerProviders.
	Field ServerProviderOrderField `json:"field"`
}

// Return response from serverProviderUpdate
type ServerProviderUpdatePayload struct {
	// The updated server provider.
	ServerProvider generated.Provider `json:"serverProvider"`
}

// ServerProviderWhereInput is used for filtering Provider objects.
// Input was generated by ent.
type ServerProviderWhereInput struct {
	Not *ServerProviderWhereInput   `json:"not,omitempty"`
	And []*ServerProviderWhereInput `json:"and,omitempty"`
	Or  []*ServerProviderWhereInput `json:"or,omitempty"`
	// id field predicates
	ID      *gidx.PrefixedID  `json:"id,omitempty"`
	IDNeq   *gidx.PrefixedID  `json:"idNEQ,omitempty"`
	IDIn    []gidx.PrefixedID `json:"idIn,omitempty"`
	IDNotIn []gidx.PrefixedID `json:"idNotIn,omitempty"`
	IDGt    *gidx.PrefixedID  `json:"idGT,omitempty"`
	IDGte   *gidx.PrefixedID  `json:"idGTE,omitempty"`
	IDLt    *gidx.PrefixedID  `json:"idLT,omitempty"`
	IDLte   *gidx.PrefixedID  `json:"idLTE,omitempty"`
	// created_at field predicates
	CreatedAt      *time.Time   `json:"createdAt,omitempty"`
	CreatedAtNeq   *time.Time   `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []*time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []*time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGt    *time.Time   `json:"createdAtGT,omitempty"`
	CreatedAtGte   *time.Time   `json:"createdAtGTE,omitempty"`
	CreatedAtLt    *time.Time   `json:"createdAtLT,omitempty"`
	CreatedAtLte   *time.Time   `json:"createdAtLTE,omitempty"`
	// updated_at field predicates
	UpdatedAt      *time.Time   `json:"updatedAt,omitempty"`
	UpdatedAtNeq   *time.Time   `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []*time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []*time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGt    *time.Time   `json:"updatedAtGT,omitempty"`
	UpdatedAtGte   *time.Time   `json:"updatedAtGTE,omitempty"`
	UpdatedAtLt    *time.Time   `json:"updatedAtLT,omitempty"`
	UpdatedAtLte   *time.Time   `json:"updatedAtLTE,omitempty"`
	// name field predicates
	Name             *string  `json:"name,omitempty"`
	NameNeq          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGt           *string  `json:"nameGT,omitempty"`
	NameGte          *string  `json:"nameGTE,omitempty"`
	NameLt           *string  `json:"nameLT,omitempty"`
	NameLte          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`
	// servers edge predicates
	HasServers     *bool               `json:"hasServers,omitempty"`
	HasServersWith []*ServerWhereInput `json:"hasServersWith,omitempty"`
}

type ServerType struct {
	// The ID of the server type.
	ID        gidx.PrefixedID `json:"id"`
	CreatedAt time.Time       `json:"createdAt"`
	UpdatedAt time.Time       `json:"updatedAt"`
	// The name of the server type.
	Name    string           `json:"name"`
	Servers ServerConnection `json:"servers"`
}

func (ServerType) IsNode() {}

// The id of the object.
func (this ServerType) GetID() gidx.PrefixedID { return this.ID }

func (ServerType) IsEntity() {}

// A connection to a list of items.
type ServerTypeConnection struct {
	// A list of edges.
	Edges []*ServerTypeEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// Return response from serverTypeCreate
type ServerTypeCreatePayload struct {
	// The created server type.
	ServerType ServerType `json:"serverType"`
}

// Return response from serverTypeDelete
type ServerTypeDeletePayload struct {
	// The ID of the deleted server type.
	DeletedID gidx.PrefixedID `json:"deletedID"`
}

// An edge in a connection.
type ServerTypeEdge struct {
	// The item at the end of the edge.
	Node *ServerType `json:"node,omitempty"`
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
}

// Ordering options for ServerType connections
type ServerTypeOrder struct {
	// The ordering direction.
	Direction OrderDirection `json:"direction"`
	// The field by which to order ServerTypes.
	Field ServerTypeOrderField `json:"field"`
}

// Return response from serverTypeUpdate
type ServerTypeUpdatePayload struct {
	// The updated server type.
	ServerType ServerType `json:"serverType"`
}

// ServerTypeWhereInput is used for filtering ServerType objects.
// Input was generated by ent.
type ServerTypeWhereInput struct {
	Not *ServerTypeWhereInput   `json:"not,omitempty"`
	And []*ServerTypeWhereInput `json:"and,omitempty"`
	Or  []*ServerTypeWhereInput `json:"or,omitempty"`
	// id field predicates
	ID      *gidx.PrefixedID  `json:"id,omitempty"`
	IDNeq   *gidx.PrefixedID  `json:"idNEQ,omitempty"`
	IDIn    []gidx.PrefixedID `json:"idIn,omitempty"`
	IDNotIn []gidx.PrefixedID `json:"idNotIn,omitempty"`
	IDGt    *gidx.PrefixedID  `json:"idGT,omitempty"`
	IDGte   *gidx.PrefixedID  `json:"idGTE,omitempty"`
	IDLt    *gidx.PrefixedID  `json:"idLT,omitempty"`
	IDLte   *gidx.PrefixedID  `json:"idLTE,omitempty"`
	// created_at field predicates
	CreatedAt      *time.Time   `json:"createdAt,omitempty"`
	CreatedAtNeq   *time.Time   `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []*time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []*time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGt    *time.Time   `json:"createdAtGT,omitempty"`
	CreatedAtGte   *time.Time   `json:"createdAtGTE,omitempty"`
	CreatedAtLt    *time.Time   `json:"createdAtLT,omitempty"`
	CreatedAtLte   *time.Time   `json:"createdAtLTE,omitempty"`
	// updated_at field predicates
	UpdatedAt      *time.Time   `json:"updatedAt,omitempty"`
	UpdatedAtNeq   *time.Time   `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []*time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []*time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGt    *time.Time   `json:"updatedAtGT,omitempty"`
	UpdatedAtGte   *time.Time   `json:"updatedAtGTE,omitempty"`
	UpdatedAtLt    *time.Time   `json:"updatedAtLT,omitempty"`
	UpdatedAtLte   *time.Time   `json:"updatedAtLTE,omitempty"`
	// name field predicates
	Name             *string  `json:"name,omitempty"`
	NameNeq          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGt           *string  `json:"nameGT,omitempty"`
	NameGte          *string  `json:"nameGTE,omitempty"`
	NameLt           *string  `json:"nameLT,omitempty"`
	NameLte          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`
	// servers edge predicates
	HasServers     *bool               `json:"hasServers,omitempty"`
	HasServersWith []*ServerWhereInput `json:"hasServersWith,omitempty"`
}

// Return response from serverUpdate
type ServerUpdatePayload struct {
	// The updated server.
	Server Server `json:"server"`
}

// ServerWhereInput is used for filtering Server objects.
// Input was generated by ent.
type ServerWhereInput struct {
	Not *ServerWhereInput   `json:"not,omitempty"`
	And []*ServerWhereInput `json:"and,omitempty"`
	Or  []*ServerWhereInput `json:"or,omitempty"`
	// id field predicates
	ID      *gidx.PrefixedID  `json:"id,omitempty"`
	IDNeq   *gidx.PrefixedID  `json:"idNEQ,omitempty"`
	IDIn    []gidx.PrefixedID `json:"idIn,omitempty"`
	IDNotIn []gidx.PrefixedID `json:"idNotIn,omitempty"`
	IDGt    *gidx.PrefixedID  `json:"idGT,omitempty"`
	IDGte   *gidx.PrefixedID  `json:"idGTE,omitempty"`
	IDLt    *gidx.PrefixedID  `json:"idLT,omitempty"`
	IDLte   *gidx.PrefixedID  `json:"idLTE,omitempty"`
	// created_at field predicates
	CreatedAt      *time.Time   `json:"createdAt,omitempty"`
	CreatedAtNeq   *time.Time   `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []*time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []*time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGt    *time.Time   `json:"createdAtGT,omitempty"`
	CreatedAtGte   *time.Time   `json:"createdAtGTE,omitempty"`
	CreatedAtLt    *time.Time   `json:"createdAtLT,omitempty"`
	CreatedAtLte   *time.Time   `json:"createdAtLTE,omitempty"`
	// updated_at field predicates
	UpdatedAt      *time.Time   `json:"updatedAt,omitempty"`
	UpdatedAtNeq   *time.Time   `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []*time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []*time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGt    *time.Time   `json:"updatedAtGT,omitempty"`
	UpdatedAtGte   *time.Time   `json:"updatedAtGTE,omitempty"`
	UpdatedAtLt    *time.Time   `json:"updatedAtLT,omitempty"`
	UpdatedAtLte   *time.Time   `json:"updatedAtLTE,omitempty"`
	// name field predicates
	Name             *string  `json:"name,omitempty"`
	NameNeq          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGt           *string  `json:"nameGT,omitempty"`
	NameGte          *string  `json:"nameGTE,omitempty"`
	NameLt           *string  `json:"nameLT,omitempty"`
	NameLte          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`
	// description field predicates
	Description             *string  `json:"description,omitempty"`
	DescriptionNeq          *string  `json:"descriptionNEQ,omitempty"`
	DescriptionIn           []string `json:"descriptionIn,omitempty"`
	DescriptionNotIn        []string `json:"descriptionNotIn,omitempty"`
	DescriptionGt           *string  `json:"descriptionGT,omitempty"`
	DescriptionGte          *string  `json:"descriptionGTE,omitempty"`
	DescriptionLt           *string  `json:"descriptionLT,omitempty"`
	DescriptionLte          *string  `json:"descriptionLTE,omitempty"`
	DescriptionContains     *string  `json:"descriptionContains,omitempty"`
	DescriptionHasPrefix    *string  `json:"descriptionHasPrefix,omitempty"`
	DescriptionHasSuffix    *string  `json:"descriptionHasSuffix,omitempty"`
	DescriptionIsNil        *bool    `json:"descriptionIsNil,omitempty"`
	DescriptionNotNil       *bool    `json:"descriptionNotNil,omitempty"`
	DescriptionEqualFold    *string  `json:"descriptionEqualFold,omitempty"`
	DescriptionContainsFold *string  `json:"descriptionContainsFold,omitempty"`
	// provider edge predicates
	HasProvider     *bool                       `json:"hasProvider,omitempty"`
	HasProviderWith []*ServerProviderWhereInput `json:"hasProviderWith,omitempty"`
	// server_type edge predicates
	HasServerType     *bool                   `json:"hasServerType,omitempty"`
	HasServerTypeWith []*ServerTypeWhereInput `json:"hasServerTypeWith,omitempty"`
	// components edge predicates
	HasComponents     *bool                        `json:"hasComponents,omitempty"`
	HasComponentsWith []*ServerComponentWhereInput `json:"hasComponentsWith,omitempty"`
}

// Input information to update a server cpu.
type UpdateServerCPUInput struct {
	// The serial number of the server cpu.
	Serial *string `json:"serial,omitempty"`
}

// Input information to update a server cpu type.
type UpdateServerCPUTypeInput struct {
	// The name of the vendor for the server cpu type.
	Vendor *string `json:"vendor,omitempty"`
	// The mode of the server cpu type.
	Model *string `json:"model,omitempty"`
	// The clock speed of the server cpu type.
	ClockSpeed *string `json:"clockSpeed,omitempty"`
	// The number of cores for the server cpu type.
	CoreCount    *int64            `json:"coreCount,omitempty"`
	AddCPUIDs    []gidx.PrefixedID `json:"addCPUIDs,omitempty"`
	RemoveCPUIDs []gidx.PrefixedID `json:"removeCPUIDs,omitempty"`
	ClearCPU     *bool             `json:"clearCPU,omitempty"`
}

// Input information to update a server chassis.
type UpdateServerChassisInput struct {
	// The serial number of the server chassis.
	Serial *string `json:"serial,omitempty"`
}

// Input information to update a server chassis type.
type UpdateServerChassisTypeInput struct {
	// The name of the vendor for the server chassis type.
	Vendor *string `json:"vendor,omitempty"`
	// The mode of the server chassis type.
	Model *string `json:"model,omitempty"`
	// The height of the server chassis type.
	Height *string `json:"height,omitempty"`
	// Whether the server chassis type is full depth.
	IsFullDepth     *bool             `json:"isFullDepth,omitempty"`
	AddChassiIDs    []gidx.PrefixedID `json:"addChassiIDs,omitempty"`
	RemoveChassiIDs []gidx.PrefixedID `json:"removeChassiIDs,omitempty"`
	ClearChassis    *bool             `json:"clearChassis,omitempty"`
}

// Input information to update a server component.
type UpdateServerComponentInput struct {
	// The name of the server component.
	Name *string `json:"name,omitempty"`
	// The name of the vendor of the server component.
	Vendor *string `json:"vendor,omitempty"`
	// The model of the server component.
	Model *string `json:"model,omitempty"`
	// The serial number of the server component.
	Serial *string `json:"serial,omitempty"`
}

// Input information to update a server component type.
type UpdateServerComponentTypeInput struct {
	// The name of the server component type.
	Name *string `json:"name,omitempty"`
}

// Input information to update a server hard drive.
type UpdateServerHardDriveInput struct {
	// The serial for the server hard drive.
	Serial *string `json:"serial,omitempty"`
}

// Input information to update a server hard drive type.
type UpdateServerHardDriveTypeInput struct {
	// The name of the vendor for the server hard drive type.
	Vendor *string `json:"vendor,omitempty"`
	// The mode of the server chassis type.
	Model *string `json:"model,omitempty"`
	// The speed of the server hard drive type.
	Speed *string `json:"speed,omitempty"`
	// The type of the server hard drive type.
	Type *string `json:"type,omitempty"`
	// The capacity of the server hard drive type.
	Capacity           *string           `json:"capacity,omitempty"`
	AddHardDriveIDs    []gidx.PrefixedID `json:"addHardDriveIDs,omitempty"`
	RemoveHardDriveIDs []gidx.PrefixedID `json:"removeHardDriveIDs,omitempty"`
	ClearHardDrive     *bool             `json:"clearHardDrive,omitempty"`
}

// Update an existing server.
type UpdateServerInput struct {
	// The name of the server.
	Name *string `json:"name,omitempty"`
	// The description of the server.
	Description        *string           `json:"description,omitempty"`
	ClearDescription   *bool             `json:"clearDescription,omitempty"`
	AddComponentIDs    []gidx.PrefixedID `json:"addComponentIDs,omitempty"`
	RemoveComponentIDs []gidx.PrefixedID `json:"removeComponentIDs,omitempty"`
	ClearComponents    *bool             `json:"clearComponents,omitempty"`
}

// Input information to update a server memory.
type UpdateServerMemoryInput struct {
	// The serial of the server memory.
	Serial *string `json:"serial,omitempty"`
}

// Input information to update a server memory type.
type UpdateServerMemoryTypeInput struct {
	// The name of the vendor for the server chassis type.
	Vendor *string `json:"vendor,omitempty"`
	// The mode of the server chassis type.
	Model *string `json:"model,omitempty"`
	// The speed of the server memory type.
	Speed *string `json:"speed,omitempty"`
	// The size of the server memory type.
	Size            *string           `json:"size,omitempty"`
	AddMemoryIDs    []gidx.PrefixedID `json:"addMemoryIDs,omitempty"`
	RemoveMemoryIDs []gidx.PrefixedID `json:"removeMemoryIDs,omitempty"`
	ClearMemory     *bool             `json:"clearMemory,omitempty"`
}

// Input information to update a server motherboard.
type UpdateServerMotherboardInput struct {
	// The serial of the server motherboard
	Serial *string `json:"serial,omitempty"`
}

// Input information to update a server motherboard type.
type UpdateServerMotherboardTypeInput struct {
	// The name of the vendor for the server motherboard type.
	Vendor *string `json:"vendor,omitempty"`
	// The mode of the server chassis type.
	Model                *string           `json:"model,omitempty"`
	AddMotherboardIDs    []gidx.PrefixedID `json:"addMotherboardIDs,omitempty"`
	RemoveMotherboardIDs []gidx.PrefixedID `json:"removeMotherboardIDs,omitempty"`
	ClearMotherboard     *bool             `json:"clearMotherboard,omitempty"`
}

// Input information to update a server network card type.
type UpdateServerNetworkCardInput struct {
	// The serial number for the server network card.
	Serial               *string           `json:"serial,omitempty"`
	AddNetworkPortIDs    []gidx.PrefixedID `json:"addNetworkPortIDs,omitempty"`
	RemoveNetworkPortIDs []gidx.PrefixedID `json:"removeNetworkPortIDs,omitempty"`
	ClearNetworkPort     *bool             `json:"clearNetworkPort,omitempty"`
}

// Input information to update a server network card type.
type UpdateServerNetworkCardTypeInput struct {
	// The name of the vendor for the server network card type.
	Vendor *string `json:"vendor,omitempty"`
	// The model of the server network card type.
	Model *string `json:"model,omitempty"`
	// The number of ports on the server network card type.
	PortCount            *int64            `json:"portCount,omitempty"`
	AddNetworkCardIDs    []gidx.PrefixedID `json:"addNetworkCardIDs,omitempty"`
	RemoveNetworkCardIDs []gidx.PrefixedID `json:"removeNetworkCardIDs,omitempty"`
	ClearNetworkCard     *bool             `json:"clearNetworkCard,omitempty"`
}

// Input information to update a server network card type.
type UpdateServerNetworkPortInput struct {
	// The mac address for the server network port.
	MacAddress *string `json:"macAddress,omitempty"`
}

// Input information to update a server power supply.
type UpdateServerPowerSupplyInput struct {
	// The serial of the server power supply.
	Serial *string `json:"serial,omitempty"`
}

// Input information to update a server power supply type.
type UpdateServerPowerSupplyTypeInput struct {
	// The name of the vendor for the server power supply type.
	Vendor *string `json:"vendor,omitempty"`
	// The mode of the server power supply type.
	Model *string `json:"model,omitempty"`
	// The watts of the server power supply type.
	Watts *string `json:"watts,omitempty"`
}

// Input information to update a server provider.
type UpdateServerProviderInput struct {
	// The name of the server provider.
	Name *string `json:"name,omitempty"`
}

// Input information to update a server type.
type UpdateServerTypeInput struct {
	// The name of the server type.
	Name *string `json:"name,omitempty"`
}

type Service struct {
	Sdl *string `json:"sdl,omitempty"`
}

// Possible directions in which to order a list of items when provided an `orderBy` argument.
type OrderDirection string

const (
	// Specifies an ascending order for a given `orderBy` argument.
	OrderDirectionAsc OrderDirection = "ASC"
	// Specifies a descending order for a given `orderBy` argument.
	OrderDirectionDesc OrderDirection = "DESC"
)

var AllOrderDirection = []OrderDirection{
	OrderDirectionAsc,
	OrderDirectionDesc,
}

func (e OrderDirection) IsValid() bool {
	switch e {
	case OrderDirectionAsc, OrderDirectionDesc:
		return true
	}
	return false
}

func (e OrderDirection) String() string {
	return string(e)
}

func (e *OrderDirection) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderDirection(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderDirection", str)
	}
	return nil
}

func (e OrderDirection) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Properties by which ServerCPU connections can be ordered.
type ServerCPUOrderField string

const (
	ServerCPUOrderFieldID            ServerCPUOrderField = "ID"
	ServerCPUOrderFieldCreatedAt     ServerCPUOrderField = "CREATED_AT"
	ServerCPUOrderFieldUpdatedAt     ServerCPUOrderField = "UPDATED_AT"
	ServerCPUOrderFieldServerCPUType ServerCPUOrderField = "SERVER_CPU_TYPE"
	ServerCPUOrderFieldServer        ServerCPUOrderField = "SERVER"
)

var AllServerCPUOrderField = []ServerCPUOrderField{
	ServerCPUOrderFieldID,
	ServerCPUOrderFieldCreatedAt,
	ServerCPUOrderFieldUpdatedAt,
	ServerCPUOrderFieldServerCPUType,
	ServerCPUOrderFieldServer,
}

func (e ServerCPUOrderField) IsValid() bool {
	switch e {
	case ServerCPUOrderFieldID, ServerCPUOrderFieldCreatedAt, ServerCPUOrderFieldUpdatedAt, ServerCPUOrderFieldServerCPUType, ServerCPUOrderFieldServer:
		return true
	}
	return false
}

func (e ServerCPUOrderField) String() string {
	return string(e)
}

func (e *ServerCPUOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ServerCPUOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ServerCPUOrderField", str)
	}
	return nil
}

func (e ServerCPUOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Properties by which ServerCPUType connections can be ordered.
type ServerCPUTypeOrderField string

const (
	ServerCPUTypeOrderFieldID        ServerCPUTypeOrderField = "ID"
	ServerCPUTypeOrderFieldCreatedAt ServerCPUTypeOrderField = "CREATED_AT"
	ServerCPUTypeOrderFieldUpdatedAt ServerCPUTypeOrderField = "UPDATED_AT"
	ServerCPUTypeOrderFieldName      ServerCPUTypeOrderField = "NAME"
)

var AllServerCPUTypeOrderField = []ServerCPUTypeOrderField{
	ServerCPUTypeOrderFieldID,
	ServerCPUTypeOrderFieldCreatedAt,
	ServerCPUTypeOrderFieldUpdatedAt,
	ServerCPUTypeOrderFieldName,
}

func (e ServerCPUTypeOrderField) IsValid() bool {
	switch e {
	case ServerCPUTypeOrderFieldID, ServerCPUTypeOrderFieldCreatedAt, ServerCPUTypeOrderFieldUpdatedAt, ServerCPUTypeOrderFieldName:
		return true
	}
	return false
}

func (e ServerCPUTypeOrderField) String() string {
	return string(e)
}

func (e *ServerCPUTypeOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ServerCPUTypeOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ServerCPUTypeOrderField", str)
	}
	return nil
}

func (e ServerCPUTypeOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Properties by which ServerChassis connections can be ordered.
type ServerChassisOrderField string

const (
	ServerChassisOrderFieldID                ServerChassisOrderField = "ID"
	ServerChassisOrderFieldCreatedAt         ServerChassisOrderField = "CREATED_AT"
	ServerChassisOrderFieldUpdatedAt         ServerChassisOrderField = "UPDATED_AT"
	ServerChassisOrderFieldServerChassisType ServerChassisOrderField = "SERVER_CHASSIS_TYPE"
	ServerChassisOrderFieldParentChassis     ServerChassisOrderField = "PARENT_CHASSIS"
	ServerChassisOrderFieldServer            ServerChassisOrderField = "SERVER"
)

var AllServerChassisOrderField = []ServerChassisOrderField{
	ServerChassisOrderFieldID,
	ServerChassisOrderFieldCreatedAt,
	ServerChassisOrderFieldUpdatedAt,
	ServerChassisOrderFieldServerChassisType,
	ServerChassisOrderFieldParentChassis,
	ServerChassisOrderFieldServer,
}

func (e ServerChassisOrderField) IsValid() bool {
	switch e {
	case ServerChassisOrderFieldID, ServerChassisOrderFieldCreatedAt, ServerChassisOrderFieldUpdatedAt, ServerChassisOrderFieldServerChassisType, ServerChassisOrderFieldParentChassis, ServerChassisOrderFieldServer:
		return true
	}
	return false
}

func (e ServerChassisOrderField) String() string {
	return string(e)
}

func (e *ServerChassisOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ServerChassisOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ServerChassisOrderField", str)
	}
	return nil
}

func (e ServerChassisOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Properties by which ServerChassisType connections can be ordered.
type ServerChassisTypeOrderField string

const (
	ServerChassisTypeOrderFieldID                ServerChassisTypeOrderField = "ID"
	ServerChassisTypeOrderFieldCreatedAt         ServerChassisTypeOrderField = "CREATED_AT"
	ServerChassisTypeOrderFieldUpdatedAt         ServerChassisTypeOrderField = "UPDATED_AT"
	ServerChassisTypeOrderFieldName              ServerChassisTypeOrderField = "NAME"
	ServerChassisTypeOrderFieldParentChassisType ServerChassisTypeOrderField = "PARENT_CHASSIS_TYPE"
)

var AllServerChassisTypeOrderField = []ServerChassisTypeOrderField{
	ServerChassisTypeOrderFieldID,
	ServerChassisTypeOrderFieldCreatedAt,
	ServerChassisTypeOrderFieldUpdatedAt,
	ServerChassisTypeOrderFieldName,
	ServerChassisTypeOrderFieldParentChassisType,
}

func (e ServerChassisTypeOrderField) IsValid() bool {
	switch e {
	case ServerChassisTypeOrderFieldID, ServerChassisTypeOrderFieldCreatedAt, ServerChassisTypeOrderFieldUpdatedAt, ServerChassisTypeOrderFieldName, ServerChassisTypeOrderFieldParentChassisType:
		return true
	}
	return false
}

func (e ServerChassisTypeOrderField) String() string {
	return string(e)
}

func (e *ServerChassisTypeOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ServerChassisTypeOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ServerChassisTypeOrderField", str)
	}
	return nil
}

func (e ServerChassisTypeOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Properties by which ServerComponent connections can be ordered.
type ServerComponentOrderField string

const (
	ServerComponentOrderFieldID        ServerComponentOrderField = "ID"
	ServerComponentOrderFieldCreatedAt ServerComponentOrderField = "CREATED_AT"
	ServerComponentOrderFieldUpdatedAt ServerComponentOrderField = "UPDATED_AT"
	ServerComponentOrderFieldName      ServerComponentOrderField = "NAME"
	ServerComponentOrderFieldVendor    ServerComponentOrderField = "VENDOR"
	ServerComponentOrderFieldModel     ServerComponentOrderField = "MODEL"
	ServerComponentOrderFieldSerial    ServerComponentOrderField = "SERIAL"
)

var AllServerComponentOrderField = []ServerComponentOrderField{
	ServerComponentOrderFieldID,
	ServerComponentOrderFieldCreatedAt,
	ServerComponentOrderFieldUpdatedAt,
	ServerComponentOrderFieldName,
	ServerComponentOrderFieldVendor,
	ServerComponentOrderFieldModel,
	ServerComponentOrderFieldSerial,
}

func (e ServerComponentOrderField) IsValid() bool {
	switch e {
	case ServerComponentOrderFieldID, ServerComponentOrderFieldCreatedAt, ServerComponentOrderFieldUpdatedAt, ServerComponentOrderFieldName, ServerComponentOrderFieldVendor, ServerComponentOrderFieldModel, ServerComponentOrderFieldSerial:
		return true
	}
	return false
}

func (e ServerComponentOrderField) String() string {
	return string(e)
}

func (e *ServerComponentOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ServerComponentOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ServerComponentOrderField", str)
	}
	return nil
}

func (e ServerComponentOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Properties by which ServerComponentType connections can be ordered.
type ServerComponentTypeOrderField string

const (
	ServerComponentTypeOrderFieldID        ServerComponentTypeOrderField = "ID"
	ServerComponentTypeOrderFieldCreatedAt ServerComponentTypeOrderField = "CREATED_AT"
	ServerComponentTypeOrderFieldUpdatedAt ServerComponentTypeOrderField = "UPDATED_AT"
	ServerComponentTypeOrderFieldName      ServerComponentTypeOrderField = "NAME"
)

var AllServerComponentTypeOrderField = []ServerComponentTypeOrderField{
	ServerComponentTypeOrderFieldID,
	ServerComponentTypeOrderFieldCreatedAt,
	ServerComponentTypeOrderFieldUpdatedAt,
	ServerComponentTypeOrderFieldName,
}

func (e ServerComponentTypeOrderField) IsValid() bool {
	switch e {
	case ServerComponentTypeOrderFieldID, ServerComponentTypeOrderFieldCreatedAt, ServerComponentTypeOrderFieldUpdatedAt, ServerComponentTypeOrderFieldName:
		return true
	}
	return false
}

func (e ServerComponentTypeOrderField) String() string {
	return string(e)
}

func (e *ServerComponentTypeOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ServerComponentTypeOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ServerComponentTypeOrderField", str)
	}
	return nil
}

func (e ServerComponentTypeOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Properties by which ServerHardDrive connections can be ordered.
type ServerHardDriveOrderField string

const (
	ServerHardDriveOrderFieldID                  ServerHardDriveOrderField = "ID"
	ServerHardDriveOrderFieldCreatedAt           ServerHardDriveOrderField = "CREATED_AT"
	ServerHardDriveOrderFieldUpdatedAt           ServerHardDriveOrderField = "UPDATED_AT"
	ServerHardDriveOrderFieldName                ServerHardDriveOrderField = "NAME"
	ServerHardDriveOrderFieldServer              ServerHardDriveOrderField = "SERVER"
	ServerHardDriveOrderFieldServerHardDriveType ServerHardDriveOrderField = "SERVER_HARD_DRIVE_TYPE"
)

var AllServerHardDriveOrderField = []ServerHardDriveOrderField{
	ServerHardDriveOrderFieldID,
	ServerHardDriveOrderFieldCreatedAt,
	ServerHardDriveOrderFieldUpdatedAt,
	ServerHardDriveOrderFieldName,
	ServerHardDriveOrderFieldServer,
	ServerHardDriveOrderFieldServerHardDriveType,
}

func (e ServerHardDriveOrderField) IsValid() bool {
	switch e {
	case ServerHardDriveOrderFieldID, ServerHardDriveOrderFieldCreatedAt, ServerHardDriveOrderFieldUpdatedAt, ServerHardDriveOrderFieldName, ServerHardDriveOrderFieldServer, ServerHardDriveOrderFieldServerHardDriveType:
		return true
	}
	return false
}

func (e ServerHardDriveOrderField) String() string {
	return string(e)
}

func (e *ServerHardDriveOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ServerHardDriveOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ServerHardDriveOrderField", str)
	}
	return nil
}

func (e ServerHardDriveOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Properties by which ServerHardDriveType connections can be ordered.
type ServerHardDriveTypeOrderField string

const (
	ServerHardDriveTypeOrderFieldID        ServerHardDriveTypeOrderField = "ID"
	ServerHardDriveTypeOrderFieldCreatedAt ServerHardDriveTypeOrderField = "CREATED_AT"
	ServerHardDriveTypeOrderFieldUpdatedAt ServerHardDriveTypeOrderField = "UPDATED_AT"
	ServerHardDriveTypeOrderFieldName      ServerHardDriveTypeOrderField = "NAME"
)

var AllServerHardDriveTypeOrderField = []ServerHardDriveTypeOrderField{
	ServerHardDriveTypeOrderFieldID,
	ServerHardDriveTypeOrderFieldCreatedAt,
	ServerHardDriveTypeOrderFieldUpdatedAt,
	ServerHardDriveTypeOrderFieldName,
}

func (e ServerHardDriveTypeOrderField) IsValid() bool {
	switch e {
	case ServerHardDriveTypeOrderFieldID, ServerHardDriveTypeOrderFieldCreatedAt, ServerHardDriveTypeOrderFieldUpdatedAt, ServerHardDriveTypeOrderFieldName:
		return true
	}
	return false
}

func (e ServerHardDriveTypeOrderField) String() string {
	return string(e)
}

func (e *ServerHardDriveTypeOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ServerHardDriveTypeOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ServerHardDriveTypeOrderField", str)
	}
	return nil
}

func (e ServerHardDriveTypeOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Properties by which ServerMemory connections can be ordered.
type ServerMemoryOrderField string

const (
	ServerMemoryOrderFieldID               ServerMemoryOrderField = "ID"
	ServerMemoryOrderFieldCreatedAt        ServerMemoryOrderField = "CREATED_AT"
	ServerMemoryOrderFieldUpdatedAt        ServerMemoryOrderField = "UPDATED_AT"
	ServerMemoryOrderFieldServer           ServerMemoryOrderField = "SERVER"
	ServerMemoryOrderFieldServerMemoryType ServerMemoryOrderField = "SERVER_MEMORY_TYPE"
)

var AllServerMemoryOrderField = []ServerMemoryOrderField{
	ServerMemoryOrderFieldID,
	ServerMemoryOrderFieldCreatedAt,
	ServerMemoryOrderFieldUpdatedAt,
	ServerMemoryOrderFieldServer,
	ServerMemoryOrderFieldServerMemoryType,
}

func (e ServerMemoryOrderField) IsValid() bool {
	switch e {
	case ServerMemoryOrderFieldID, ServerMemoryOrderFieldCreatedAt, ServerMemoryOrderFieldUpdatedAt, ServerMemoryOrderFieldServer, ServerMemoryOrderFieldServerMemoryType:
		return true
	}
	return false
}

func (e ServerMemoryOrderField) String() string {
	return string(e)
}

func (e *ServerMemoryOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ServerMemoryOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ServerMemoryOrderField", str)
	}
	return nil
}

func (e ServerMemoryOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Properties by which ServerMemoryType connections can be ordered.
type ServerMemoryTypeOrderField string

const (
	ServerMemoryTypeOrderFieldID        ServerMemoryTypeOrderField = "ID"
	ServerMemoryTypeOrderFieldCreatedAt ServerMemoryTypeOrderField = "CREATED_AT"
	ServerMemoryTypeOrderFieldUpdatedAt ServerMemoryTypeOrderField = "UPDATED_AT"
	ServerMemoryTypeOrderFieldName      ServerMemoryTypeOrderField = "NAME"
)

var AllServerMemoryTypeOrderField = []ServerMemoryTypeOrderField{
	ServerMemoryTypeOrderFieldID,
	ServerMemoryTypeOrderFieldCreatedAt,
	ServerMemoryTypeOrderFieldUpdatedAt,
	ServerMemoryTypeOrderFieldName,
}

func (e ServerMemoryTypeOrderField) IsValid() bool {
	switch e {
	case ServerMemoryTypeOrderFieldID, ServerMemoryTypeOrderFieldCreatedAt, ServerMemoryTypeOrderFieldUpdatedAt, ServerMemoryTypeOrderFieldName:
		return true
	}
	return false
}

func (e ServerMemoryTypeOrderField) String() string {
	return string(e)
}

func (e *ServerMemoryTypeOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ServerMemoryTypeOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ServerMemoryTypeOrderField", str)
	}
	return nil
}

func (e ServerMemoryTypeOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Properties by which ServerMotherboard connections can be ordered.
type ServerMotherboardOrderField string

const (
	ServerMotherboardOrderFieldID                    ServerMotherboardOrderField = "ID"
	ServerMotherboardOrderFieldCreatedAt             ServerMotherboardOrderField = "CREATED_AT"
	ServerMotherboardOrderFieldUpdatedAt             ServerMotherboardOrderField = "UPDATED_AT"
	ServerMotherboardOrderFieldServerMotherboardType ServerMotherboardOrderField = "SERVER_MOTHERBOARD_TYPE"
	ServerMotherboardOrderFieldServer                ServerMotherboardOrderField = "SERVER"
)

var AllServerMotherboardOrderField = []ServerMotherboardOrderField{
	ServerMotherboardOrderFieldID,
	ServerMotherboardOrderFieldCreatedAt,
	ServerMotherboardOrderFieldUpdatedAt,
	ServerMotherboardOrderFieldServerMotherboardType,
	ServerMotherboardOrderFieldServer,
}

func (e ServerMotherboardOrderField) IsValid() bool {
	switch e {
	case ServerMotherboardOrderFieldID, ServerMotherboardOrderFieldCreatedAt, ServerMotherboardOrderFieldUpdatedAt, ServerMotherboardOrderFieldServerMotherboardType, ServerMotherboardOrderFieldServer:
		return true
	}
	return false
}

func (e ServerMotherboardOrderField) String() string {
	return string(e)
}

func (e *ServerMotherboardOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ServerMotherboardOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ServerMotherboardOrderField", str)
	}
	return nil
}

func (e ServerMotherboardOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Properties by which ServerMotherboardType connections can be ordered.
type ServerMotherboardTypeOrderField string

const (
	ServerMotherboardTypeOrderFieldID        ServerMotherboardTypeOrderField = "ID"
	ServerMotherboardTypeOrderFieldCreatedAt ServerMotherboardTypeOrderField = "CREATED_AT"
	ServerMotherboardTypeOrderFieldUpdatedAt ServerMotherboardTypeOrderField = "UPDATED_AT"
	ServerMotherboardTypeOrderFieldName      ServerMotherboardTypeOrderField = "NAME"
)

var AllServerMotherboardTypeOrderField = []ServerMotherboardTypeOrderField{
	ServerMotherboardTypeOrderFieldID,
	ServerMotherboardTypeOrderFieldCreatedAt,
	ServerMotherboardTypeOrderFieldUpdatedAt,
	ServerMotherboardTypeOrderFieldName,
}

func (e ServerMotherboardTypeOrderField) IsValid() bool {
	switch e {
	case ServerMotherboardTypeOrderFieldID, ServerMotherboardTypeOrderFieldCreatedAt, ServerMotherboardTypeOrderFieldUpdatedAt, ServerMotherboardTypeOrderFieldName:
		return true
	}
	return false
}

func (e ServerMotherboardTypeOrderField) String() string {
	return string(e)
}

func (e *ServerMotherboardTypeOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ServerMotherboardTypeOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ServerMotherboardTypeOrderField", str)
	}
	return nil
}

func (e ServerMotherboardTypeOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Properties by which ServerNetworkCard connections can be ordered.
type ServerNetworkCardOrderField string

const (
	ServerNetworkCardOrderFieldID                    ServerNetworkCardOrderField = "ID"
	ServerNetworkCardOrderFieldCreatedAt             ServerNetworkCardOrderField = "CREATED_AT"
	ServerNetworkCardOrderFieldUpdatedAt             ServerNetworkCardOrderField = "UPDATED_AT"
	ServerNetworkCardOrderFieldSerial                ServerNetworkCardOrderField = "SERIAL"
	ServerNetworkCardOrderFieldServer                ServerNetworkCardOrderField = "SERVER"
	ServerNetworkCardOrderFieldServerNetworkCardType ServerNetworkCardOrderField = "SERVER_NETWORK_CARD_TYPE"
)

var AllServerNetworkCardOrderField = []ServerNetworkCardOrderField{
	ServerNetworkCardOrderFieldID,
	ServerNetworkCardOrderFieldCreatedAt,
	ServerNetworkCardOrderFieldUpdatedAt,
	ServerNetworkCardOrderFieldSerial,
	ServerNetworkCardOrderFieldServer,
	ServerNetworkCardOrderFieldServerNetworkCardType,
}

func (e ServerNetworkCardOrderField) IsValid() bool {
	switch e {
	case ServerNetworkCardOrderFieldID, ServerNetworkCardOrderFieldCreatedAt, ServerNetworkCardOrderFieldUpdatedAt, ServerNetworkCardOrderFieldSerial, ServerNetworkCardOrderFieldServer, ServerNetworkCardOrderFieldServerNetworkCardType:
		return true
	}
	return false
}

func (e ServerNetworkCardOrderField) String() string {
	return string(e)
}

func (e *ServerNetworkCardOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ServerNetworkCardOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ServerNetworkCardOrderField", str)
	}
	return nil
}

func (e ServerNetworkCardOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Properties by which ServerNetworkCardType connections can be ordered.
type ServerNetworkCardTypeOrderField string

const (
	ServerNetworkCardTypeOrderFieldID        ServerNetworkCardTypeOrderField = "ID"
	ServerNetworkCardTypeOrderFieldCreatedAt ServerNetworkCardTypeOrderField = "CREATED_AT"
	ServerNetworkCardTypeOrderFieldUpdatedAt ServerNetworkCardTypeOrderField = "UPDATED_AT"
	ServerNetworkCardTypeOrderFieldName      ServerNetworkCardTypeOrderField = "NAME"
)

var AllServerNetworkCardTypeOrderField = []ServerNetworkCardTypeOrderField{
	ServerNetworkCardTypeOrderFieldID,
	ServerNetworkCardTypeOrderFieldCreatedAt,
	ServerNetworkCardTypeOrderFieldUpdatedAt,
	ServerNetworkCardTypeOrderFieldName,
}

func (e ServerNetworkCardTypeOrderField) IsValid() bool {
	switch e {
	case ServerNetworkCardTypeOrderFieldID, ServerNetworkCardTypeOrderFieldCreatedAt, ServerNetworkCardTypeOrderFieldUpdatedAt, ServerNetworkCardTypeOrderFieldName:
		return true
	}
	return false
}

func (e ServerNetworkCardTypeOrderField) String() string {
	return string(e)
}

func (e *ServerNetworkCardTypeOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ServerNetworkCardTypeOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ServerNetworkCardTypeOrderField", str)
	}
	return nil
}

func (e ServerNetworkCardTypeOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Properties by which ServerNetworkPort connections can be ordered.
type ServerNetworkPortOrderField string

const (
	ServerNetworkPortOrderFieldID          ServerNetworkPortOrderField = "ID"
	ServerNetworkPortOrderFieldCreatedAt   ServerNetworkPortOrderField = "CREATED_AT"
	ServerNetworkPortOrderFieldUpdatedAt   ServerNetworkPortOrderField = "UPDATED_AT"
	ServerNetworkPortOrderFieldMacAddress  ServerNetworkPortOrderField = "MAC_ADDRESS"
	ServerNetworkPortOrderFieldNetworkCard ServerNetworkPortOrderField = "NETWORK_CARD"
)

var AllServerNetworkPortOrderField = []ServerNetworkPortOrderField{
	ServerNetworkPortOrderFieldID,
	ServerNetworkPortOrderFieldCreatedAt,
	ServerNetworkPortOrderFieldUpdatedAt,
	ServerNetworkPortOrderFieldMacAddress,
	ServerNetworkPortOrderFieldNetworkCard,
}

func (e ServerNetworkPortOrderField) IsValid() bool {
	switch e {
	case ServerNetworkPortOrderFieldID, ServerNetworkPortOrderFieldCreatedAt, ServerNetworkPortOrderFieldUpdatedAt, ServerNetworkPortOrderFieldMacAddress, ServerNetworkPortOrderFieldNetworkCard:
		return true
	}
	return false
}

func (e ServerNetworkPortOrderField) String() string {
	return string(e)
}

func (e *ServerNetworkPortOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ServerNetworkPortOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ServerNetworkPortOrderField", str)
	}
	return nil
}

func (e ServerNetworkPortOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Properties by which Server connections can be ordered.
type ServerOrderField string

const (
	ServerOrderFieldID          ServerOrderField = "ID"
	ServerOrderFieldCreatedAt   ServerOrderField = "CREATED_AT"
	ServerOrderFieldUpdatedAt   ServerOrderField = "UPDATED_AT"
	ServerOrderFieldName        ServerOrderField = "NAME"
	ServerOrderFieldDescription ServerOrderField = "DESCRIPTION"
	ServerOrderFieldOwner       ServerOrderField = "OWNER"
	ServerOrderFieldServerType  ServerOrderField = "SERVER_TYPE"
)

var AllServerOrderField = []ServerOrderField{
	ServerOrderFieldID,
	ServerOrderFieldCreatedAt,
	ServerOrderFieldUpdatedAt,
	ServerOrderFieldName,
	ServerOrderFieldDescription,
	ServerOrderFieldOwner,
	ServerOrderFieldServerType,
}

func (e ServerOrderField) IsValid() bool {
	switch e {
	case ServerOrderFieldID, ServerOrderFieldCreatedAt, ServerOrderFieldUpdatedAt, ServerOrderFieldName, ServerOrderFieldDescription, ServerOrderFieldOwner, ServerOrderFieldServerType:
		return true
	}
	return false
}

func (e ServerOrderField) String() string {
	return string(e)
}

func (e *ServerOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ServerOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ServerOrderField", str)
	}
	return nil
}

func (e ServerOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Properties by which ServerPowerSupply connections can be ordered.
type ServerPowerSupplyOrderField string

const (
	ServerPowerSupplyOrderFieldID            ServerPowerSupplyOrderField = "ID"
	ServerPowerSupplyOrderFieldCreatedAt     ServerPowerSupplyOrderField = "CREATED_AT"
	ServerPowerSupplyOrderFieldUpdatedAt     ServerPowerSupplyOrderField = "UPDATED_AT"
	ServerPowerSupplyOrderFieldParentChassis ServerPowerSupplyOrderField = "PARENT_CHASSIS"
	ServerPowerSupplyOrderFieldServer        ServerPowerSupplyOrderField = "SERVER"
)

var AllServerPowerSupplyOrderField = []ServerPowerSupplyOrderField{
	ServerPowerSupplyOrderFieldID,
	ServerPowerSupplyOrderFieldCreatedAt,
	ServerPowerSupplyOrderFieldUpdatedAt,
	ServerPowerSupplyOrderFieldParentChassis,
	ServerPowerSupplyOrderFieldServer,
}

func (e ServerPowerSupplyOrderField) IsValid() bool {
	switch e {
	case ServerPowerSupplyOrderFieldID, ServerPowerSupplyOrderFieldCreatedAt, ServerPowerSupplyOrderFieldUpdatedAt, ServerPowerSupplyOrderFieldParentChassis, ServerPowerSupplyOrderFieldServer:
		return true
	}
	return false
}

func (e ServerPowerSupplyOrderField) String() string {
	return string(e)
}

func (e *ServerPowerSupplyOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ServerPowerSupplyOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ServerPowerSupplyOrderField", str)
	}
	return nil
}

func (e ServerPowerSupplyOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Properties by which ServerPowerSupplyType connections can be ordered.
type ServerPowerSupplyTypeOrderField string

const (
	ServerPowerSupplyTypeOrderFieldID        ServerPowerSupplyTypeOrderField = "ID"
	ServerPowerSupplyTypeOrderFieldCreatedAt ServerPowerSupplyTypeOrderField = "CREATED_AT"
	ServerPowerSupplyTypeOrderFieldUpdatedAt ServerPowerSupplyTypeOrderField = "UPDATED_AT"
	ServerPowerSupplyTypeOrderFieldName      ServerPowerSupplyTypeOrderField = "NAME"
)

var AllServerPowerSupplyTypeOrderField = []ServerPowerSupplyTypeOrderField{
	ServerPowerSupplyTypeOrderFieldID,
	ServerPowerSupplyTypeOrderFieldCreatedAt,
	ServerPowerSupplyTypeOrderFieldUpdatedAt,
	ServerPowerSupplyTypeOrderFieldName,
}

func (e ServerPowerSupplyTypeOrderField) IsValid() bool {
	switch e {
	case ServerPowerSupplyTypeOrderFieldID, ServerPowerSupplyTypeOrderFieldCreatedAt, ServerPowerSupplyTypeOrderFieldUpdatedAt, ServerPowerSupplyTypeOrderFieldName:
		return true
	}
	return false
}

func (e ServerPowerSupplyTypeOrderField) String() string {
	return string(e)
}

func (e *ServerPowerSupplyTypeOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ServerPowerSupplyTypeOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ServerPowerSupplyTypeOrderField", str)
	}
	return nil
}

func (e ServerPowerSupplyTypeOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Properties by which ServerProvider connections can be ordered.
type ServerProviderOrderField string

const (
	ServerProviderOrderFieldID               ServerProviderOrderField = "ID"
	ServerProviderOrderFieldCreatedAt        ServerProviderOrderField = "CREATED_AT"
	ServerProviderOrderFieldUpdatedAt        ServerProviderOrderField = "UPDATED_AT"
	ServerProviderOrderFieldName             ServerProviderOrderField = "NAME"
	ServerProviderOrderFieldResourceProvider ServerProviderOrderField = "RESOURCE_PROVIDER"
)

var AllServerProviderOrderField = []ServerProviderOrderField{
	ServerProviderOrderFieldID,
	ServerProviderOrderFieldCreatedAt,
	ServerProviderOrderFieldUpdatedAt,
	ServerProviderOrderFieldName,
	ServerProviderOrderFieldResourceProvider,
}

func (e ServerProviderOrderField) IsValid() bool {
	switch e {
	case ServerProviderOrderFieldID, ServerProviderOrderFieldCreatedAt, ServerProviderOrderFieldUpdatedAt, ServerProviderOrderFieldName, ServerProviderOrderFieldResourceProvider:
		return true
	}
	return false
}

func (e ServerProviderOrderField) String() string {
	return string(e)
}

func (e *ServerProviderOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ServerProviderOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ServerProviderOrderField", str)
	}
	return nil
}

func (e ServerProviderOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Properties by which ServerType connections can be ordered.
type ServerTypeOrderField string

const (
	ServerTypeOrderFieldID        ServerTypeOrderField = "ID"
	ServerTypeOrderFieldCreatedAt ServerTypeOrderField = "CREATED_AT"
	ServerTypeOrderFieldUpdatedAt ServerTypeOrderField = "UPDATED_AT"
	ServerTypeOrderFieldName      ServerTypeOrderField = "NAME"
	ServerTypeOrderFieldOwner     ServerTypeOrderField = "OWNER"
)

var AllServerTypeOrderField = []ServerTypeOrderField{
	ServerTypeOrderFieldID,
	ServerTypeOrderFieldCreatedAt,
	ServerTypeOrderFieldUpdatedAt,
	ServerTypeOrderFieldName,
	ServerTypeOrderFieldOwner,
}

func (e ServerTypeOrderField) IsValid() bool {
	switch e {
	case ServerTypeOrderFieldID, ServerTypeOrderFieldCreatedAt, ServerTypeOrderFieldUpdatedAt, ServerTypeOrderFieldName, ServerTypeOrderFieldOwner:
		return true
	}
	return false
}

func (e ServerTypeOrderField) String() string {
	return string(e)
}

func (e *ServerTypeOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ServerTypeOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ServerTypeOrderField", str)
	}
	return nil
}

func (e ServerTypeOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
