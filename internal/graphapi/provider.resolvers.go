package graphapi

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.34

import (
	"context"
	"database/sql"

	"go.infratographer.com/server-api/internal/ent/generated"
	"go.infratographer.com/server-api/internal/ent/generated/predicate"
	"go.infratographer.com/server-api/internal/ent/generated/server"
	"go.infratographer.com/x/gidx"
)

// ServerProviderCreate is the resolver for the serverProviderCreate field.
func (r *mutationResolver) ServerProviderCreate(ctx context.Context, input generated.CreateServerProviderInput) (*ServerProviderCreatePayload, error) {
	prv, err := r.client.Provider.Create().SetInput(input).Save(ctx)
	if err != nil {
		return nil, err
	}

	return &ServerProviderCreatePayload{ServerProvider: prv}, nil
}

// ServerProviderUpdate is the resolver for the serverProviderUpdate field.
func (r *mutationResolver) ServerProviderUpdate(ctx context.Context, id gidx.PrefixedID, input generated.UpdateServerProviderInput) (*ServerProviderUpdatePayload, error) {
	// TODO: check permissions

	prv, err := r.client.Provider.Get(ctx, id)
	if err != nil {
		return nil, err
	}

	prv, err = prv.Update().SetInput(input).Save(ctx)
	if err != nil {
		return nil, err
	}

	return &ServerProviderUpdatePayload{ServerProvider: prv}, nil
}

// ServerProviderDelete is the resolver for the serverProviderDelete field.
func (r *mutationResolver) ServerProviderDelete(ctx context.Context, id gidx.PrefixedID) (*ServerProviderDeletePayload, error) {
	//TODO: check permissions

	tx, err := r.client.BeginTx(ctx, &sql.TxOptions{})
	if err != nil {
		return nil, err
	}

	// cleanup servers associated with provider
	servers, err := tx.Server.Query().Where(predicate.Server(server.ProviderIDEQ(id))).All(ctx)
	if err != nil {
		r.logger.Errorw("failed to query servers", "error", err)
		if rerr := tx.Rollback(); rerr != nil {
			r.logger.Errorw("failed to rollback transaction", "error", rerr, "stage", "query servers")
		}
		return nil, err
	}

	for _, s := range servers {
		if err = tx.Server.DeleteOne(s).Exec(ctx); err != nil {
			r.logger.Errorw("failed to delete server", "port", s.ID, "error", err)
			if rerr := tx.Rollback(); rerr != nil {
				r.logger.Errorw("failed to rollback transaction", "error", rerr, "stage", "delete port")
			}
		}
	}

	if err := tx.Provider.DeleteOneID(id).Exec(ctx); err != nil {
		r.logger.Errorw("failed to commit transaction", "error", err)
		if rerr := tx.Rollback(); rerr != nil {
			r.logger.Errorw("failed to rollback transaction", "error", rerr, "stage", "delete server")
		}
		return nil, err
	}

	if err := tx.Commit(); err != nil {
		r.logger.Errorw("failed to commit transaction", "error", err)
		if rerr := tx.Rollback(); rerr != nil {
			r.logger.Errorw("failed to rollback transaction", "error", rerr, "stage", "commit transaction")
		}
		return nil, err
	}

	return &ServerProviderDeletePayload{DeletedID: id}, nil
}

// ServerProvider is the resolver for the serverProvider field.
func (r *queryResolver) ServerProvider(ctx context.Context, id gidx.PrefixedID) (*generated.Provider, error) {
	//TODO: check permissions

	return r.client.Provider.Get(ctx, id)
}
