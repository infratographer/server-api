// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graphapi

import (
	"context"
	"errors"
	"fmt"
	"strings"
	"sync"

	"github.com/99designs/gqlgen/plugin/federation/fedruntime"
)

var (
	ErrUnknownType  = errors.New("unknown type")
	ErrTypeNotFound = errors.New("type not found")
)

func (ec *executionContext) __resolve__service(ctx context.Context) (fedruntime.Service, error) {
	if ec.DisableIntrospection {
		return fedruntime.Service{}, errors.New("federated introspection disabled")
	}

	var sdl []string

	for _, src := range sources {
		if src.BuiltIn {
			continue
		}
		sdl = append(sdl, src.Input)
	}

	return fedruntime.Service{
		SDL: strings.Join(sdl, "\n"),
	}, nil
}

func (ec *executionContext) __resolve_entities(ctx context.Context, representations []map[string]interface{}) []fedruntime.Entity {
	list := make([]fedruntime.Entity, len(representations))

	repsMap := map[string]struct {
		i []int
		r []map[string]interface{}
	}{}

	// We group entities by typename so that we can parallelize their resolution.
	// This is particularly helpful when there are entity groups in multi mode.
	buildRepresentationGroups := func(reps []map[string]interface{}) {
		for i, rep := range reps {
			typeName, ok := rep["__typename"].(string)
			if !ok {
				// If there is no __typename, we just skip the representation;
				// we just won't be resolving these unknown types.
				ec.Error(ctx, errors.New("__typename must be an existing string"))
				continue
			}

			_r := repsMap[typeName]
			_r.i = append(_r.i, i)
			_r.r = append(_r.r, rep)
			repsMap[typeName] = _r
		}
	}

	isMulti := func(typeName string) bool {
		switch typeName {
		default:
			return false
		}
	}

	resolveEntity := func(ctx context.Context, typeName string, rep map[string]interface{}, idx []int, i int) (err error) {
		// we need to do our own panic handling, because we may be called in a
		// goroutine, where the usual panic handling can't catch us
		defer func() {
			if r := recover(); r != nil {
				err = ec.Recover(ctx, r)
			}
		}()

		switch typeName {
		case "Server":
			resolverName, err := entityResolverNameForServer(ctx, rep)
			if err != nil {
				return fmt.Errorf(`finding resolver for Entity "Server": %w`, err)
			}
			switch resolverName {

			case "findServerByID":
				id0, err := ec.unmarshalNID2goᚗinfratographerᚗcomᚋxᚋgidxᚐPrefixedID(ctx, rep["id"])
				if err != nil {
					return fmt.Errorf(`unmarshalling param 0 for findServerByID(): %w`, err)
				}
				entity, err := ec.resolvers.Entity().FindServerByID(ctx, id0)
				if err != nil {
					return fmt.Errorf(`resolving Entity "Server": %w`, err)
				}

				list[idx[i]] = entity
				return nil
			}
		case "ServerCPU":
			resolverName, err := entityResolverNameForServerCPU(ctx, rep)
			if err != nil {
				return fmt.Errorf(`finding resolver for Entity "ServerCPU": %w`, err)
			}
			switch resolverName {

			case "findServerCPUByID":
				id0, err := ec.unmarshalNID2goᚗinfratographerᚗcomᚋxᚋgidxᚐPrefixedID(ctx, rep["id"])
				if err != nil {
					return fmt.Errorf(`unmarshalling param 0 for findServerCPUByID(): %w`, err)
				}
				entity, err := ec.resolvers.Entity().FindServerCPUByID(ctx, id0)
				if err != nil {
					return fmt.Errorf(`resolving Entity "ServerCPU": %w`, err)
				}

				list[idx[i]] = entity
				return nil
			}
		case "ServerCPUType":
			resolverName, err := entityResolverNameForServerCPUType(ctx, rep)
			if err != nil {
				return fmt.Errorf(`finding resolver for Entity "ServerCPUType": %w`, err)
			}
			switch resolverName {

			case "findServerCPUTypeByID":
				id0, err := ec.unmarshalNID2goᚗinfratographerᚗcomᚋxᚋgidxᚐPrefixedID(ctx, rep["id"])
				if err != nil {
					return fmt.Errorf(`unmarshalling param 0 for findServerCPUTypeByID(): %w`, err)
				}
				entity, err := ec.resolvers.Entity().FindServerCPUTypeByID(ctx, id0)
				if err != nil {
					return fmt.Errorf(`resolving Entity "ServerCPUType": %w`, err)
				}

				list[idx[i]] = entity
				return nil
			}
		case "ServerChassis":
			resolverName, err := entityResolverNameForServerChassis(ctx, rep)
			if err != nil {
				return fmt.Errorf(`finding resolver for Entity "ServerChassis": %w`, err)
			}
			switch resolverName {

			case "findServerChassisByID":
				id0, err := ec.unmarshalNID2goᚗinfratographerᚗcomᚋxᚋgidxᚐPrefixedID(ctx, rep["id"])
				if err != nil {
					return fmt.Errorf(`unmarshalling param 0 for findServerChassisByID(): %w`, err)
				}
				entity, err := ec.resolvers.Entity().FindServerChassisByID(ctx, id0)
				if err != nil {
					return fmt.Errorf(`resolving Entity "ServerChassis": %w`, err)
				}

				list[idx[i]] = entity
				return nil
			}
		case "ServerChassisType":
			resolverName, err := entityResolverNameForServerChassisType(ctx, rep)
			if err != nil {
				return fmt.Errorf(`finding resolver for Entity "ServerChassisType": %w`, err)
			}
			switch resolverName {

			case "findServerChassisTypeByID":
				id0, err := ec.unmarshalNID2goᚗinfratographerᚗcomᚋxᚋgidxᚐPrefixedID(ctx, rep["id"])
				if err != nil {
					return fmt.Errorf(`unmarshalling param 0 for findServerChassisTypeByID(): %w`, err)
				}
				entity, err := ec.resolvers.Entity().FindServerChassisTypeByID(ctx, id0)
				if err != nil {
					return fmt.Errorf(`resolving Entity "ServerChassisType": %w`, err)
				}

				list[idx[i]] = entity
				return nil
			}
		case "ServerComponent":
			resolverName, err := entityResolverNameForServerComponent(ctx, rep)
			if err != nil {
				return fmt.Errorf(`finding resolver for Entity "ServerComponent": %w`, err)
			}
			switch resolverName {

			case "findServerComponentByID":
				id0, err := ec.unmarshalNID2goᚗinfratographerᚗcomᚋxᚋgidxᚐPrefixedID(ctx, rep["id"])
				if err != nil {
					return fmt.Errorf(`unmarshalling param 0 for findServerComponentByID(): %w`, err)
				}
				entity, err := ec.resolvers.Entity().FindServerComponentByID(ctx, id0)
				if err != nil {
					return fmt.Errorf(`resolving Entity "ServerComponent": %w`, err)
				}

				list[idx[i]] = entity
				return nil
			}
		case "ServerComponentType":
			resolverName, err := entityResolverNameForServerComponentType(ctx, rep)
			if err != nil {
				return fmt.Errorf(`finding resolver for Entity "ServerComponentType": %w`, err)
			}
			switch resolverName {

			case "findServerComponentTypeByID":
				id0, err := ec.unmarshalNID2goᚗinfratographerᚗcomᚋxᚋgidxᚐPrefixedID(ctx, rep["id"])
				if err != nil {
					return fmt.Errorf(`unmarshalling param 0 for findServerComponentTypeByID(): %w`, err)
				}
				entity, err := ec.resolvers.Entity().FindServerComponentTypeByID(ctx, id0)
				if err != nil {
					return fmt.Errorf(`resolving Entity "ServerComponentType": %w`, err)
				}

				list[idx[i]] = entity
				return nil
			}
		case "ServerProvider":
			resolverName, err := entityResolverNameForServerProvider(ctx, rep)
			if err != nil {
				return fmt.Errorf(`finding resolver for Entity "ServerProvider": %w`, err)
			}
			switch resolverName {

			case "findServerProviderByID":
				id0, err := ec.unmarshalNID2goᚗinfratographerᚗcomᚋxᚋgidxᚐPrefixedID(ctx, rep["id"])
				if err != nil {
					return fmt.Errorf(`unmarshalling param 0 for findServerProviderByID(): %w`, err)
				}
				entity, err := ec.resolvers.Entity().FindServerProviderByID(ctx, id0)
				if err != nil {
					return fmt.Errorf(`resolving Entity "ServerProvider": %w`, err)
				}

				list[idx[i]] = entity
				return nil
			}
		case "ServerType":
			resolverName, err := entityResolverNameForServerType(ctx, rep)
			if err != nil {
				return fmt.Errorf(`finding resolver for Entity "ServerType": %w`, err)
			}
			switch resolverName {

			case "findServerTypeByID":
				id0, err := ec.unmarshalNID2goᚗinfratographerᚗcomᚋxᚋgidxᚐPrefixedID(ctx, rep["id"])
				if err != nil {
					return fmt.Errorf(`unmarshalling param 0 for findServerTypeByID(): %w`, err)
				}
				entity, err := ec.resolvers.Entity().FindServerTypeByID(ctx, id0)
				if err != nil {
					return fmt.Errorf(`resolving Entity "ServerType": %w`, err)
				}

				list[idx[i]] = entity
				return nil
			}

		}
		return fmt.Errorf("%w: %s", ErrUnknownType, typeName)
	}

	resolveManyEntities := func(ctx context.Context, typeName string, reps []map[string]interface{}, idx []int) (err error) {
		// we need to do our own panic handling, because we may be called in a
		// goroutine, where the usual panic handling can't catch us
		defer func() {
			if r := recover(); r != nil {
				err = ec.Recover(ctx, r)
			}
		}()

		switch typeName {

		default:
			return errors.New("unknown type: " + typeName)
		}
	}

	resolveEntityGroup := func(typeName string, reps []map[string]interface{}, idx []int) {
		if isMulti(typeName) {
			err := resolveManyEntities(ctx, typeName, reps, idx)
			if err != nil {
				ec.Error(ctx, err)
			}
		} else {
			// if there are multiple entities to resolve, parallelize (similar to
			// graphql.FieldSet.Dispatch)
			var e sync.WaitGroup
			e.Add(len(reps))
			for i, rep := range reps {
				i, rep := i, rep
				go func(i int, rep map[string]interface{}) {
					err := resolveEntity(ctx, typeName, rep, idx, i)
					if err != nil {
						ec.Error(ctx, err)
					}
					e.Done()
				}(i, rep)
			}
			e.Wait()
		}
	}
	buildRepresentationGroups(representations)

	switch len(repsMap) {
	case 0:
		return list
	case 1:
		for typeName, reps := range repsMap {
			resolveEntityGroup(typeName, reps.r, reps.i)
		}
		return list
	default:
		var g sync.WaitGroup
		g.Add(len(repsMap))
		for typeName, reps := range repsMap {
			go func(typeName string, reps []map[string]interface{}, idx []int) {
				resolveEntityGroup(typeName, reps, idx)
				g.Done()
			}(typeName, reps.r, reps.i)
		}
		g.Wait()
		return list
	}
}

func entityResolverNameForServer(ctx context.Context, rep map[string]interface{}) (string, error) {
	for {
		var (
			m   map[string]interface{}
			val interface{}
			ok  bool
		)
		_ = val
		m = rep
		if _, ok = m["id"]; !ok {
			break
		}
		return "findServerByID", nil
	}
	return "", fmt.Errorf("%w for Server", ErrTypeNotFound)
}

func entityResolverNameForServerCPU(ctx context.Context, rep map[string]interface{}) (string, error) {
	for {
		var (
			m   map[string]interface{}
			val interface{}
			ok  bool
		)
		_ = val
		m = rep
		if _, ok = m["id"]; !ok {
			break
		}
		return "findServerCPUByID", nil
	}
	return "", fmt.Errorf("%w for ServerCPU", ErrTypeNotFound)
}

func entityResolverNameForServerCPUType(ctx context.Context, rep map[string]interface{}) (string, error) {
	for {
		var (
			m   map[string]interface{}
			val interface{}
			ok  bool
		)
		_ = val
		m = rep
		if _, ok = m["id"]; !ok {
			break
		}
		return "findServerCPUTypeByID", nil
	}
	return "", fmt.Errorf("%w for ServerCPUType", ErrTypeNotFound)
}

func entityResolverNameForServerChassis(ctx context.Context, rep map[string]interface{}) (string, error) {
	for {
		var (
			m   map[string]interface{}
			val interface{}
			ok  bool
		)
		_ = val
		m = rep
		if _, ok = m["id"]; !ok {
			break
		}
		return "findServerChassisByID", nil
	}
	return "", fmt.Errorf("%w for ServerChassis", ErrTypeNotFound)
}

func entityResolverNameForServerChassisType(ctx context.Context, rep map[string]interface{}) (string, error) {
	for {
		var (
			m   map[string]interface{}
			val interface{}
			ok  bool
		)
		_ = val
		m = rep
		if _, ok = m["id"]; !ok {
			break
		}
		return "findServerChassisTypeByID", nil
	}
	return "", fmt.Errorf("%w for ServerChassisType", ErrTypeNotFound)
}

func entityResolverNameForServerComponent(ctx context.Context, rep map[string]interface{}) (string, error) {
	for {
		var (
			m   map[string]interface{}
			val interface{}
			ok  bool
		)
		_ = val
		m = rep
		if _, ok = m["id"]; !ok {
			break
		}
		return "findServerComponentByID", nil
	}
	return "", fmt.Errorf("%w for ServerComponent", ErrTypeNotFound)
}

func entityResolverNameForServerComponentType(ctx context.Context, rep map[string]interface{}) (string, error) {
	for {
		var (
			m   map[string]interface{}
			val interface{}
			ok  bool
		)
		_ = val
		m = rep
		if _, ok = m["id"]; !ok {
			break
		}
		return "findServerComponentTypeByID", nil
	}
	return "", fmt.Errorf("%w for ServerComponentType", ErrTypeNotFound)
}

func entityResolverNameForServerProvider(ctx context.Context, rep map[string]interface{}) (string, error) {
	for {
		var (
			m   map[string]interface{}
			val interface{}
			ok  bool
		)
		_ = val
		m = rep
		if _, ok = m["id"]; !ok {
			break
		}
		return "findServerProviderByID", nil
	}
	return "", fmt.Errorf("%w for ServerProvider", ErrTypeNotFound)
}

func entityResolverNameForServerType(ctx context.Context, rep map[string]interface{}) (string, error) {
	for {
		var (
			m   map[string]interface{}
			val interface{}
			ok  bool
		)
		_ = val
		m = rep
		if _, ok = m["id"]; !ok {
			break
		}
		return "findServerTypeByID", nil
	}
	return "", fmt.Errorf("%w for ServerType", ErrTypeNotFound)
}
