package graphapi

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.34

import (
	"context"
	"database/sql"

	"go.infratographer.com/server-api/internal/ent/generated"
	"go.infratographer.com/server-api/internal/ent/generated/predicate"
	"go.infratographer.com/server-api/internal/ent/generated/server"
	"go.infratographer.com/x/gidx"
)

// ServerTypeCreate is the resolver for the serverTypeCreate field.
func (r *mutationResolver) ServerTypeCreate(ctx context.Context, input generated.CreateServerTypeInput) (*ServerTypeCreatePayload, error) {
	typ, err := r.client.ServerType.Create().SetInput(input).Save(ctx)
	if err != nil {
		return nil, err
	}

	return &ServerTypeCreatePayload{ServerType: typ}, nil
}

// ServerTypeUpdate is the resolver for the serverTypeUpdate field.
func (r *mutationResolver) ServerTypeUpdate(ctx context.Context, id gidx.PrefixedID, input generated.UpdateServerTypeInput) (*ServerTypeUpdatePayload, error) {
	// TODO: check permissions

	t, err := r.client.ServerType.Get(ctx, id)
	if err != nil {
		return nil, err
	}

	t, err = t.Update().SetInput(input).Save(ctx)
	if err != nil {
		return nil, err
	}

	return &ServerTypeUpdatePayload{ServerType: t}, nil
}

// ServerTypeDelete is the resolver for the serverTypeDelete field.
func (r *mutationResolver) ServerTypeDelete(ctx context.Context, id gidx.PrefixedID) (*ServerTypeDeletePayload, error) {
	//TODO: check permissions

	tx, err := r.client.BeginTx(ctx, &sql.TxOptions{})
	if err != nil {
		return nil, err
	}

	// cleanup servers associated with type
	servers, err := tx.Server.Query().Where(predicate.Server(server.ServerTypeIDEQ(id))).All(ctx)
	if err != nil {
		r.logger.Errorw("failed to query servers", "error", err)
		if rerr := tx.Rollback(); rerr != nil {
			r.logger.Errorw("failed to rollback transaction", "error", rerr, "stage", "query servers")
		}
		return nil, err
	}

	for _, s := range servers {
		if err = tx.Server.DeleteOne(s).Exec(ctx); err != nil {
			r.logger.Errorw("failed to delete server", "port", s.ID, "error", err)
			if rerr := tx.Rollback(); rerr != nil {
				r.logger.Errorw("failed to rollback transaction", "error", rerr, "stage", "delete server")
			}
		}
	}

	if err := tx.ServerType.DeleteOneID(id).Exec(ctx); err != nil {
		r.logger.Errorw("failed to commit transaction", "error", err)
		if rerr := tx.Rollback(); rerr != nil {
			r.logger.Errorw("failed to rollback transaction", "error", rerr, "stage", "delete server type")
		}
		return nil, err
	}

	if err := tx.Commit(); err != nil {
		r.logger.Errorw("failed to commit transaction", "error", err)
		if rerr := tx.Rollback(); rerr != nil {
			r.logger.Errorw("failed to rollback transaction", "error", rerr, "stage", "commit transaction")
		}
		return nil, err
	}

	return &ServerTypeDeletePayload{DeletedID: id}, nil
}

// ServerType is the resolver for the serverType field.
func (r *queryResolver) ServerType(ctx context.Context, id gidx.PrefixedID) (*generated.ServerType, error) {
	return r.client.ServerType.Get(ctx, id)
}
