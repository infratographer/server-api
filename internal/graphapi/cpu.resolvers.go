package graphapi

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"database/sql"

	"go.infratographer.com/server-api/internal/ent/generated"
	"go.infratographer.com/x/gidx"
)

// ServerCPUCreate is the resolver for the serverCPUCreate field.
func (r *mutationResolver) ServerCPUCreate(ctx context.Context, input generated.CreateServerCPUInput) (*ServerCPUCreatePayload, error) {
	// TODO: check permissions

	c, err := r.client.ServerCPU.Create().SetInput(input).Save(ctx)
	if err != nil {
		return nil, err
	}

	return &ServerCPUCreatePayload{ServerCPU: c}, nil
}

// ServerCPUUpdate is the resolver for the serverCPUUpdate field.
func (r *mutationResolver) ServerCPUUpdate(ctx context.Context, id gidx.PrefixedID, input generated.UpdateServerCPUInput) (*ServerCPUUpdatePayload, error) {
	// TODO: check permissions

	cpu, err := r.client.ServerCPU.Get(ctx, id)
	if err != nil {
		return nil, err
	}

	cpu, err = cpu.Update().SetInput(input).Save(ctx)
	if err != nil {
		return nil, err
	}

	return &ServerCPUUpdatePayload{ServerCPU: cpu}, nil
}

// ServerCPUDelete is the resolver for the serverCPUDelete field.
func (r *mutationResolver) ServerCPUDelete(ctx context.Context, id gidx.PrefixedID) (*ServerCPUDeletePayload, error) {
	//TODO: check permissions

	tx, err := r.client.BeginTx(ctx, &sql.TxOptions{})
	if err != nil {
		return nil, err
	}

	if err := tx.ServerCPU.DeleteOneID(id).Exec(ctx); err != nil {
		r.logger.Errorw("failed to commit transaction", "error", err)
		if rerr := tx.Rollback(); rerr != nil {
			r.logger.Errorw("failed to rollback transaction", "error", rerr, "stage", "delete cpu")
		}
		return nil, err
	}

	if err := tx.Commit(); err != nil {
		r.logger.Errorw("failed to commit transaction", "error", err)
		if rerr := tx.Rollback(); rerr != nil {
			r.logger.Errorw("failed to rollback transaction", "error", rerr, "stage", "commit transaction")
		}
		return nil, err
	}

	return &ServerCPUDeletePayload{DeletedID: id}, nil
}

// ServerCPU is the resolver for the serverCPU field.
func (r *queryResolver) ServerCPU(ctx context.Context, id gidx.PrefixedID) (*generated.ServerCPU, error) {
	return r.client.ServerCPU.Get(ctx, id)
}

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
func (r *mutationResolver) ServerCPU(ctx context.Context, input generated.CreateServerCPUInput) (*ServerCPUCreatePayload, error) {
	// TODO: check permissions

	cpu, err := r.client.ServerCPU.Create().SetInput(input).Save(ctx)
	if err != nil {
		return nil, err
	}

	return &ServerCPUCreatePayload{ServerCPU: cpu}, nil
}
