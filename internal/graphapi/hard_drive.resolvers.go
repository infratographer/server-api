package graphapi

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.34

import (
	"context"
	"database/sql"

	"go.infratographer.com/server-api/internal/ent/generated"
	"go.infratographer.com/x/gidx"
)

// ServerHardDrive is the resolver for the serverHardDrive field.
func (r *mutationResolver) ServerHardDrive(ctx context.Context, input generated.CreateServerHardDriveInput) (*ServerHardDriveCreatePayload, error) {
	// TODO: check permissions

	hd, err := r.client.ServerHardDrive.Create().SetInput(input).Save(ctx)
	if err != nil {
		return nil, err
	}

	return &ServerHardDriveCreatePayload{ServerHardDrive: hd}, nil
}

// ServerHardDriveUpdate is the resolver for the serverHardDriveUpdate field.
func (r *mutationResolver) ServerHardDriveUpdate(ctx context.Context, id gidx.PrefixedID, input generated.UpdateServerHardDriveInput) (*ServerHardDriveUpdatePayload, error) {
	// TODO: check permissions

	hd, err := r.client.ServerHardDrive.Get(ctx, id)
	if err != nil {
		return nil, err
	}

	hd, err = hd.Update().SetInput(input).Save(ctx)
	if err != nil {
		return nil, err
	}

	return &ServerHardDriveUpdatePayload{ServerHardDrive: hd}, nil
}

// ServerHardDriveDelete is the resolver for the serverHardDriveDelete field.
func (r *mutationResolver) ServerHardDriveDelete(ctx context.Context, id gidx.PrefixedID) (*ServerHardDriveDeletePayload, error) {
	//TODO: check permissions

	tx, err := r.client.BeginTx(ctx, &sql.TxOptions{})
	if err != nil {
		return nil, err
	}

	if err := tx.ServerHardDrive.DeleteOneID(id).Exec(ctx); err != nil {
		r.logger.Errorw("failed to commit transaction", "error", err)
		if rerr := tx.Rollback(); rerr != nil {
			r.logger.Errorw("failed to rollback transaction", "error", rerr, "stage", "delete hard drive")
		}
		return nil, err
	}

	if err := tx.Commit(); err != nil {
		r.logger.Errorw("failed to commit transaction", "error", err)
		if rerr := tx.Rollback(); rerr != nil {
			r.logger.Errorw("failed to rollback transaction", "error", rerr, "stage", "commit transaction")
		}
		return nil, err
	}

	return &ServerHardDriveDeletePayload{DeletedID: id}, nil
}

// ServerHardDrive is the resolver for the serverHardDrive field.
func (r *queryResolver) ServerHardDrive(ctx context.Context, id gidx.PrefixedID) (*generated.ServerHardDrive, error) {
	return r.client.ServerHardDrive.Get(ctx, id)
}
