package graphapi

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"database/sql"

	"go.infratographer.com/server-api/internal/ent/generated"
	"go.infratographer.com/x/gidx"
)

// ServerMemoryCreate is the resolver for the serverMemoryCreate field.
func (r *mutationResolver) ServerMemoryCreate(ctx context.Context, input generated.CreateServerMemoryInput) (*ServerMemoryCreatePayload, error) {
	// TODO: check permissions

	m, err := r.client.ServerMemory.Create().SetInput(input).Save(ctx)
	if err != nil {
		return nil, err
	}

	return &ServerMemoryCreatePayload{ServerMemory: m}, nil
}

// ServerMemoryUpdate is the resolver for the serverMemoryUpdate field.
func (r *mutationResolver) ServerMemoryUpdate(ctx context.Context, id gidx.PrefixedID, input generated.UpdateServerMemoryInput) (*ServerMemoryUpdatePayload, error) {
	// TODO: check permissions

	m, err := r.client.ServerMemory.Get(ctx, id)
	if err != nil {
		return nil, err
	}

	m, err = m.Update().SetInput(input).Save(ctx)
	if err != nil {
		return nil, err
	}

	return &ServerMemoryUpdatePayload{ServerMemory: m}, nil
}

// ServerMemoryDelete is the resolver for the serverMemoryDelete field.
func (r *mutationResolver) ServerMemoryDelete(ctx context.Context, id gidx.PrefixedID) (*ServerMemoryDeletePayload, error) {
	//TODO: check permissions

	tx, err := r.client.BeginTx(ctx, &sql.TxOptions{})
	if err != nil {
		return nil, err
	}

	if err := tx.ServerMemory.DeleteOneID(id).Exec(ctx); err != nil {
		r.logger.Errorw("failed to commit transaction", "error", err)
		if rerr := tx.Rollback(); rerr != nil {
			r.logger.Errorw("failed to rollback transaction", "error", rerr, "stage", "delete memory")
		}
		return nil, err
	}

	if err := tx.Commit(); err != nil {
		r.logger.Errorw("failed to commit transaction", "error", err)
		if rerr := tx.Rollback(); rerr != nil {
			r.logger.Errorw("failed to rollback transaction", "error", rerr, "stage", "commit transaction")
		}
		return nil, err
	}

	return &ServerMemoryDeletePayload{DeletedID: id}, nil
}

// ServerMemory is the resolver for the serverMemory field.
func (r *queryResolver) ServerMemory(ctx context.Context, id gidx.PrefixedID) (*generated.ServerMemory, error) {
	return r.client.ServerMemory.Get(ctx, id)
}
