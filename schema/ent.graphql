directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
"""Input information to create a server cpu."""
input CreateServerCPUInput {
  """The serial number of the server cpu."""
  serial: String!
  serverID: ID!
  serverCPUTypeID: ID!
}
"""Input information to create a server cpu type."""
input CreateServerCPUTypeInput {
  """The name of the vendor for the server cpu type."""
  vendor: String!
  """The mode of the server cpu type."""
  model: String!
  """The clock speed of the server cpu type."""
  clockSpeed: String!
  """The number of cores for the server cpu type."""
  coreCount: Int!
  cpuIDs: [ID!]
}
"""Input information to create a server chassis."""
input CreateServerChassisInput {
  """The ID for the parent of this chassis."""
  parentChassisID: ID!
  """The serial number of the server chassis."""
  serial: String!
  serverID: ID!
  serverChassisTypeID: ID!
}
"""Input information to create a server chassis type."""
input CreateServerChassisTypeInput {
  """The name of the vendor for the server chassis type."""
  vendor: String!
  """The mode of the server chassis type."""
  model: String!
  """The height of the server chassis type."""
  height: String!
  """Whether the server chassis type is full depth."""
  isFullDepth: Boolean!
  """The ID for the parent of this chassis type."""
  parentChassisTypeID: ID!
  chassiIDs: [ID!]
}
"""Input information to create a server component."""
input CreateServerComponentInput {
  """The name of the server component."""
  name: String!
  """The name of the vendor of the server component."""
  vendor: String!
  """The model of the server component."""
  model: String!
  """The serial number of the server component."""
  serial: String!
  componentTypeID: ID!
  serverID: ID!
}
"""Input information to create a server component type."""
input CreateServerComponentTypeInput {
  """The name of the server component type."""
  name: String!
}
"""Input information to create a server hard drive."""
input CreateServerHardDriveInput {
  """The serial for the server hard drive."""
  serial: String!
  serverID: ID!
  hardDriveTypeID: ID!
}
"""Input information to create a server hard drive type."""
input CreateServerHardDriveTypeInput {
  """The name of the vendor for the server hard drive type."""
  vendor: String!
  """The mode of the server chassis type."""
  model: String!
  """The speed of the server hard drive type."""
  speed: String!
  """The type of the server hard drive type."""
  type: String!
  """The capacity of the server hard drive type."""
  capacity: String!
  hardDriveIDs: [ID!]
}
"""Create a new server."""
input CreateServerInput {
  """The name of the server."""
  name: String!
  """The description of the server."""
  description: String
  """The ID for the owner of this server."""
  ownerID: ID!
  """The ID for the location of this server."""
  locationID: ID!
  providerID: ID!
  serverTypeID: ID!
  componentIDs: [ID!]
}
"""Input information to create a server memory."""
input CreateServerMemoryInput {
  """The serial of the server memory."""
  serial: String!
  serverID: ID!
  serverMemoryTypeID: ID!
}
"""Input information to create a server memory type."""
input CreateServerMemoryTypeInput {
  """The name of the vendor for the server chassis type."""
  vendor: String!
  """The mode of the server chassis type."""
  model: String!
  """The speed of the server memory type."""
  speed: String!
  """The size of the server memory type."""
  size: String!
  memoryIDs: [ID!]
}
"""Input information to create a server motherboard."""
input CreateServerMotherboardInput {
  """The serial of the server motherboard"""
  serial: String!
  serverID: ID!
  serverMotherboardTypeID: ID!
}
"""Input information to create a server motherboard type."""
input CreateServerMotherboardTypeInput {
  """The name of the vendor for the server motherboard type."""
  vendor: String!
  """The mode of the server chassis type."""
  model: String!
  motherboardIDs: [ID!]
}
"""Input information to create a server provider."""
input CreateServerProviderInput {
  """The name of the server provider."""
  name: String!
  """The ID for the resource provider of this server."""
  resourceProviderID: ID!
}
"""Input information to create a server type."""
input CreateServerTypeInput {
  """The name of the server type."""
  name: String!
  """The ID for the owner of this server type."""
  ownerID: ID!
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
"""A valid JSON string."""
scalar JSON
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node {
  """The id of the object."""
  id: ID!
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo @shareable {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}
type Query
type Server implements Node & IPAddressable @key(fields: "id") @prefixedID(prefix: "srvrsrv") {
  """The ID of the server."""
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  """The name of the server."""
  name: String!
  """The description of the server."""
  description: String
  """The server provider for the server."""
  serverProvider: ServerProvider! @goField(name: "Provider", forceResolver: false)
  serverType: ServerType!
  components(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for ServerComponents returned from the connection."""
    orderBy: ServerComponentOrder

    """Filtering options for ServerComponents returned from the connection."""
    where: ServerComponentWhereInput
  ): ServerComponentConnection!
}
type ServerCPU implements Node @key(fields: "id") @prefixedID(prefix: "srvrcpu") {
  """The ID of the server cpu."""
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  """The serial number of the server cpu."""
  serial: String!
  server: Server!
  serverCPUType: ServerCPUType!
}
"""A connection to a list of items."""
type ServerCPUConnection {
  """A list of edges."""
  edges: [ServerCPUEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type ServerCPUEdge {
  """The item at the end of the edge."""
  node: ServerCPU
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for ServerCPU connections"""
input ServerCPUOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order ServerCPUs."""
  field: ServerCPUOrderField!
}
"""Properties by which ServerCPU connections can be ordered."""
enum ServerCPUOrderField {
  ID
  CREATED_AT
  UPDATED_AT
  SERVER_CPU_TYPE
  SERVER
}
type ServerCPUType implements Node @key(fields: "id") @prefixedID(prefix: "srvrcpt") {
  """The ID of the server cpu type."""
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  """The name of the vendor for the server cpu type."""
  vendor: String!
  """The mode of the server cpu type."""
  model: String!
  """The clock speed of the server cpu type."""
  clockSpeed: String!
  """The number of cores for the server cpu type."""
  coreCount: Int!
  cpu(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for ServerCPUs returned from the connection."""
    orderBy: ServerCPUOrder

    """Filtering options for ServerCPUs returned from the connection."""
    where: ServerCPUWhereInput
  ): ServerCPUConnection!
}
"""A connection to a list of items."""
type ServerCPUTypeConnection {
  """A list of edges."""
  edges: [ServerCPUTypeEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type ServerCPUTypeEdge {
  """The item at the end of the edge."""
  node: ServerCPUType
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for ServerCPUType connections"""
input ServerCPUTypeOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order ServerCPUTypes."""
  field: ServerCPUTypeOrderField!
}
"""Properties by which ServerCPUType connections can be ordered."""
enum ServerCPUTypeOrderField {
  ID
  CREATED_AT
  UPDATED_AT
  NAME
}
"""
ServerCPUTypeWhereInput is used for filtering ServerCPUType objects.
Input was generated by ent.
"""
input ServerCPUTypeWhereInput {
  not: ServerCPUTypeWhereInput
  and: [ServerCPUTypeWhereInput!]
  or: [ServerCPUTypeWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """vendor field predicates"""
  vendor: String
  vendorNEQ: String
  vendorIn: [String!]
  vendorNotIn: [String!]
  vendorGT: String
  vendorGTE: String
  vendorLT: String
  vendorLTE: String
  vendorContains: String
  vendorHasPrefix: String
  vendorHasSuffix: String
  vendorEqualFold: String
  vendorContainsFold: String
  """model field predicates"""
  model: String
  modelNEQ: String
  modelIn: [String!]
  modelNotIn: [String!]
  modelGT: String
  modelGTE: String
  modelLT: String
  modelLTE: String
  modelContains: String
  modelHasPrefix: String
  modelHasSuffix: String
  modelEqualFold: String
  modelContainsFold: String
  """clock_speed field predicates"""
  clockSpeed: String
  clockSpeedNEQ: String
  clockSpeedIn: [String!]
  clockSpeedNotIn: [String!]
  clockSpeedGT: String
  clockSpeedGTE: String
  clockSpeedLT: String
  clockSpeedLTE: String
  clockSpeedContains: String
  clockSpeedHasPrefix: String
  clockSpeedHasSuffix: String
  clockSpeedEqualFold: String
  clockSpeedContainsFold: String
  """core_count field predicates"""
  coreCount: Int
  coreCountNEQ: Int
  coreCountIn: [Int!]
  coreCountNotIn: [Int!]
  coreCountGT: Int
  coreCountGTE: Int
  coreCountLT: Int
  coreCountLTE: Int
  """cpu edge predicates"""
  hasCPU: Boolean
  hasCPUWith: [ServerCPUWhereInput!]
}
"""
ServerCPUWhereInput is used for filtering ServerCPU objects.
Input was generated by ent.
"""
input ServerCPUWhereInput {
  not: ServerCPUWhereInput
  and: [ServerCPUWhereInput!]
  or: [ServerCPUWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """serial field predicates"""
  serial: String
  serialNEQ: String
  serialIn: [String!]
  serialNotIn: [String!]
  serialGT: String
  serialGTE: String
  serialLT: String
  serialLTE: String
  serialContains: String
  serialHasPrefix: String
  serialHasSuffix: String
  serialEqualFold: String
  serialContainsFold: String
  """server edge predicates"""
  hasServer: Boolean
  hasServerWith: [ServerWhereInput!]
  """server_cpu_type edge predicates"""
  hasServerCPUType: Boolean
  hasServerCPUTypeWith: [ServerCPUTypeWhereInput!]
}
type ServerChassis implements Node @key(fields: "id") @prefixedID(prefix: "srvrsch") {
  """The ID of the server chassis."""
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  """The serial number of the server chassis."""
  serial: String!
  server: Server!
  serverChassisType: ServerChassisType!
}
"""A connection to a list of items."""
type ServerChassisConnection {
  """A list of edges."""
  edges: [ServerChassisEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type ServerChassisEdge {
  """The item at the end of the edge."""
  node: ServerChassis
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for ServerChassis connections"""
input ServerChassisOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order ServerChasses."""
  field: ServerChassisOrderField!
}
"""Properties by which ServerChassis connections can be ordered."""
enum ServerChassisOrderField {
  ID
  CREATED_AT
  UPDATED_AT
  SERVER_CHASSIS_TYPE
  PARENT_CHASSIS
  SERVER
}
type ServerChassisType implements Node @key(fields: "id") @prefixedID(prefix: "srvrsct") {
  """The ID of the server chassis type."""
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  """The name of the vendor for the server chassis type."""
  vendor: String!
  """The mode of the server chassis type."""
  model: String!
  """The height of the server chassis type."""
  height: String!
  """Whether the server chassis type is full depth."""
  isFullDepth: Boolean!
  chassis(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for ServerChasses returned from the connection."""
    orderBy: ServerChassisOrder

    """Filtering options for ServerChasses returned from the connection."""
    where: ServerChassisWhereInput
  ): ServerChassisConnection!
}
"""A connection to a list of items."""
type ServerChassisTypeConnection {
  """A list of edges."""
  edges: [ServerChassisTypeEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type ServerChassisTypeEdge {
  """The item at the end of the edge."""
  node: ServerChassisType
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for ServerChassisType connections"""
input ServerChassisTypeOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order ServerChassisTypes."""
  field: ServerChassisTypeOrderField!
}
"""Properties by which ServerChassisType connections can be ordered."""
enum ServerChassisTypeOrderField {
  ID
  CREATED_AT
  UPDATED_AT
  NAME
  PARENT_CHASSIS_TYPE
}
"""
ServerChassisTypeWhereInput is used for filtering ServerChassisType objects.
Input was generated by ent.
"""
input ServerChassisTypeWhereInput {
  not: ServerChassisTypeWhereInput
  and: [ServerChassisTypeWhereInput!]
  or: [ServerChassisTypeWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """vendor field predicates"""
  vendor: String
  vendorNEQ: String
  vendorIn: [String!]
  vendorNotIn: [String!]
  vendorGT: String
  vendorGTE: String
  vendorLT: String
  vendorLTE: String
  vendorContains: String
  vendorHasPrefix: String
  vendorHasSuffix: String
  vendorEqualFold: String
  vendorContainsFold: String
  """model field predicates"""
  model: String
  modelNEQ: String
  modelIn: [String!]
  modelNotIn: [String!]
  modelGT: String
  modelGTE: String
  modelLT: String
  modelLTE: String
  modelContains: String
  modelHasPrefix: String
  modelHasSuffix: String
  modelEqualFold: String
  modelContainsFold: String
  """height field predicates"""
  height: String
  heightNEQ: String
  heightIn: [String!]
  heightNotIn: [String!]
  heightGT: String
  heightGTE: String
  heightLT: String
  heightLTE: String
  heightContains: String
  heightHasPrefix: String
  heightHasSuffix: String
  heightEqualFold: String
  heightContainsFold: String
  """is_full_depth field predicates"""
  isFullDepth: Boolean
  isFullDepthNEQ: Boolean
  """chassis edge predicates"""
  hasChassis: Boolean
  hasChassisWith: [ServerChassisWhereInput!]
}
"""
ServerChassisWhereInput is used for filtering ServerChassis objects.
Input was generated by ent.
"""
input ServerChassisWhereInput {
  not: ServerChassisWhereInput
  and: [ServerChassisWhereInput!]
  or: [ServerChassisWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """serial field predicates"""
  serial: String
  serialNEQ: String
  serialIn: [String!]
  serialNotIn: [String!]
  serialGT: String
  serialGTE: String
  serialLT: String
  serialLTE: String
  serialContains: String
  serialHasPrefix: String
  serialHasSuffix: String
  serialEqualFold: String
  serialContainsFold: String
  """server edge predicates"""
  hasServer: Boolean
  hasServerWith: [ServerWhereInput!]
  """server_chassis_type edge predicates"""
  hasServerChassisType: Boolean
  hasServerChassisTypeWith: [ServerChassisTypeWhereInput!]
}
type ServerComponent implements Node @key(fields: "id") @prefixedID(prefix: "srvrcmp") {
  """The ID of the server component."""
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  """The name of the server component."""
  name: String!
  """The name of the vendor of the server component."""
  vendor: String!
  """The model of the server component."""
  model: String!
  """The serial number of the server component."""
  serial: String!
  """The server component type for the server component."""
  serverComponentType: ServerComponentType! @goField(name: "ComponentType", forceResolver: false)
  server: Server!
}
"""A connection to a list of items."""
type ServerComponentConnection {
  """A list of edges."""
  edges: [ServerComponentEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type ServerComponentEdge {
  """The item at the end of the edge."""
  node: ServerComponent
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for ServerComponent connections"""
input ServerComponentOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order ServerComponents."""
  field: ServerComponentOrderField!
}
"""Properties by which ServerComponent connections can be ordered."""
enum ServerComponentOrderField {
  ID
  CREATED_AT
  UPDATED_AT
  NAME
  VENDOR
  MODEL
  SERIAL
}
type ServerComponentType implements Node @key(fields: "id") @prefixedID(prefix: "srvrcpt") {
  """The ID of the server component type."""
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  """The name of the server component type."""
  name: String!
}
"""A connection to a list of items."""
type ServerComponentTypeConnection {
  """A list of edges."""
  edges: [ServerComponentTypeEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type ServerComponentTypeEdge {
  """The item at the end of the edge."""
  node: ServerComponentType
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for ServerComponentType connections"""
input ServerComponentTypeOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order ServerComponentTypes."""
  field: ServerComponentTypeOrderField!
}
"""Properties by which ServerComponentType connections can be ordered."""
enum ServerComponentTypeOrderField {
  ID
  CREATED_AT
  UPDATED_AT
  NAME
}
"""
ServerComponentTypeWhereInput is used for filtering ServerComponentType objects.
Input was generated by ent.
"""
input ServerComponentTypeWhereInput {
  not: ServerComponentTypeWhereInput
  and: [ServerComponentTypeWhereInput!]
  or: [ServerComponentTypeWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
}
"""
ServerComponentWhereInput is used for filtering ServerComponent objects.
Input was generated by ent.
"""
input ServerComponentWhereInput {
  not: ServerComponentWhereInput
  and: [ServerComponentWhereInput!]
  or: [ServerComponentWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """vendor field predicates"""
  vendor: String
  vendorNEQ: String
  vendorIn: [String!]
  vendorNotIn: [String!]
  vendorGT: String
  vendorGTE: String
  vendorLT: String
  vendorLTE: String
  vendorContains: String
  vendorHasPrefix: String
  vendorHasSuffix: String
  vendorEqualFold: String
  vendorContainsFold: String
  """model field predicates"""
  model: String
  modelNEQ: String
  modelIn: [String!]
  modelNotIn: [String!]
  modelGT: String
  modelGTE: String
  modelLT: String
  modelLTE: String
  modelContains: String
  modelHasPrefix: String
  modelHasSuffix: String
  modelEqualFold: String
  modelContainsFold: String
  """serial field predicates"""
  serial: String
  serialNEQ: String
  serialIn: [String!]
  serialNotIn: [String!]
  serialGT: String
  serialGTE: String
  serialLT: String
  serialLTE: String
  serialContains: String
  serialHasPrefix: String
  serialHasSuffix: String
  serialEqualFold: String
  serialContainsFold: String
  """component_type edge predicates"""
  hasComponentType: Boolean
  hasComponentTypeWith: [ServerComponentTypeWhereInput!]
  """server edge predicates"""
  hasServer: Boolean
  hasServerWith: [ServerWhereInput!]
}
"""A connection to a list of items."""
type ServerConnection {
  """A list of edges."""
  edges: [ServerEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type ServerEdge {
  """The item at the end of the edge."""
  node: Server
  """A cursor for use in pagination."""
  cursor: Cursor!
}
type ServerHardDrive implements Node @key(fields: "id") @prefixedID(prefix: "srvrshd") {
  """The ID of the server hard drive type."""
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  """The serial for the server hard drive."""
  serial: String!
  server: Server!
  hardDriveType: ServerHardDriveType!
}
"""A connection to a list of items."""
type ServerHardDriveConnection {
  """A list of edges."""
  edges: [ServerHardDriveEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type ServerHardDriveEdge {
  """The item at the end of the edge."""
  node: ServerHardDrive
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for ServerHardDrive connections"""
input ServerHardDriveOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order ServerHardDrives."""
  field: ServerHardDriveOrderField!
}
"""Properties by which ServerHardDrive connections can be ordered."""
enum ServerHardDriveOrderField {
  ID
  CREATED_AT
  UPDATED_AT
  NAME
  SERVER
  SERVER_HARD_DRIVE_TYPE
}
type ServerHardDriveType implements Node @key(fields: "id") @prefixedID(prefix: "srvrhdt") {
  """The ID of the server hard drive type."""
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  """The name of the vendor for the server hard drive type."""
  vendor: String!
  """The mode of the server chassis type."""
  model: String!
  """The speed of the server hard drive type."""
  speed: String!
  """The type of the server hard drive type."""
  type: String!
  """The capacity of the server hard drive type."""
  capacity: String!
  hardDrive(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for ServerHardDrives returned from the connection."""
    orderBy: ServerHardDriveOrder

    """Filtering options for ServerHardDrives returned from the connection."""
    where: ServerHardDriveWhereInput
  ): ServerHardDriveConnection!
}
"""A connection to a list of items."""
type ServerHardDriveTypeConnection {
  """A list of edges."""
  edges: [ServerHardDriveTypeEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type ServerHardDriveTypeEdge {
  """The item at the end of the edge."""
  node: ServerHardDriveType
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for ServerHardDriveType connections"""
input ServerHardDriveTypeOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order ServerHardDriveTypes."""
  field: ServerHardDriveTypeOrderField!
}
"""Properties by which ServerHardDriveType connections can be ordered."""
enum ServerHardDriveTypeOrderField {
  ID
  CREATED_AT
  UPDATED_AT
  NAME
}
"""
ServerHardDriveTypeWhereInput is used for filtering ServerHardDriveType objects.
Input was generated by ent.
"""
input ServerHardDriveTypeWhereInput {
  not: ServerHardDriveTypeWhereInput
  and: [ServerHardDriveTypeWhereInput!]
  or: [ServerHardDriveTypeWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """vendor field predicates"""
  vendor: String
  vendorNEQ: String
  vendorIn: [String!]
  vendorNotIn: [String!]
  vendorGT: String
  vendorGTE: String
  vendorLT: String
  vendorLTE: String
  vendorContains: String
  vendorHasPrefix: String
  vendorHasSuffix: String
  vendorEqualFold: String
  vendorContainsFold: String
  """model field predicates"""
  model: String
  modelNEQ: String
  modelIn: [String!]
  modelNotIn: [String!]
  modelGT: String
  modelGTE: String
  modelLT: String
  modelLTE: String
  modelContains: String
  modelHasPrefix: String
  modelHasSuffix: String
  modelEqualFold: String
  modelContainsFold: String
  """speed field predicates"""
  speed: String
  speedNEQ: String
  speedIn: [String!]
  speedNotIn: [String!]
  speedGT: String
  speedGTE: String
  speedLT: String
  speedLTE: String
  speedContains: String
  speedHasPrefix: String
  speedHasSuffix: String
  speedEqualFold: String
  speedContainsFold: String
  """type field predicates"""
  type: String
  typeNEQ: String
  typeIn: [String!]
  typeNotIn: [String!]
  typeGT: String
  typeGTE: String
  typeLT: String
  typeLTE: String
  typeContains: String
  typeHasPrefix: String
  typeHasSuffix: String
  typeEqualFold: String
  typeContainsFold: String
  """capacity field predicates"""
  capacity: String
  capacityNEQ: String
  capacityIn: [String!]
  capacityNotIn: [String!]
  capacityGT: String
  capacityGTE: String
  capacityLT: String
  capacityLTE: String
  capacityContains: String
  capacityHasPrefix: String
  capacityHasSuffix: String
  capacityEqualFold: String
  capacityContainsFold: String
  """hard_drive edge predicates"""
  hasHardDrive: Boolean
  hasHardDriveWith: [ServerHardDriveWhereInput!]
}
"""
ServerHardDriveWhereInput is used for filtering ServerHardDrive objects.
Input was generated by ent.
"""
input ServerHardDriveWhereInput {
  not: ServerHardDriveWhereInput
  and: [ServerHardDriveWhereInput!]
  or: [ServerHardDriveWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """serial field predicates"""
  serial: String
  serialNEQ: String
  serialIn: [String!]
  serialNotIn: [String!]
  serialGT: String
  serialGTE: String
  serialLT: String
  serialLTE: String
  serialContains: String
  serialHasPrefix: String
  serialHasSuffix: String
  serialEqualFold: String
  serialContainsFold: String
  """server edge predicates"""
  hasServer: Boolean
  hasServerWith: [ServerWhereInput!]
  """hard_drive_type edge predicates"""
  hasHardDriveType: Boolean
  hasHardDriveTypeWith: [ServerHardDriveTypeWhereInput!]
}
type ServerMemory implements Node @key(fields: "id") @prefixedID(prefix: "srvrmem") {
  """The ID of the server memory."""
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  """The serial of the server memory."""
  serial: String!
  server: Server!
  serverMemoryType: ServerMemoryType!
}
"""A connection to a list of items."""
type ServerMemoryConnection {
  """A list of edges."""
  edges: [ServerMemoryEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type ServerMemoryEdge {
  """The item at the end of the edge."""
  node: ServerMemory
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for ServerMemory connections"""
input ServerMemoryOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order ServerMemories."""
  field: ServerMemoryOrderField!
}
"""Properties by which ServerMemory connections can be ordered."""
enum ServerMemoryOrderField {
  ID
  CREATED_AT
  UPDATED_AT
  SERVER
  SERVER_MEMORY_TYPE
}
type ServerMemoryType implements Node @key(fields: "id") @prefixedID(prefix: "srvrmmt") {
  """The ID of the server memory type."""
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  """The name of the vendor for the server chassis type."""
  vendor: String!
  """The mode of the server chassis type."""
  model: String!
  """The speed of the server memory type."""
  speed: String!
  """The size of the server memory type."""
  size: String!
  memory(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for ServerMemories returned from the connection."""
    orderBy: ServerMemoryOrder

    """Filtering options for ServerMemories returned from the connection."""
    where: ServerMemoryWhereInput
  ): ServerMemoryConnection!
}
"""A connection to a list of items."""
type ServerMemoryTypeConnection {
  """A list of edges."""
  edges: [ServerMemoryTypeEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type ServerMemoryTypeEdge {
  """The item at the end of the edge."""
  node: ServerMemoryType
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for ServerMemoryType connections"""
input ServerMemoryTypeOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order ServerMemoryTypes."""
  field: ServerMemoryTypeOrderField!
}
"""Properties by which ServerMemoryType connections can be ordered."""
enum ServerMemoryTypeOrderField {
  ID
  CREATED_AT
  UPDATED_AT
  NAME
}
"""
ServerMemoryTypeWhereInput is used for filtering ServerMemoryType objects.
Input was generated by ent.
"""
input ServerMemoryTypeWhereInput {
  not: ServerMemoryTypeWhereInput
  and: [ServerMemoryTypeWhereInput!]
  or: [ServerMemoryTypeWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """vendor field predicates"""
  vendor: String
  vendorNEQ: String
  vendorIn: [String!]
  vendorNotIn: [String!]
  vendorGT: String
  vendorGTE: String
  vendorLT: String
  vendorLTE: String
  vendorContains: String
  vendorHasPrefix: String
  vendorHasSuffix: String
  vendorEqualFold: String
  vendorContainsFold: String
  """model field predicates"""
  model: String
  modelNEQ: String
  modelIn: [String!]
  modelNotIn: [String!]
  modelGT: String
  modelGTE: String
  modelLT: String
  modelLTE: String
  modelContains: String
  modelHasPrefix: String
  modelHasSuffix: String
  modelEqualFold: String
  modelContainsFold: String
  """speed field predicates"""
  speed: String
  speedNEQ: String
  speedIn: [String!]
  speedNotIn: [String!]
  speedGT: String
  speedGTE: String
  speedLT: String
  speedLTE: String
  speedContains: String
  speedHasPrefix: String
  speedHasSuffix: String
  speedEqualFold: String
  speedContainsFold: String
  """size field predicates"""
  size: String
  sizeNEQ: String
  sizeIn: [String!]
  sizeNotIn: [String!]
  sizeGT: String
  sizeGTE: String
  sizeLT: String
  sizeLTE: String
  sizeContains: String
  sizeHasPrefix: String
  sizeHasSuffix: String
  sizeEqualFold: String
  sizeContainsFold: String
  """memory edge predicates"""
  hasMemory: Boolean
  hasMemoryWith: [ServerMemoryWhereInput!]
}
"""
ServerMemoryWhereInput is used for filtering ServerMemory objects.
Input was generated by ent.
"""
input ServerMemoryWhereInput {
  not: ServerMemoryWhereInput
  and: [ServerMemoryWhereInput!]
  or: [ServerMemoryWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """serial field predicates"""
  serial: String
  serialNEQ: String
  serialIn: [String!]
  serialNotIn: [String!]
  serialGT: String
  serialGTE: String
  serialLT: String
  serialLTE: String
  serialContains: String
  serialHasPrefix: String
  serialHasSuffix: String
  serialEqualFold: String
  serialContainsFold: String
  """server edge predicates"""
  hasServer: Boolean
  hasServerWith: [ServerWhereInput!]
  """server_memory_type edge predicates"""
  hasServerMemoryType: Boolean
  hasServerMemoryTypeWith: [ServerMemoryTypeWhereInput!]
}
type ServerMotherboard implements Node @key(fields: "id") @prefixedID(prefix: "srvrmbd") {
  """The ID of the server motherboard."""
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  """The serial of the server motherboard"""
  serial: String!
  server: Server!
  serverMotherboardType: ServerMotherboardType!
}
"""A connection to a list of items."""
type ServerMotherboardConnection {
  """A list of edges."""
  edges: [ServerMotherboardEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type ServerMotherboardEdge {
  """The item at the end of the edge."""
  node: ServerMotherboard
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for ServerMotherboard connections"""
input ServerMotherboardOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order ServerMotherboards."""
  field: ServerMotherboardOrderField!
}
"""Properties by which ServerMotherboard connections can be ordered."""
enum ServerMotherboardOrderField {
  ID
  CREATED_AT
  UPDATED_AT
  SERVER_MOTHERBOARD_TYPE
  SERVER
}
type ServerMotherboardType implements Node @key(fields: "id") @prefixedID(prefix: "srvrmbt") {
  """The ID of the server motherboard type."""
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  """The name of the vendor for the server motherboard type."""
  vendor: String!
  """The mode of the server chassis type."""
  model: String!
  motherboard(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for ServerMotherboards returned from the connection."""
    orderBy: ServerMotherboardOrder

    """Filtering options for ServerMotherboards returned from the connection."""
    where: ServerMotherboardWhereInput
  ): ServerMotherboardConnection!
}
"""A connection to a list of items."""
type ServerMotherboardTypeConnection {
  """A list of edges."""
  edges: [ServerMotherboardTypeEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type ServerMotherboardTypeEdge {
  """The item at the end of the edge."""
  node: ServerMotherboardType
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for ServerMotherboardType connections"""
input ServerMotherboardTypeOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order ServerMotherboardTypes."""
  field: ServerMotherboardTypeOrderField!
}
"""Properties by which ServerMotherboardType connections can be ordered."""
enum ServerMotherboardTypeOrderField {
  ID
  CREATED_AT
  UPDATED_AT
  NAME
}
"""
ServerMotherboardTypeWhereInput is used for filtering ServerMotherboardType objects.
Input was generated by ent.
"""
input ServerMotherboardTypeWhereInput {
  not: ServerMotherboardTypeWhereInput
  and: [ServerMotherboardTypeWhereInput!]
  or: [ServerMotherboardTypeWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """vendor field predicates"""
  vendor: String
  vendorNEQ: String
  vendorIn: [String!]
  vendorNotIn: [String!]
  vendorGT: String
  vendorGTE: String
  vendorLT: String
  vendorLTE: String
  vendorContains: String
  vendorHasPrefix: String
  vendorHasSuffix: String
  vendorEqualFold: String
  vendorContainsFold: String
  """model field predicates"""
  model: String
  modelNEQ: String
  modelIn: [String!]
  modelNotIn: [String!]
  modelGT: String
  modelGTE: String
  modelLT: String
  modelLTE: String
  modelContains: String
  modelHasPrefix: String
  modelHasSuffix: String
  modelEqualFold: String
  modelContainsFold: String
  """motherboard edge predicates"""
  hasMotherboard: Boolean
  hasMotherboardWith: [ServerMotherboardWhereInput!]
}
"""
ServerMotherboardWhereInput is used for filtering ServerMotherboard objects.
Input was generated by ent.
"""
input ServerMotherboardWhereInput {
  not: ServerMotherboardWhereInput
  and: [ServerMotherboardWhereInput!]
  or: [ServerMotherboardWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """serial field predicates"""
  serial: String
  serialNEQ: String
  serialIn: [String!]
  serialNotIn: [String!]
  serialGT: String
  serialGTE: String
  serialLT: String
  serialLTE: String
  serialContains: String
  serialHasPrefix: String
  serialHasSuffix: String
  serialEqualFold: String
  serialContainsFold: String
  """server edge predicates"""
  hasServer: Boolean
  hasServerWith: [ServerWhereInput!]
  """server_motherboard_type edge predicates"""
  hasServerMotherboardType: Boolean
  hasServerMotherboardTypeWith: [ServerMotherboardTypeWhereInput!]
}
"""Ordering options for Server connections"""
input ServerOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Servers."""
  field: ServerOrderField!
}
"""Properties by which Server connections can be ordered."""
enum ServerOrderField {
  ID
  CREATED_AT
  UPDATED_AT
  NAME
  DESCRIPTION
  OWNER
  SERVER_TYPE
}
type ServerProvider implements Node @key(fields: "id") @prefixedID(prefix: "srvrprv") @goModel(model: "go.infratographer.com/server-api/internal/ent/generated.Provider") {
  """The ID of the server provider."""
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  """The name of the server provider."""
  name: String!
  servers(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Servers returned from the connection."""
    orderBy: ServerOrder

    """Filtering options for Servers returned from the connection."""
    where: ServerWhereInput
  ): ServerConnection!
}
"""A connection to a list of items."""
type ServerProviderConnection {
  """A list of edges."""
  edges: [ServerProviderEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type ServerProviderEdge {
  """The item at the end of the edge."""
  node: ServerProvider
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for ServerProvider connections"""
input ServerProviderOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order ServerProviders."""
  field: ServerProviderOrderField!
}
"""Properties by which ServerProvider connections can be ordered."""
enum ServerProviderOrderField {
  ID
  CREATED_AT
  UPDATED_AT
  NAME
  RESOURCE_PROVIDER
}
"""
ServerProviderWhereInput is used for filtering Provider objects.
Input was generated by ent.
"""
input ServerProviderWhereInput {
  not: ServerProviderWhereInput
  and: [ServerProviderWhereInput!]
  or: [ServerProviderWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """servers edge predicates"""
  hasServers: Boolean
  hasServersWith: [ServerWhereInput!]
}
type ServerType implements Node @key(fields: "id") @prefixedID(prefix: "srvrtyp") {
  """The ID of the server type."""
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  """The name of the server type."""
  name: String!
  servers(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Servers returned from the connection."""
    orderBy: ServerOrder

    """Filtering options for Servers returned from the connection."""
    where: ServerWhereInput
  ): ServerConnection!
}
"""A connection to a list of items."""
type ServerTypeConnection {
  """A list of edges."""
  edges: [ServerTypeEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type ServerTypeEdge {
  """The item at the end of the edge."""
  node: ServerType
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for ServerType connections"""
input ServerTypeOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order ServerTypes."""
  field: ServerTypeOrderField!
}
"""Properties by which ServerType connections can be ordered."""
enum ServerTypeOrderField {
  ID
  CREATED_AT
  UPDATED_AT
  NAME
  OWNER
}
"""
ServerTypeWhereInput is used for filtering ServerType objects.
Input was generated by ent.
"""
input ServerTypeWhereInput {
  not: ServerTypeWhereInput
  and: [ServerTypeWhereInput!]
  or: [ServerTypeWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """servers edge predicates"""
  hasServers: Boolean
  hasServersWith: [ServerWhereInput!]
}
"""
ServerWhereInput is used for filtering Server objects.
Input was generated by ent.
"""
input ServerWhereInput {
  not: ServerWhereInput
  and: [ServerWhereInput!]
  or: [ServerWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """description field predicates"""
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  """provider edge predicates"""
  hasProvider: Boolean
  hasProviderWith: [ServerProviderWhereInput!]
  """server_type edge predicates"""
  hasServerType: Boolean
  hasServerTypeWith: [ServerTypeWhereInput!]
  """components edge predicates"""
  hasComponents: Boolean
  hasComponentsWith: [ServerComponentWhereInput!]
}
"""The builtin Time type"""
scalar Time
"""Input information to update a server cpu."""
input UpdateServerCPUInput {
  """The serial number of the server cpu."""
  serial: String
}
"""Input information to update a server cpu type."""
input UpdateServerCPUTypeInput {
  """The name of the vendor for the server cpu type."""
  vendor: String
  """The mode of the server cpu type."""
  model: String
  """The clock speed of the server cpu type."""
  clockSpeed: String
  """The number of cores for the server cpu type."""
  coreCount: Int
  addCPUIDs: [ID!]
  removeCPUIDs: [ID!]
  clearCPU: Boolean
}
"""Input information to update a server chassis."""
input UpdateServerChassisInput {
  """The serial number of the server chassis."""
  serial: String
}
"""Input information to update a server chassis type."""
input UpdateServerChassisTypeInput {
  """The name of the vendor for the server chassis type."""
  vendor: String
  """The mode of the server chassis type."""
  model: String
  """The height of the server chassis type."""
  height: String
  """Whether the server chassis type is full depth."""
  isFullDepth: Boolean
  addChassiIDs: [ID!]
  removeChassiIDs: [ID!]
  clearChassis: Boolean
}
"""Input information to update a server component."""
input UpdateServerComponentInput {
  """The name of the server component."""
  name: String
  """The name of the vendor of the server component."""
  vendor: String
  """The model of the server component."""
  model: String
  """The serial number of the server component."""
  serial: String
}
"""Input information to update a server component type."""
input UpdateServerComponentTypeInput {
  """The name of the server component type."""
  name: String
}
"""Input information to update a server hard drive."""
input UpdateServerHardDriveInput {
  """The serial for the server hard drive."""
  serial: String
}
"""Input information to update a server hard drive type."""
input UpdateServerHardDriveTypeInput {
  """The name of the vendor for the server hard drive type."""
  vendor: String
  """The mode of the server chassis type."""
  model: String
  """The speed of the server hard drive type."""
  speed: String
  """The type of the server hard drive type."""
  type: String
  """The capacity of the server hard drive type."""
  capacity: String
  addHardDriveIDs: [ID!]
  removeHardDriveIDs: [ID!]
  clearHardDrive: Boolean
}
"""Update an existing server."""
input UpdateServerInput {
  """The name of the server."""
  name: String
  """The description of the server."""
  description: String
  clearDescription: Boolean
  addComponentIDs: [ID!]
  removeComponentIDs: [ID!]
  clearComponents: Boolean
}
"""Input information to update a server memory."""
input UpdateServerMemoryInput {
  """The serial of the server memory."""
  serial: String
}
"""Input information to update a server memory type."""
input UpdateServerMemoryTypeInput {
  """The name of the vendor for the server chassis type."""
  vendor: String
  """The mode of the server chassis type."""
  model: String
  """The speed of the server memory type."""
  speed: String
  """The size of the server memory type."""
  size: String
  addMemoryIDs: [ID!]
  removeMemoryIDs: [ID!]
  clearMemory: Boolean
}
"""Input information to update a server motherboard."""
input UpdateServerMotherboardInput {
  """The serial of the server motherboard"""
  serial: String
}
"""Input information to update a server motherboard type."""
input UpdateServerMotherboardTypeInput {
  """The name of the vendor for the server motherboard type."""
  vendor: String
  """The mode of the server chassis type."""
  model: String
  addMotherboardIDs: [ID!]
  removeMotherboardIDs: [ID!]
  clearMotherboard: Boolean
}
"""Input information to update a server provider."""
input UpdateServerProviderInput {
  """The name of the server provider."""
  name: String
}
"""Input information to update a server type."""
input UpdateServerTypeInput {
  """The name of the server type."""
  name: String
}
