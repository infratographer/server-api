directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
"""Input information to create a server cpu type."""
input CreateServerCPUTypeInput {
  """The name of the vendor for the server cpu type."""
  vendor: String!
  """The mode of the server cpu type."""
  model: String!
  """The clock speed of the server cpu type."""
  clockSpeed: String!
  """The number of cores for the server cpu type."""
  coreCount: Int!
}
"""Input information to create a server chassis."""
input CreateServerChassisInput {
  """The ID for the parent of this chassis."""
  parentChassisID: ID!
  """The serial number of the server chassis."""
  serial: String!
  serverID: ID!
  serverChassisTypeID: ID!
}
"""Input information to create a server chassis type."""
input CreateServerChassisTypeInput {
  """The name of the vendor for the server chassis type."""
  vendor: String!
  """The mode of the server chassis type."""
  model: String!
  """The height of the server chassis type."""
  height: String!
  """Whether the server chassis type is full depth."""
  isFullDepth: Boolean!
  """The ID for the parent of this chassis type."""
  parentChassisTypeID: ID!
  chassiIDs: [ID!]
}
"""Input information to create a server component."""
input CreateServerComponentInput {
  """The name of the server component."""
  name: String!
  """The name of the vendor of the server component."""
  vendor: String!
  """The model of the server component."""
  model: String!
  """The serial number of the server component."""
  serial: String!
  componentTypeID: ID!
  serverID: ID!
}
"""Input information to create a server component type."""
input CreateServerComponentTypeInput {
  """The name of the server component type."""
  name: String!
}
"""Create a new server."""
input CreateServerInput {
  """The name of the server."""
  name: String!
  """The description of the server."""
  description: String
  """The ID for the owner of this server."""
  ownerID: ID!
  """The ID for the location of this server."""
  locationID: ID!
  providerID: ID!
  serverTypeID: ID!
  componentIDs: [ID!]
}
"""Input information to create a server provider."""
input CreateServerProviderInput {
  """The name of the server provider."""
  name: String!
  """The ID for the resource provider of this server."""
  resourceProviderID: ID!
}
"""Input information to create a server type."""
input CreateServerTypeInput {
  """The name of the server type."""
  name: String!
  """The ID for the owner of this server type."""
  ownerID: ID!
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
"""A valid JSON string."""
scalar JSON
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node {
  """The id of the object."""
  id: ID!
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo @shareable {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}
type Query
type Server implements Node & IPAddressable @key(fields: "id") @prefixedID(prefix: "srvrsrv") {
  """The ID of the server."""
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  """The name of the server."""
  name: String!
  """The description of the server."""
  description: String
  """The server provider for the server."""
  serverProvider: ServerProvider! @goField(name: "Provider", forceResolver: false)
  serverType: ServerType!
  components(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for ServerComponents returned from the connection."""
    orderBy: ServerComponentOrder

    """Filtering options for ServerComponents returned from the connection."""
    where: ServerComponentWhereInput
  ): ServerComponentConnection!
}
type ServerCPUType implements Node @key(fields: "id") @prefixedID(prefix: "srvrcpt") {
  """The ID of the server cpu type."""
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  """The name of the vendor for the server cpu type."""
  vendor: String!
  """The mode of the server cpu type."""
  model: String!
  """The clock speed of the server cpu type."""
  clockSpeed: String!
  """The number of cores for the server cpu type."""
  coreCount: Int!
}
"""A connection to a list of items."""
type ServerCPUTypeConnection {
  """A list of edges."""
  edges: [ServerCPUTypeEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type ServerCPUTypeEdge {
  """The item at the end of the edge."""
  node: ServerCPUType
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for ServerCPUType connections"""
input ServerCPUTypeOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order ServerCPUTypes."""
  field: ServerCPUTypeOrderField!
}
"""Properties by which ServerCPUType connections can be ordered."""
enum ServerCPUTypeOrderField {
  ID
  CREATED_AT
  UPDATED_AT
  NAME
}
"""
ServerCPUTypeWhereInput is used for filtering ServerCPUType objects.
Input was generated by ent.
"""
input ServerCPUTypeWhereInput {
  not: ServerCPUTypeWhereInput
  and: [ServerCPUTypeWhereInput!]
  or: [ServerCPUTypeWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """vendor field predicates"""
  vendor: String
  vendorNEQ: String
  vendorIn: [String!]
  vendorNotIn: [String!]
  vendorGT: String
  vendorGTE: String
  vendorLT: String
  vendorLTE: String
  vendorContains: String
  vendorHasPrefix: String
  vendorHasSuffix: String
  vendorEqualFold: String
  vendorContainsFold: String
  """model field predicates"""
  model: String
  modelNEQ: String
  modelIn: [String!]
  modelNotIn: [String!]
  modelGT: String
  modelGTE: String
  modelLT: String
  modelLTE: String
  modelContains: String
  modelHasPrefix: String
  modelHasSuffix: String
  modelEqualFold: String
  modelContainsFold: String
  """clock_speed field predicates"""
  clockSpeed: String
  clockSpeedNEQ: String
  clockSpeedIn: [String!]
  clockSpeedNotIn: [String!]
  clockSpeedGT: String
  clockSpeedGTE: String
  clockSpeedLT: String
  clockSpeedLTE: String
  clockSpeedContains: String
  clockSpeedHasPrefix: String
  clockSpeedHasSuffix: String
  clockSpeedEqualFold: String
  clockSpeedContainsFold: String
  """core_count field predicates"""
  coreCount: Int
  coreCountNEQ: Int
  coreCountIn: [Int!]
  coreCountNotIn: [Int!]
  coreCountGT: Int
  coreCountGTE: Int
  coreCountLT: Int
  coreCountLTE: Int
}
type ServerChassis implements Node @key(fields: "id") @prefixedID(prefix: "srvrsch") {
  """The ID of the server chassis."""
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  """The serial number of the server chassis."""
  serial: String!
  server: Server!
  serverChassisType: ServerChassisType!
}
"""A connection to a list of items."""
type ServerChassisConnection {
  """A list of edges."""
  edges: [ServerChassisEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type ServerChassisEdge {
  """The item at the end of the edge."""
  node: ServerChassis
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for ServerChassis connections"""
input ServerChassisOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order ServerChasses."""
  field: ServerChassisOrderField!
}
"""Properties by which ServerChassis connections can be ordered."""
enum ServerChassisOrderField {
  ID
  CREATED_AT
  UPDATED_AT
  SERVER_CHASSIS_TYPE
  PARENT_CHASSIS
  SERVER
}
type ServerChassisType implements Node @key(fields: "id") @prefixedID(prefix: "srvrsct") {
  """The ID of the server chassis type."""
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  """The name of the vendor for the server chassis type."""
  vendor: String!
  """The mode of the server chassis type."""
  model: String!
  """The height of the server chassis type."""
  height: String!
  """Whether the server chassis type is full depth."""
  isFullDepth: Boolean!
  chassis(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for ServerChasses returned from the connection."""
    orderBy: ServerChassisOrder

    """Filtering options for ServerChasses returned from the connection."""
    where: ServerChassisWhereInput
  ): ServerChassisConnection!
}
"""A connection to a list of items."""
type ServerChassisTypeConnection {
  """A list of edges."""
  edges: [ServerChassisTypeEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type ServerChassisTypeEdge {
  """The item at the end of the edge."""
  node: ServerChassisType
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for ServerChassisType connections"""
input ServerChassisTypeOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order ServerChassisTypes."""
  field: ServerChassisTypeOrderField!
}
"""Properties by which ServerChassisType connections can be ordered."""
enum ServerChassisTypeOrderField {
  ID
  CREATED_AT
  UPDATED_AT
  NAME
  PARENT_CHASSIS_TYPE
}
"""
ServerChassisTypeWhereInput is used for filtering ServerChassisType objects.
Input was generated by ent.
"""
input ServerChassisTypeWhereInput {
  not: ServerChassisTypeWhereInput
  and: [ServerChassisTypeWhereInput!]
  or: [ServerChassisTypeWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """vendor field predicates"""
  vendor: String
  vendorNEQ: String
  vendorIn: [String!]
  vendorNotIn: [String!]
  vendorGT: String
  vendorGTE: String
  vendorLT: String
  vendorLTE: String
  vendorContains: String
  vendorHasPrefix: String
  vendorHasSuffix: String
  vendorEqualFold: String
  vendorContainsFold: String
  """model field predicates"""
  model: String
  modelNEQ: String
  modelIn: [String!]
  modelNotIn: [String!]
  modelGT: String
  modelGTE: String
  modelLT: String
  modelLTE: String
  modelContains: String
  modelHasPrefix: String
  modelHasSuffix: String
  modelEqualFold: String
  modelContainsFold: String
  """height field predicates"""
  height: String
  heightNEQ: String
  heightIn: [String!]
  heightNotIn: [String!]
  heightGT: String
  heightGTE: String
  heightLT: String
  heightLTE: String
  heightContains: String
  heightHasPrefix: String
  heightHasSuffix: String
  heightEqualFold: String
  heightContainsFold: String
  """is_full_depth field predicates"""
  isFullDepth: Boolean
  isFullDepthNEQ: Boolean
  """chassis edge predicates"""
  hasChassis: Boolean
  hasChassisWith: [ServerChassisWhereInput!]
}
"""
ServerChassisWhereInput is used for filtering ServerChassis objects.
Input was generated by ent.
"""
input ServerChassisWhereInput {
  not: ServerChassisWhereInput
  and: [ServerChassisWhereInput!]
  or: [ServerChassisWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """serial field predicates"""
  serial: String
  serialNEQ: String
  serialIn: [String!]
  serialNotIn: [String!]
  serialGT: String
  serialGTE: String
  serialLT: String
  serialLTE: String
  serialContains: String
  serialHasPrefix: String
  serialHasSuffix: String
  serialEqualFold: String
  serialContainsFold: String
  """server edge predicates"""
  hasServer: Boolean
  hasServerWith: [ServerWhereInput!]
  """server_chassis_type edge predicates"""
  hasServerChassisType: Boolean
  hasServerChassisTypeWith: [ServerChassisTypeWhereInput!]
}
type ServerComponent implements Node @key(fields: "id") @prefixedID(prefix: "srvrcmp") {
  """The ID of the server component."""
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  """The name of the server component."""
  name: String!
  """The name of the vendor of the server component."""
  vendor: String!
  """The model of the server component."""
  model: String!
  """The serial number of the server component."""
  serial: String!
  """The server component type for the server component."""
  serverComponentType: ServerComponentType! @goField(name: "ComponentType", forceResolver: false)
  server: Server!
}
"""A connection to a list of items."""
type ServerComponentConnection {
  """A list of edges."""
  edges: [ServerComponentEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type ServerComponentEdge {
  """The item at the end of the edge."""
  node: ServerComponent
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for ServerComponent connections"""
input ServerComponentOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order ServerComponents."""
  field: ServerComponentOrderField!
}
"""Properties by which ServerComponent connections can be ordered."""
enum ServerComponentOrderField {
  ID
  CREATED_AT
  UPDATED_AT
  NAME
  VENDOR
  MODEL
  SERIAL
}
type ServerComponentType implements Node @key(fields: "id") @prefixedID(prefix: "srvrcpt") {
  """The ID of the server component type."""
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  """The name of the server component type."""
  name: String!
}
"""A connection to a list of items."""
type ServerComponentTypeConnection {
  """A list of edges."""
  edges: [ServerComponentTypeEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type ServerComponentTypeEdge {
  """The item at the end of the edge."""
  node: ServerComponentType
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for ServerComponentType connections"""
input ServerComponentTypeOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order ServerComponentTypes."""
  field: ServerComponentTypeOrderField!
}
"""Properties by which ServerComponentType connections can be ordered."""
enum ServerComponentTypeOrderField {
  ID
  CREATED_AT
  UPDATED_AT
  NAME
}
"""
ServerComponentTypeWhereInput is used for filtering ServerComponentType objects.
Input was generated by ent.
"""
input ServerComponentTypeWhereInput {
  not: ServerComponentTypeWhereInput
  and: [ServerComponentTypeWhereInput!]
  or: [ServerComponentTypeWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
}
"""
ServerComponentWhereInput is used for filtering ServerComponent objects.
Input was generated by ent.
"""
input ServerComponentWhereInput {
  not: ServerComponentWhereInput
  and: [ServerComponentWhereInput!]
  or: [ServerComponentWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """vendor field predicates"""
  vendor: String
  vendorNEQ: String
  vendorIn: [String!]
  vendorNotIn: [String!]
  vendorGT: String
  vendorGTE: String
  vendorLT: String
  vendorLTE: String
  vendorContains: String
  vendorHasPrefix: String
  vendorHasSuffix: String
  vendorEqualFold: String
  vendorContainsFold: String
  """model field predicates"""
  model: String
  modelNEQ: String
  modelIn: [String!]
  modelNotIn: [String!]
  modelGT: String
  modelGTE: String
  modelLT: String
  modelLTE: String
  modelContains: String
  modelHasPrefix: String
  modelHasSuffix: String
  modelEqualFold: String
  modelContainsFold: String
  """serial field predicates"""
  serial: String
  serialNEQ: String
  serialIn: [String!]
  serialNotIn: [String!]
  serialGT: String
  serialGTE: String
  serialLT: String
  serialLTE: String
  serialContains: String
  serialHasPrefix: String
  serialHasSuffix: String
  serialEqualFold: String
  serialContainsFold: String
  """component_type edge predicates"""
  hasComponentType: Boolean
  hasComponentTypeWith: [ServerComponentTypeWhereInput!]
  """server edge predicates"""
  hasServer: Boolean
  hasServerWith: [ServerWhereInput!]
}
"""A connection to a list of items."""
type ServerConnection {
  """A list of edges."""
  edges: [ServerEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type ServerEdge {
  """The item at the end of the edge."""
  node: Server
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Server connections"""
input ServerOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Servers."""
  field: ServerOrderField!
}
"""Properties by which Server connections can be ordered."""
enum ServerOrderField {
  ID
  CREATED_AT
  UPDATED_AT
  NAME
  DESCRIPTION
  OWNER
  SERVER_TYPE
}
type ServerProvider implements Node @key(fields: "id") @prefixedID(prefix: "srvrprv") @goModel(model: "go.infratographer.com/server-api/internal/ent/generated.Provider") {
  """The ID of the server provider."""
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  """The name of the server provider."""
  name: String!
  servers(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Servers returned from the connection."""
    orderBy: ServerOrder

    """Filtering options for Servers returned from the connection."""
    where: ServerWhereInput
  ): ServerConnection!
}
"""A connection to a list of items."""
type ServerProviderConnection {
  """A list of edges."""
  edges: [ServerProviderEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type ServerProviderEdge {
  """The item at the end of the edge."""
  node: ServerProvider
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for ServerProvider connections"""
input ServerProviderOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order ServerProviders."""
  field: ServerProviderOrderField!
}
"""Properties by which ServerProvider connections can be ordered."""
enum ServerProviderOrderField {
  ID
  CREATED_AT
  UPDATED_AT
  NAME
  RESOURCE_PROVIDER
}
"""
ServerProviderWhereInput is used for filtering Provider objects.
Input was generated by ent.
"""
input ServerProviderWhereInput {
  not: ServerProviderWhereInput
  and: [ServerProviderWhereInput!]
  or: [ServerProviderWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """servers edge predicates"""
  hasServers: Boolean
  hasServersWith: [ServerWhereInput!]
}
type ServerType implements Node @key(fields: "id") @prefixedID(prefix: "srvrtyp") {
  """The ID of the server type."""
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  """The name of the server type."""
  name: String!
  servers(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Servers returned from the connection."""
    orderBy: ServerOrder

    """Filtering options for Servers returned from the connection."""
    where: ServerWhereInput
  ): ServerConnection!
}
"""A connection to a list of items."""
type ServerTypeConnection {
  """A list of edges."""
  edges: [ServerTypeEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type ServerTypeEdge {
  """The item at the end of the edge."""
  node: ServerType
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for ServerType connections"""
input ServerTypeOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order ServerTypes."""
  field: ServerTypeOrderField!
}
"""Properties by which ServerType connections can be ordered."""
enum ServerTypeOrderField {
  ID
  CREATED_AT
  UPDATED_AT
  NAME
  OWNER
}
"""
ServerTypeWhereInput is used for filtering ServerType objects.
Input was generated by ent.
"""
input ServerTypeWhereInput {
  not: ServerTypeWhereInput
  and: [ServerTypeWhereInput!]
  or: [ServerTypeWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """servers edge predicates"""
  hasServers: Boolean
  hasServersWith: [ServerWhereInput!]
}
"""
ServerWhereInput is used for filtering Server objects.
Input was generated by ent.
"""
input ServerWhereInput {
  not: ServerWhereInput
  and: [ServerWhereInput!]
  or: [ServerWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """description field predicates"""
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  """provider edge predicates"""
  hasProvider: Boolean
  hasProviderWith: [ServerProviderWhereInput!]
  """server_type edge predicates"""
  hasServerType: Boolean
  hasServerTypeWith: [ServerTypeWhereInput!]
  """components edge predicates"""
  hasComponents: Boolean
  hasComponentsWith: [ServerComponentWhereInput!]
}
"""The builtin Time type"""
scalar Time
"""Input information to update a server cpu type."""
input UpdateServerCPUTypeInput {
  """The name of the vendor for the server cpu type."""
  vendor: String
  """The mode of the server cpu type."""
  model: String
  """The clock speed of the server cpu type."""
  clockSpeed: String
  """The number of cores for the server cpu type."""
  coreCount: Int
}
"""Input information to update a server chassis."""
input UpdateServerChassisInput {
  """The serial number of the server chassis."""
  serial: String
}
"""Input information to update a server chassis type."""
input UpdateServerChassisTypeInput {
  """The name of the vendor for the server chassis type."""
  vendor: String
  """The mode of the server chassis type."""
  model: String
  """The height of the server chassis type."""
  height: String
  """Whether the server chassis type is full depth."""
  isFullDepth: Boolean
  addChassiIDs: [ID!]
  removeChassiIDs: [ID!]
  clearChassis: Boolean
}
"""Input information to update a server component."""
input UpdateServerComponentInput {
  """The name of the server component."""
  name: String
  """The name of the vendor of the server component."""
  vendor: String
  """The model of the server component."""
  model: String
  """The serial number of the server component."""
  serial: String
}
"""Input information to update a server component type."""
input UpdateServerComponentTypeInput {
  """The name of the server component type."""
  name: String
}
"""Update an existing server."""
input UpdateServerInput {
  """The name of the server."""
  name: String
  """The description of the server."""
  description: String
  clearDescription: Boolean
  addComponentIDs: [ID!]
  removeComponentIDs: [ID!]
  clearComponents: Boolean
}
"""Input information to update a server provider."""
input UpdateServerProviderInput {
  """The name of the server provider."""
  name: String
}
"""Input information to update a server type."""
input UpdateServerTypeInput {
  """The name of the server type."""
  name: String
}
